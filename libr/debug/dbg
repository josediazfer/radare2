../anal/reflines.c:	RCons *c = core->cons;
../anal/reflines.c:	RAnal *anal = core->anal;
../anal/reflines.c:		if (core->cons && core->cons->breaked) {
../anal/reflines.c:		if (core->cons && core->cons->breaked) {
../anal/reflines.c:	if (core->anal->lineswidth > 0) {
../anal/reflines.c:		int lw = core->anal->lineswidth;
../anal/reflines.c:	if (core->cons->use_utf8 || opts & R_ANAL_REFLINE_TYPE_UTF8) {
../anal/sign.c:	const RList *list = r_flag_get_list (core->flags, off);
../asm/arch/tricore/gnu/tricore-dis.c:/* End of tricore-dis.c.  */
../asm/arch/tricore/gnu/tricore-dis.d:p/../arch/tricore/gnu/tricore-dis.o: p/../arch/tricore/gnu/tricore-dis.c \
Binary file ../asm/arch/tricore/gnu/tricore-dis.o matches
../asm/arch/tricore/gnu/tricore-opc.c:/* End of tricore-opc.c.  */
../asm/arch/tricore/gnu/tricore-opc.d:p/../arch/tricore/gnu/tricore-opc.o: p/../arch/tricore/gnu/tricore-opc.c \
Binary file ../asm/arch/tricore/gnu/tricore-opc.o matches
../asm/arch/tricore/README.md:Based on code from https://www.hightec-rt.com/en/downloads/sources/14-sources-for-tricore-v3-3-7-9-binutils-1.html
../asm/arch/xtensa/gnu/elf32-xtensa.c:  elf_tdata (abfd)->core->signal = bfd_get_16 (abfd, note->descdata + 12);
../asm/arch/xtensa/gnu/elf32-xtensa.c:  elf_tdata (abfd)->core->lwpid = bfd_get_32 (abfd, note->descdata + 24);
../asm/arch/xtensa/gnu/elf32-xtensa.c:	elf_tdata (abfd)->core->program
../asm/arch/xtensa/gnu/elf32-xtensa.c:	elf_tdata (abfd)->core->command
../asm/arch/xtensa/gnu/elf32-xtensa.c:    char *command = elf_tdata (abfd)->core->command;
../asm/asm.c:				//const char *dop = r_config_get (core->config, "dir.opcodes");
Binary file ../asm/libr_asm.dll matches
../asm/meson.build:'arch//tricore/gnu/tricore-dis.c',
../asm/meson.build:'arch//tricore/gnu/tricore-opc.c',
../asm/p/asm_x86_nz.c:			if (core && (flag = r_flag_get (core->flags, str))) {
../asm/p/tricore.mk:OBJ_TRICORE+=../arch/tricore/gnu/tricore-dis.o
../asm/p/tricore.mk:OBJ_TRICORE+=../arch/tricore/gnu/tricore-opc.o
../bin/pdb/pdb_downloader.c:	RBinInfo *info = r_bin_get_info (core->bin);
../core/anal_tp.c:	r_config_set (core->config, "esil.romem", "true");
../core/anal_tp.c:	r_config_set (core->config, "asm.trace", "true");
../core/anal_tp.c:	r_config_set (core->config, "dbg.trace", "true");
../core/anal_tp.c:	r_config_set (core->config, "esil.nonull", "true");
../core/anal_tp.c:	const char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);
../core/anal_tp.c:	const char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);
../core/anal_tp.c:	if ((bp && !r_reg_getv (core->anal->reg, bp)) && (sp && !r_reg_getv (core->anal->reg, sp))) {
../core/anal_tp.c:	return (core->anal->esil != NULL);
../core/anal_tp.c:	Sdb *trace = core->anal->esil->db_trace;
../core/anal_tp.c:	RAnal *anal = core->anal;
../core/anal_tp.c:					r_meta_set_string (core->anal, R_META_TYPE_COMMENT, instr_addr,
../core/anal_tp.c:						r_meta_set_string (core->anal, R_META_TYPE_COMMENT, instr_addr,
../core/anal_tp.c:					r_meta_set_string (core->anal, R_META_TYPE_COMMENT, instr_addr,
../core/anal_tp.c:	offset = r_num_math (core->num, str);
../core/anal_tp.c:	const char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);
../core/anal_tp.c:		r_anal_esil_parse (core->anal->esil, esil);
../core/anal_tp.c:		r_anal_esil_stack_free (core->anal->esil);
../core/anal_tp.c:	hc = r_config_hold_new (core->config);
../core/anal_tp.c:	const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/anal_tp.c:		r_reg_setv (core->dbg->reg, pc, bb->addr);
../core/anal_tp.c:		r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);
../core/anal_tp.c:			int loop_count = sdb_num_get (core->anal->esil->db_trace, sdb_fmt (-1, "0x%"PFMT64x".count", addr), 0);
../core/anal_tp.c:			sdb_num_set (core->anal->esil->db_trace, sdb_fmt (-1, "0x%"PFMT64x".count", addr), loop_count + 1, 0);
../core/anal_tp.c:					RAnalFunction *fcn_call = r_anal_get_fcn_in (core->anal, op->jump, -1);
../core/anal_tp.c:					r_reg_setv (core->dbg->reg, pc, addr);
../core/anal_tp.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);
../core/anal_tp.c:					r_anal_esil_set_pc (core->anal->esil, addr);
../core/anal_tp.c:					r_reg_setv (core->dbg->reg, pc, addr);
../core/anal_tp.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);
../core/anal_tp.c:					r_anal_esil_set_pc (core->anal->esil, addr);
../core/anal_tp.c:				   addr = r_reg_getv (core->anal->reg, pc);
../core/anal_tp.c:	sdb_reset (core->anal->esil->db_trace);
../core/anal_vt.c:		int bits = r_config_get_i (core->config, "asm.bits");
../core/anal_vt.c:			r_io_read_i (core->io, startAddress, &curAddressValue, 8, false);	//XXX
../core/anal_vt.c:			RAnalFunction *curFuntion = r_anal_get_fcn_in (core->anal, curAddressValue, 0);
../core/anal_vt.c:	RBinSection* value = r_bin_get_section_at (core->bin->cur->o, curAddress, true);
../core/anal_vt.c:	r_io_read_i (core->io, curAddress, &curAddressValue, 8, false);	//XXX
../core/anal_vt.c:		RList *xrefs = r_anal_xrefs_get (core->anal, curAddress);
../core/anal_vt.c:					r_io_read_at (core->io, xref->addr, buf, VTABLE_BUFF_SIZE);
../core/anal_vt.c:					if (r_asm_disassemble (core->assembler, &asmop, buf, VTABLE_BUFF_SIZE) > 0) {
../core/anal_vt.c:	RList *sections = r_bin_get_sections (core->bin);
../core/anal_vt.c:	ut64 bits = r_config_get_i (core->config, "asm.bits");
../core/anal_vt.c:			r_io_read_at (core->io, section->vaddr, segBuff, section->vsize);
../core/anal_vt.c:	ut64 bits = r_config_get_i (core->config, "asm.bits");
../core/anal_vt.c:	r_io_read_i (core->io, atAddress - wordSize, &BaseLocatorAddr, wordSize, false);	//XXX
../core/asm.c:	if (!(acode = r_asm_massemble (core->assembler, input))) {
../core/asm.c:	ut64 at, toff = core->offset;
../core/asm.c:	int align = core->search->align;
../core/asm.c:	const int addrbytes = core->io->addrbytes;
../core/asm.c:	if (core->blocksize <= OPSZ) {
../core/asm.c:	if (!(buf = (ut8 *)calloc (core->blocksize, 1))) {
../core/asm.c:	for (at = from, matchcount = 0; at < to; at += core->blocksize) {
../core/asm.c:		if (!r_io_is_valid_offset (core->io, at, 0)) {
../core/asm.c:		(void)r_io_read_at (core->io, at, buf, core->blocksize);
../core/asm.c:		while (addrbytes * (idx + 1) <= core->blocksize) {
../core/asm.c:			r_asm_set_pc (core->assembler, addr);
../core/asm.c:				      core->assembler, &op,
../core/asm.c:				      core->blocksize - addrbytes * idx))) {
../core/asm.c:	r_asm_set_pc (core->assembler, toff);
../core/asm.c:	r_asm_set_pc (core->assembler, current_instr_addr);
../core/asm.c:		temp_instr_len = r_asm_disassemble (core->assembler, &op, buf+tmp_current_buf_pos, temp_instr_len);
../core/asm.c:	// if (n > core->blocksize) n = core->blocksize;
../core/asm.c:	const int addrbytes = core->io->addrbytes;
../core/asm.c:	if (!r_io_read_at (core->io, addr - len / addrbytes, buf, len)) {
../core/asm.c:		c = r_asm_mdisassemble (core->assembler, buf+(len-idx), idx);
../core/asm.c:	r_asm_set_pc (core->assembler, at);
../core/asm.c:		int instrlen = r_asm_disassemble (core->assembler, &op,
../core/asm.c:	if (!r_io_read_at (core->io, addr-(len+extra_padding), buf, len + extra_padding)) {
../core/asm.c:		r_asm_set_pc (core->assembler, current_instr_addr);
../core/asm.c:		current_instr_len = r_asm_disassemble (core->assembler, &op, buf+current_buf_pos, current_instr_len);
../core/asm.c:	if (!r_io_read_at (core->io, (addr + extra_padding) - len, buf, len + extra_padding)) {
../core/asm.c:		r_asm_set_pc (core->assembler, current_instr_addr);
../core/asm.c:		current_instr_len = r_asm_disassemble (core->assembler, &op, buf+current_buf_pos, current_instr_len);
../core/asm.c:	r_asm_set_pc (core->assembler, addr);
../core/asm.c:	RList* hits = r_core_asm_bwdisassemble (core, core->offset, nb, core->blocksize);
../core/blaze.c:	const char *pfx = r_config_get (core->config, "anal.fcnprefix");
../core/blaze.c:	const char *pfx = r_config_get (core->config, "anal.fcnprefix");
../core/blaze.c:	f->bits = core->anal->bits;
../core/blaze.c:	f->cc = r_str_const (r_anal_cc_default (core->anal));
../core/blaze.c:		r_anal_fcn_add_bb (core->anal, f, cur->start, (cur->end - cur->start), cur->jump, cur->fail, 0, NULL);
../core/blaze.c:	if (!r_anal_fcn_insert (core->anal, f)) {
../core/blaze.c:	if (!r_io_is_valid_offset (core->io, core->offset, false)) {
../core/blaze.c:	ut64 start = core->offset;
../core/blaze.c:	ut64 size = input[0] ? r_num_math (core->num, input + 1) : core->blocksize;
../core/blaze.c:			if (r_anal_noreturn_at (core->anal, op->jump)) {
../core/canal.c:        RList *klasses = r_bin_get_classes (core->bin);
../core/canal.c:	RFlagItem *fi = r_flag_get_at (core->flags, addr, false);
../core/canal.c:// - addr is in different section than core->offset
../core/canal.c:	RIOSection *s = r_io_section_vget (core->io, addr);
../core/canal.c:	r_io_read_at (core->io, addr, str, 1024);
../core/canal.c:	if (core->dbg && core->dbg->reg) {
../core/canal.c:		rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../core/canal.c:				ut64 val = r_reg_getv(core->dbg->reg, r->name);
../core/canal.c:	if (r_flag_get_i (core->flags, addr)) {
../core/canal.c:	if (r_anal_get_fcn_in (core->anal, addr, 0)) {
../core/canal.c:	if (core->io && core->io->debug && core->dbg) {
../core/canal.c:		// r_debug_map_sync (core->dbg);
../core/canal.c:		r_list_foreach (core->dbg->maps, iter, map) {
../core/canal.c:					if (core->io && core->io->desc &&
../core/canal.c:					    core->io->desc->name &&
../core/canal.c:						     core->io->desc->name)) {
../core/canal.c:		if (core->io) {
../core/canal.c:			ls_foreach (core->io->sections, iter, ios) {
../core/canal.c:	r_list_foreach (core->anal->fcns, it, fcn) {
../core/canal.c:			r_flag_rename (core->flags, r_flag_get (core->flags, fcn->name), name);
../core/canal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/canal.c:			RFlagItem *f = r_flag_get_i (core->flags, ref->addr);
../core/canal.c:			RFlagItem *item = r_flag_get (core->flags, "main");
../core/canal.c:		    r_bin_is_string (core->bin, ref->addr)) {
../core/canal.c:	sec = r_io_section_vget (core->io, ref->addr);
../core/canal.c:	r_io_read_at (core->io, ref->addr, buf, bufsz);
../core/canal.c:	    r_anal_check_fcn (core->anal, buf, bufsz, ref->addr, sec->vaddr,
../core/canal.c:		if (core->anal->limit) {
../core/canal.c:			if (ref->addr < core->anal->limit->from ||
../core/canal.c:			    ref->addr > core->anal->limit->to) {
../core/canal.c:		ut64 offs, sz = core->anal->bits >> 3;
../core/canal.c:			bool be = core->anal->big_endian;
../core/canal.c:				if (core->anal->opt.followdatarefs) {
../core/canal.c:			// added in core->anal->fcns which is freed in r_anal_free()
../core/canal.c:	int has_next = r_config_get_i (core->config, "anal.hasnext");
../core/canal.c:	const char *fcnpfx = r_config_get (core->config, "anal.fcnprefix");
../core/canal.c:	fcn->cc = r_str_const (r_anal_cc_default (core->anal));
../core/canal.c:	hint = r_anal_hint_get (core->anal, at);
../core/canal.c:		fcn->bits = core->anal->bits;
../core/canal.c:	buflen = core->anal->opt.bb_max_size;
../core/canal.c:		if (core->io->va) {
../core/canal.c:			if (!r_io_is_valid_offset (core->io, at+delta, !core->anal->opt.noncode)) {
../core/canal.c:		if (!r_io_read_at (core->io, at + delta, buf, 4)) {
../core/canal.c:		(void)r_io_read_at (core->io, at + delta, buf, buflen);
../core/canal.c:		fcnlen = r_anal_fcn (core->anal, fcn, at + delta, buf, buflen, reftype);
../core/canal.c:		if (core->anal->opt.searchstringrefs) {
../core/canal.c:		f = r_flag_get_i2 (core->flags, fcn->addr);
../core/canal.c:		core->flags->space_strict = true;
../core/canal.c:		f = r_flag_get_at (core->flags, fcn->addr, true);
../core/canal.c:			f = r_flag_get_i2 (core->flags, fcn->addr);
../core/canal.c:			f = r_flag_get_i (core->flags, fcn->addr);
../core/canal.c:			if (core->anal->opt.followbrokenfcnsrefs) {
../core/canal.c:			f = r_flag_get_i2 (core->flags, fcn->addr);
../core/canal.c:				f = r_flag_get_i (core->flags, fcn->addr);
../core/canal.c:						fcnpfx = r_config_get (core->config, "anal.fcnprefix");
../core/canal.c:				r_flag_space_push (core->flags, "functions");
../core/canal.c:				r_flag_set (core->flags, fcn->name, fcn->addr, r_anal_fcn_size (fcn));
../core/canal.c:				r_flag_space_pop (core->flags);
../core/canal.c:					RAnalFunction *f = r_anal_get_fcn_in (core->anal, from, -1);
../core/canal.c:				r_anal_xrefs_set (core->anal, reftype, from, fcn->addr);
../core/canal.c:			r_anal_fcn_insert (core->anal, fcn);
../core/canal.c:				RIOSection *sect = r_io_section_vget (core->io, addr);
../core/canal.c:							const RAnalMetaItem *mi = r_meta_find (core->anal, at, R_META_TYPE_ANY, 0);
../core/canal.c:			if (!next[i] || r_anal_get_fcn_in (core->anal, next[i], 0)) {
../core/canal.c:				r_flag_space_push (core->flags, "functions");
../core/canal.c:				r_flag_set (core->flags, fcn->name, at, r_anal_fcn_size (fcn));
../core/canal.c:				r_flag_space_pop (core->flags);
../core/canal.c:			r_anal_fcn_insert (core->anal, fcn);
../core/canal.c:			RIOSection *sect = r_io_section_vget (core->io, newaddr);
../core/canal.c:	if (addr >= core->offset && addr + 16 < core->offset + core->blocksize) {
../core/canal.c:		int delta = (addr - core->offset);
../core/canal.c:		ptr = core->block + delta;
../core/canal.c:		len = core->blocksize - delta;
../core/canal.c:		if (!r_io_read_at (core->io, addr, buf, sizeof (buf))) {
../core/canal.c:	if (r_anal_op (core->anal, op, addr, ptr, len) < 1) {
../core/canal.c:	r_asm_set_pc (core->assembler, addr);
../core/canal.c:	if (r_asm_disassemble (core->assembler, &asmop, ptr, len) > 0) {
../core/canal.c:			r_bin_addr2line (core->bin, at, file, sizeof (file) - 1, &line);
../core/canal.c:		const bool scrColor = r_config_get (core->config, "scr.color");
../core/canal.c:		const bool scrUtf8 = r_config_get (core->config, "scr.utf8");
../core/canal.c:		const bool asmComments = r_config_get (core->config, "asm.comments");
../core/canal.c:		r_config_set (core->config, "scr.color", "false");
../core/canal.c:		r_config_set (core->config, "scr.utf8", "false");
../core/canal.c:		r_config_set (core->config, "asm.comments", "false");
../core/canal.c:		r_config_set_i (core->config, "scr.color", scrColor);
../core/canal.c:		r_config_set_i (core->config, "scr.utf8", scrUtf8);
../core/canal.c:		r_config_set_i (core->config, "asm.comments", asmComments);
../core/canal.c:	bool color_current = r_config_get_i (core->config, "graph.gv.current");
../core/canal.c:	bool current = r_anal_bb_is_in_offset (bbi, core->offset);
../core/canal.c:	const char *font = r_config_get (core->config, "graph.font");
../core/canal.c:	bool color_current = r_config_get_i (core->config, "graph.gv.current");
../core/canal.c:		DB = sdb_ns (core->anal->sdb, "graph", 1);
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'r', 1) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 's', 1) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'b', 1));
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'r', 0) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 's', 0) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'b', 0));
../core/canal.c:			RDebugTracepoint *t = r_debug_trace_get (core->dbg, bbi->addr);
../core/canal.c:				r_io_read_at (core->io, bbi->addr, buf, bbi->size);
../core/canal.c:					bool current = r_anal_bb_is_in_offset (bbi, core->offset);
../core/canal.c:	if (core->anal->split) {
../core/canal.c:		ret = r_anal_fcn_split_bb (core->anal, fcn, bb, at);
../core/canal.c:		buf = malloc (core->anal->opt.bb_max_size);
../core/canal.c:			if (!r_io_read_at (core->io, at + bblen, buf, 4)) { // ETOOSLOW
../core/canal.c:			r_core_read_at (core, at + bblen, buf, core->anal->opt.bb_max_size);
../core/canal.c:			if (!r_io_read_at (core->io, at + bblen, buf, core->anal->opt.bb_max_size)) { // ETOOSLOW
../core/canal.c:			if (!r_io_is_valid_offset (core->io, at + bblen, !core->anal->opt.noncode)) {
../core/canal.c:			buflen = core->anal->opt.bb_max_size;
../core/canal.c:			bblen = r_anal_bb (core->anal, bb, at+bblen, buf, buflen, head);
../core/canal.c:				if (core->anal->split) {
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, fcni) {
../core/canal.c:	if (from == UT64_MAX && r_anal_get_fcn_in (core->anal, at, 0)) {
../core/canal.c:	bool use_esil = r_config_get_i (core->config, "anal.esil");
../core/canal.c:	//update bits based on the core->offset otherwise we could have the
../core/canal.c:	r_anal_build_range_on_hints (core->anal);
../core/canal.c:	if (core->io->va) {
../core/canal.c:		if (!r_io_is_valid_offset (core->io, at, !core->anal->opt.noncode)) {
../core/canal.c:	if (r_config_get_i (core->config, "anal.a2f")) {
../core/canal.c:	if (core->anal->cur && core->anal->cur->analyze_fns) {
../core/canal.c:		result = core->anal->cur->analyze_fns (core->anal, at, from, reftype, depth);
../core/canal.c:		r_flag_space_push (core->flags, "functions");
../core/canal.c:		r_list_foreach (core->anal->fcns, iter, fcn) {
../core/canal.c:			r_flag_set (core->flags, fcn->name, fcn->addr, r_anal_fcn_size (fcn));
../core/canal.c:		r_flag_space_pop (core->flags);
../core/canal.c:	fcn = r_anal_get_fcn_in (core->anal, at, 0);
../core/canal.c:					r_anal_xrefs_set (core->anal, reftype, from, fcn->addr);
../core/canal.c:		r_list_purge (core->anal->fcns);
../core/canal.c:		if (!(core->anal->fcns = r_anal_fcn_list_new ()))
../core/canal.c:		r_list_foreach_safe (core->anal->fcns, iter, iter_tmp, fcni) {
../core/canal.c:				r_list_delete (core->anal->fcns, iter);
../core/canal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);
../core/canal.c:			RFlagItem *item = r_flag_get_i (core->flags, ref->addr);
../core/canal.c:		RList *list = r_anal_xrefs_get (core->anal, addr);
../core/canal.c:			RFlagItem *item = r_flag_get_i (core->flags, ref->addr);
../core/canal.c:	const char *font = r_config_get (core->config, "graph.font");
../core/canal.c:	const char *format = r_config_get (core->config, "graph.format");
../core/canal.c:	bool refgraph = r_config_get_i (core->config, "graph.refs");
../core/canal.c:	ut64 from = r_config_get_i (core->config, "graph.from");
../core/canal.c:	ut64 to = r_config_get_i (core->config, "graph.to");
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, fcni) {
../core/canal.c:			RFlagItem *flag = r_flag_get_i (core->flags, fcni->addr);
../core/canal.c:			RAnalFunction *fr = r_anal_get_fcn_in (core->anal, fcnr->addr, 0);
../core/canal.c:						const char * gv_edge = r_config_get (core->config, "graph.gv.edge");
../core/canal.c:						const char * gv_node = r_config_get (core->config, "graph.gv.node");
../core/canal.c:						const char * gv_grph = r_config_get (core->config, "graph.gv.graph");
../core/canal.c:						const char * gv_spline = r_config_get (core->config, "graph.gv.spline");
../core/canal.c:			RFlagItem *flag = r_flag_get_i (core->flags, fcnr->addr);
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/canal.c:	demangle = r_config_get_i (core->config, "bin.demangle");
../core/canal.c:	lang = demangle ? r_config_get (core->config, "bin.lang") : NULL;
../core/canal.c:		char *tmp = r_bin_demangle (core->bin->cur, lang, name, fcn->addr);
../core/canal.c:			r_anal_fcn_cost (core->anal, fcn),
../core/canal.c:			r_anal_var_count (core->anal, fcn, 's', 0) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'b', 0) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'r', 0),
../core/canal.c:			r_anal_var_count (core->anal, fcn, 's', 1) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'b', 1) +
../core/canal.c:			r_anal_var_count (core->anal, fcn, 'r', 1),
../core/canal.c:	bool use_color = r_config_get_i (core->config, "scr.color");
../core/canal.c:	r_cons_printf (",\"cost\":%d", r_anal_fcn_cost (core->anal, fcn));
../core/canal.c:		r_anal_var_count (core->anal, fcn, 'b', 1) +
../core/canal.c:		r_anal_var_count (core->anal, fcn, 'r', 1) +
../core/canal.c:		r_anal_var_count (core->anal, fcn, 's', 1));
../core/canal.c:		r_anal_var_count (core->anal, fcn, 'b', 0) +
../core/canal.c:		r_anal_var_count (core->anal, fcn, 'r', 0) +
../core/canal.c:		r_anal_var_count (core->anal, fcn, 's', 0));
../core/canal.c:	r_cons_printf ("\ncyclomatic-cost : %d", r_anal_fcn_cost (core->anal, fcn));
../core/canal.c:		int args_count = r_anal_var_count (core->anal, fcn, 'b', 1);
../core/canal.c:		args_count += r_anal_var_count (core->anal, fcn, 's', 1);
../core/canal.c:		args_count += r_anal_var_count (core->anal, fcn, 'r', 1);
../core/canal.c:		int var_count = r_anal_var_count (core->anal, fcn, 'b', 0);
../core/canal.c:		var_count += r_anal_var_count (core->anal, fcn, 's', 0);
../core/canal.c:		var_count += r_anal_var_count (core->anal, fcn, 'r', 0);
../core/canal.c:		r_anal_var_list_show (core->anal, fcn, 'b', 0);
../core/canal.c:		r_anal_var_list_show (core->anal, fcn, 's', 0);
../core/canal.c:		r_anal_var_list_show (core->anal, fcn, 'r', 0);
../core/canal.c:	if (!core || !core->anal) {
../core/canal.c:	if (r_list_empty (core->anal->fcns)) {
../core/canal.c:	fcnlist_gather_metadata (core->anal, core->anal->fcns);
../core/canal.c:	addr = core->offset;
../core/canal.c:		addr = r_num_math (core->num, name);
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/canal.c:	bb = r_anal_bb_from_offset (core->anal, addr);
../core/canal.c:	if (!core || !core->anal || !fcn || core->anal->opt.bb_max_size < 1) {
../core/canal.c:	int bb_size = core->anal->opt.bb_max_size;
../core/canal.c:		if (!r_io_read_at (core->io, bb->addr, buf, bb->size)) {
../core/canal.c:			r_anal_fcn_fill_args (core->anal, fcn, op);
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/canal.c:		if (!r_anal_fcn_is_in_offset (fcn, core->offset)) {
../core/canal.c:			if (r_anal_bb_is_in_offset (bb, core->offset)) {
../core/canal.c:	ut64 from = r_config_get_i (core->config, "graph.from");
../core/canal.c:	ut64 to = r_config_get_i (core->config, "graph.to");
../core/canal.c:	const char *font = r_config_get (core->config, "graph.font");
../core/canal.c:		addr = core->offset;
../core/canal.c:	if (r_list_empty (core->anal->fcns)) {
../core/canal.c:	hc = r_config_hold_new (core->config);
../core/canal.c:	r_config_set_i (core->config, "asm.lines", 0);
../core/canal.c:	r_config_set_i (core->config, "asm.bytes", 0);
../core/canal.c:	r_config_set_i (core->config, "asm.dwarf", 0);
../core/canal.c:		const char * gv_edge = r_config_get (core->config, "graph.gv.edge");
../core/canal.c:		const char * gv_node = r_config_get (core->config, "graph.gv.node");
../core/canal.c:		const char * gv_spline = r_config_get (core->config, "graph.gv.spline");
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, fcni) {
../core/canal.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/canal.c:			r_anal_ref_add (core->anal, ptr, at, type? type: 'c');
../core/canal.c:			r_anal_ref_add (core->anal, ptr, at, 'd');
../core/canal.c:	wordsize = (int)(core->anal->bits / 8);
../core/canal.c:	if (!r_io_read_i (core->io, ptr, &dataptr, wordsize, false)) {
../core/canal.c:			if (r_anal_op (core->anal, aop, addr, buf, len)) {
../core/canal.c:		if (!r_anal_op (core->anal, aop, addr, buf, len)) {
../core/canal.c:	ut8 *buf = (ut8 *)malloc (core->blocksize);
../core/canal.c:	int ptrdepth = r_config_get_i (core->config, "anal.ptrdepth");
../core/canal.c:	if (core->assembler->bits == 64) {
../core/canal.c:		if (!strncmp (core->assembler->cur->name, "arm", 3)) {
../core/canal.c:	do_bckwrd_srch = bckwrds = core->search->bckwrds;
../core/canal.c:	r_io_use_fd (core->io, core->file->fd);
../core/canal.c:	if (core->blocksize > OPSZ) {
../core/canal.c:			if (from + core->blocksize > to) {
../core/canal.c:				at = to - core->blocksize;
../core/canal.c:			if (!r_io_read_at (core->io, at, buf, core->blocksize)) {
../core/canal.c:			for (i = bckwrds ? (core->blocksize - OPSZ - 1) : 0;
../core/canal.c:			     (!bckwrds && i < core->blocksize - OPSZ) ||
../core/canal.c:					if (!opiscall (core, &op, at + i, buf + i, core->blocksize - i, arch)) {
../core/canal.c:						r_anal_op (core->anal, &op, at + i, buf + i, core->blocksize - i);
../core/canal.c:					if (!r_anal_op (core->anal, &op, at + i, buf + i, core->blocksize - i)) {
../core/canal.c:				if (at > from + core->blocksize - OPSZ) {
../core/canal.c:					at -= core->blocksize;
../core/canal.c:				at += core->blocksize - OPSZ;
../core/canal.c:	int cfg_debug = r_config_get_i (core->config, "cfg.debug");
../core/canal.c:	bool cfg_anal_strings = r_config_get_i (core->config, "anal.strings");
../core/canal.c:	if (core->blocksize <= OPSZ) {
../core/canal.c:	buf = (ut8 *)malloc (core->blocksize);
../core/canal.c:	r_io_use_fd (core->io, core->file->fd);
../core/canal.c:		int i = 0, ret = core->blocksize;
../core/canal.c:		if (!r_io_is_valid_offset (core->io, at, 0)) {
../core/canal.c:		(void)r_io_read_at (core->io, at, buf, core->blocksize);
../core/canal.c:			ret = r_anal_op (core->anal, &op, at + i, buf + i, core->blocksize - i);
../core/canal.c:				if (!r_debug_map_get (core->dbg, xref_to)) {
../core/canal.c:			} else if (core->io->va) {
../core/canal.c:				if (!r_io_is_valid_offset (core->io, xref_to, 0)) {
../core/canal.c:						r_flag_space_push (core->flags, "strings");
../core/canal.c:						(void)r_flag_set (core->flags, str_flagname, xref_to, 1);
../core/canal.c:						r_flag_space_pop (core->flags);
../core/canal.c:						r_meta_add (core->anal, R_META_TYPE_STRING, xref_to,
../core/canal.c:				r_anal_xrefs_set (core->anal, type, xref_from, xref_to);
../core/canal.c:	r_anal_xrefs_list (core->anal, rad);
../core/canal.c:	int depth = r_config_get_i (core->config, "anal.depth");
../core/canal.c:	bool anal_vars = r_config_get_i (core->config, "anal.vars");
../core/canal.c:	item = r_flag_get (core->flags, "entry0");
../core/canal.c:	if ((list = r_bin_get_symbols (core->bin)) != NULL) {
../core/canal.c:				ut64 addr = r_bin_get_vaddr (core->bin, symbol->paddr,
../core/canal.c:	if ((binmain = r_bin_get_sym (core->bin, R_BIN_SYM_MAIN)) != NULL) {
../core/canal.c:		ut64 addr = r_bin_get_vaddr (core->bin, binmain->paddr, binmain->vaddr);
../core/canal.c:	if ((list = r_bin_get_entries (core->bin)) != NULL) {
../core/canal.c:			ut64 addr = r_bin_get_vaddr (core->bin, entry->paddr, entry->vaddr);
../core/canal.c:		r_list_foreach (core->anal->fcns, iter, fcni) {
../core/canal.c:			if (r_config_get_i (core->config, "anal.vars")) {
../core/canal.c:				r_anal_var_delete_all (core->anal, fcni->addr, 'r');
../core/canal.c:				r_anal_var_delete_all (core->anal, fcni->addr, 'b');
../core/canal.c:				r_anal_var_delete_all (core->anal, fcni->addr, 's');
../core/canal.c:	r_list_foreach (core->config->nodes, iter, kv) {
../core/canal.c:		r_anal_type_define (core->anal, key, kv->value);
../core/canal.c:			r_anal_type_define_i (core->anal, key, kv->i_value);
../core/canal.c:			r_anal_type_define (core->anal, key, kv->i_value? "": NULL);
../core/canal.c:		} else r_anal_type_define (core->anal, key, kv->value);
../core/canal.c:	r_anal_type_header (core->anal, str);
../core/canal.c:	ut8 *buf = core->block;
../core/canal.c:	int len = core->blocksize;
../core/canal.c:	int word = wordsize ? wordsize: core->assembler->bits / 8;
../core/canal.c:	r_io_read_at (core->io, addr, buf, len);
../core/canal.c:	RConsPalette *pal = r_config_get_i (core->config, "scr.color")? &r_cons_singleton()->pal: NULL;
../core/canal.c:			r_io_read_at (core->io, addr + i, buf, len);
../core/canal.c:		d = r_anal_data (core->anal, addr + i, buf + i, len - i, wordsize);
../core/canal.c:		RIOSection *sec = r_io_section_get (core->io, at);
../core/canal.c:				(core->io->desc ? core->io->desc->flags: 0);
../core/canal.c:	r_list_foreach (core->flags->flags, iter, f) {
../core/canal.c:	r_list_foreach (core->anal->fcns, iter, F) {
../core/canal.c:	r_list_foreach (r_bin_get_symbols (core->bin), iter, S) {
../core/canal.c:	RList *metas = r_meta_enumerate (core->anal, -1);
../core/canal.c:	ut64 addr = core->offset;
../core/canal.c:	r_anal_fcn_del_locs (core->anal, off);
../core/canal.c:	f = r_anal_get_fcn_in (core->anal, off, 0);
../core/canal.c:			r_flag_unset_name (core->flags, f->name);
../core/canal.c:		r_meta_del (core->anal, R_META_TYPE_ANY, off, r_anal_fcn_size (f));
../core/canal.c:	r_anal_fcn_del (core->anal, off);
../core/canal.c:// addr use to be core->offset
../core/canal.c:	RAnalFunction *f1 = r_anal_get_fcn_at (core->anal, addr, 0);
../core/canal.c:	RAnalFunction *f2 = r_anal_get_fcn_at (core->anal, addr2, 0);
../core/canal.c:	r_list_delete_data (core->anal->fcns, f2);
../core/canal.c:	if (myvalid (mycore->io, addr) && r_io_read_at (mycore->io, addr, (ut8*)buf, len)) {
../core/canal.c:			r_io_read_at (mycore->io, addr, (ut8*)buf, len);
../core/canal.c:		if (trace && myvalid (mycore->io, refptr)) {
../core/canal.c:				r_anal_ref_add (mycore->anal, refptr, esil->address, 'd');
../core/canal.c:				if (r_io_read_at (mycore->io, refptr, str, sizeof (str)) < 1) {
../core/canal.c:			r_anal_ref_add (mycore->anal, addr, esil->address, 'd');
../core/canal.c:		r_flag_space_push (core->flags, "strings");
../core/canal.c:		r_flag_set (core->flags, flagname, xref_to, len);
../core/canal.c:		r_flag_space_pop (core->flags);
../core/canal.c:		r_meta_add (core->anal, 's', xref_to, xref_to + len, str_flagname);
../core/canal.c:	fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/canal.c:	r_io_read_at (core->io, addr, buf, size + 1);
../core/canal.c:	if (r_anal_op (core->anal, &op, cur, buf + idx, size - idx) <= 0 ||
../core/canal.c:	r_asm_set_pc (core->assembler, cur);
../core/canal.c:	spname = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);
../core/canal.c:	if (r_anal_op (core->anal, &op, cur, buf + idx, size - idx) <= 0 ||
../core/canal.c:	r_asm_set_pc (core->assembler, cur);
../core/canal.c:	bool cfg_anal_strings = r_config_get_i (core->config, "anal.strings");
../core/canal.c:	RAnalEsil *ESIL = core->anal->esil;
../core/canal.c:	ut64 addr = core->offset;
../core/canal.c:			refptr = ntarget = r_num_math (core->num, expr);
../core/canal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/canal.c:			end = addr + r_num_math (core->num, str + 1);
../core/canal.c:			RIOSection *sect = r_io_section_vget (core->io, addr);
../core/canal.c:				end = addr + core->blocksize;
../core/canal.c:	r_io_read_at (core->io, addr, buf, iend + 1);
../core/canal.c:		ESIL = core->anal->esil;
../core/canal.c:	pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/canal.c:	int opalign = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);
../core/canal.c:	int in = r_syscall_get_swi (core->anal->syscall);
../core/canal.c:	const char *sn = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);
../core/canal.c:	r_reg_arena_push (core->anal->reg);
../core/canal.c:		if (!r_anal_op (core->anal, &op, cur, buf + i, iend - i)) {
../core/canal.c:		r_asm_set_pc (core->assembler, cur);
../core/canal.c:				r_flag_space_set (core->flags, "syscalls");
../core/canal.c:				int snv = (int)r_reg_getv (core->anal->reg, sn);
../core/canal.c:					RSyscallItem *si = r_syscall_get (core->anal->syscall, snv, in);
../core/canal.c:						r_flag_set_next (core->flags, sdb_fmt (0, "syscall.%s", si->name), cur, 1);
../core/canal.c:						r_flag_set_next (core->flags, sdb_fmt (0, "syscall.%d", snv), cur, 1);
../core/canal.c:					r_flag_space_set (core->flags, NULL);
../core/canal.c:					if (core->anal->cur && strcmp (core->anal->cur->arch, "arm")) {
../core/canal.c:								r_anal_ref_add (core->anal, ESIL->cur, cur, 's');
../core/canal.c:				if (core->anal->bits == 64 && core->anal->cur && !strcmp (core->anal->cur->arch, "arm")) {
../core/canal.c:							r_anal_ref_add (core->anal, dst, cur, 'd');
../core/canal.c:				} else if ((core->anal->bits == 32 && core->anal->cur && !strcmp (core->anal->cur->arch, "mips"))) {
../core/canal.c:						if (dst > 0xffff && op.src[1] && (dst & 0xffff) == (op.src[1]->imm & 0xffff) && myvalid (mycore->io, dst)) {
../core/canal.c:								r_anal_ref_add (core->anal, dst, cur, 'd');
../core/canal.c:								if ((f = r_flag_get_i2 (core->flags, dst))) {
../core/canal.c:									r_meta_set_string (core->anal, R_META_TYPE_COMMENT, cur, f->name);
../core/canal.c:									r_meta_set_string (core->anal, R_META_TYPE_COMMENT, cur, str2);
../core/canal.c:						if (myvalid (mycore->io, dst)) {
../core/canal.c:							r_anal_ref_add (core->anal, dst, cur, 'd');
../core/canal.c:						if (myvalid (mycore->io, dst)) {
../core/canal.c:							r_anal_ref_add (core->anal, dst, cur, 'd');
../core/canal.c:						if (myvalid (core->io, dst)) {
../core/canal.c:							r_anal_ref_add (core->anal, dst, cur, 'c');
../core/canal.c:						if (myvalid (core->io, dst)) {
../core/canal.c:							r_anal_ref_add (core->anal, dst, cur, 'C');
../core/canal.c:					ut64 dst = core->anal->esil->jump_target;
../core/canal.c:						dst = r_reg_getv (core->anal->reg, pcname);
../core/canal.c:						if (myvalid (core->io, dst)) {
../core/canal.c:							r_anal_ref_add (core->anal, dst, cur, ref);
../core/canal.c:	r_reg_arena_pop (core->anal->reg);
../core/cbin.c:	if (r_bin_file_set_cur_by_fd (core->bin, bin_fd)) {
../core/cbin.c:	if (r_bin_file_set_cur_by_name (core->bin, name)) {
../core/cbin.c:	if (!core->bin) {
../core/cbin.c:				  ? r_bin_file_find_by_fd (core->bin, fd)
../core/cbin.c:	r_bin_file_set_cur_binfile (core->bin, binfile);
../core/cbin.c:	RBinFile *binfile = r_bin_cur (core->bin);
../core/cbin.c:	if (core->bin->strpurge) {
../core/cbin.c:	switch (core->bin->strfilter) {
../core/cbin.c:	if (!core || !core->anal) {
../core/cbin.c:	bits = core->assembler->bits;
../core/cbin.c:	types = core->anal->sdb_types;
../core/cbin.c:	anal_arch = r_config_get (core->config, "anal.arch");
../core/cbin.c:	os = r_config_get (core->config, "asm.os");
../core/cbin.c:		core->anal->sdb_cc
../core/cbin.c:	sdb_foreach (core->anal->sdb_cc, save_ptr, sdbs);
../core/cbin.c:	sdb_reset ( core->anal->sdb_cc);
../core/cbin.c:	const char *anal_arch = r_config_get (core->config, "anal.arch");
../core/cbin.c:	int bits = core->anal->bits;
../core/cbin.c:		sdb_concat_by_path (core->anal->sdb_cc, dbpath);
../core/cbin.c:	r_list_foreach (core->anal->fcns, it, fcn) {
../core/cbin.c:			fcn->cc = r_anal_cc_to_constant (core->anal, (char *)cc);
../core/cbin.c:			fcn->cc = r_anal_cc_default (core->anal);
../core/cbin.c:	if (!r_config_get_i (core->config, "bin.dbginfo")) {
../core/cbin.c:	} else if (core->bin) {
../core/cbin.c:		da = r_bin_dwarf_parse_abbrev (core->bin, mode);
../core/cbin.c:		r_bin_dwarf_parse_info (da, core->bin, mode);
../core/cbin.c:		r_bin_dwarf_parse_aranges (core->bin, mode);
../core/cbin.c:		list = r_bin_dwarf_parse_line (core->bin, mode);
../core/cbin.c:			bool chopPath = !r_config_get_i (core->config, "dir.dwarf.abspath");
../core/cbin.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, row->address, cmt);
../core/cbin.c:	ut64 baddr = r_bin_get_baddr (core->bin);
../core/cbin.c:	if (!init_pdb_parser (&pdb, core->bin->file)) {
../core/cbin.c:				int fmtsize = r_print_format_struct_size (v, core->print, 0, 0);
../core/cbin.c:	ut64 at = 0, loadaddr = r_bin_get_laddr (core->bin);
../core/cbin.c:	if (r_config_get_i (core->config, "anal.strings")) {
../core/cbin.c:	if (r_config_get_i (core->config, "bin.relocs")) {
../core/cbin.c:	RBin *bin = core->bin;
../core/cbin.c:		r_io_use_fd (core->io, binfile->fd);
../core/cbin.c:	core->switch_file_view = 0;
../core/cbin.c:	if (!r_bin_object_delete (core->bin, binfile_idx, binobj_idx)) {
../core/cbin.c:		r_io_use_fd (core->io, binfile->fd);
../core/cbin.c:	core->switch_file_view = 0;
../core/cbin.c:	(void)r_bin_get_info (core->bin); // XXX is this necssary for proper iniitialization
../core/cbin.c:				arch = r_config_get (core->config, "asm.arch");
../core/cbin.c:	RBin *bin = core->bin;
../core/cconfig.c:	if (core->io && core->io->desc && core->io->desc->plugin) {
../core/cconfig.c:		if (core->io->desc->plugin->name && !strcmp (core->io->desc->plugin->name, "gdb")) {
../core/cconfig.c:			core->anal->columnSort = (RListComparator)compareName;
../core/cconfig.c:			core->anal->columnSort = (RListComparator)compareNameLen;
../core/cconfig.c:			core->anal->columnSort = (RListComparator)compareAddress;
../core/cconfig.c:			core->anal->columnSort = (RListComparator)compareType;
../core/cconfig.c:			core->anal->columnSort = (RListComparator)compareSize;
../core/cconfig.c:			core->anal->columnSort = (RListComparator)compareDist;
../core/cconfig.c:	if (!core || !core->anal || !name) {
../core/cconfig.c:	RAnal *a = core->anal;
../core/cconfig.c:	RAsm *a = core->assembler;
../core/cconfig.c:	core->dbg->hitinfo = node->i_value;
../core/cconfig.c:	core->anal->opt.armthumb = node->i_value;
../core/cconfig.c:	core->anal->opt.eobjmp = node->i_value;
../core/cconfig.c:	core->anal->opt.afterjmp = node->i_value;
../core/cconfig.c:		r_config_set (core->config, "bin.strings", "false");
../core/cconfig.c:	core->anal->sleep = node->i_value;
../core/cconfig.c:	core->anal->maxreflines = node->i_value;
../core/cconfig.c:	core->anal->opt.nopskip = node->i_value;
../core/cconfig.c:	core->anal->opt.hpskip = node->i_value;
../core/cconfig.c:	core->anal->opt.bbsplit = node->i_value;
../core/cconfig.c:	core->anal->opt.noncode = !!node->i_value;
../core/cconfig.c:	if (core && core->anal && node) {
../core/cconfig.c:		r_list_foreach (core->anal->plugins, it, h) {
../core/cconfig.c:		if (r_anal_use (core->anal, node->value)) {
../core/cconfig.c:		const char *aa = r_config_get (core->config, "asm.arch");
../core/cconfig.c:	r_anal_set_cpu (core->anal, node->value);
../core/cconfig.c:	core->anal->split = node->i_value;
../core/cconfig.c:	core->anal->opt.recont = node->i_value;
../core/cconfig.c:	core->parser->minval = node->i_value;
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_RAINBOW;
../core/cconfig.c:		core->print->flags &= (~R_PRINT_FLAGS_RAINBOW);
../core/cconfig.c:	r_print_set_flags (core->print, core->print->flags);
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_SECSUB;
../core/cconfig.c:		core->print->flags &= (~R_PRINT_FLAGS_SECSUB);
../core/cconfig.c:	r_print_set_flags (core->print, core->print->flags);
../core/cconfig.c:	r_asm_use_assembler (core->assembler, node->value);
../core/cconfig.c:	if (!core || !core->assembler) {
../core/cconfig.c:	const char *arch = r_config_get (core->config, "asm.arch");
../core/cconfig.c:	r_list_foreach (core->assembler->plugins, iter, h) {
../core/cconfig.c:		rasm2_list (core, r_config_get (core->config, "asm.arch"), node->value[1]);
../core/cconfig.c:	r_asm_set_cpu (core->assembler, node->value);
../core/cconfig.c:	r_config_set (core->config, "anal.cpu", node->value);
../core/cconfig.c:	if (core && node && core->assembler) {
../core/cconfig.c:		r_list_foreach (core->assembler->plugins, iter, h) {
../core/cconfig.c:	if (!*node->value || !core || !core->assembler) {
../core/cconfig.c:	asmos = r_config_get (core->config, "asm.os");
../core/cconfig.c:	if (core && core->anal && core->anal->bits) {
../core/cconfig.c:		bits = core->anal->bits;
../core/cconfig.c:	r_egg_setup (core->egg, node->value, bits, 0, R_SYS_OS);
../core/cconfig.c:	if (!r_asm_use (core->assembler, node->value)) {
../core/cconfig.c:	char *asm_cpu = strdup (r_config_get (core->config, "asm.cpu"));
../core/cconfig.c:	if (core->assembler->cur) {
../core/cconfig.c:		const char *newAsmCPU = core->assembler->cur->cpus;
../core/cconfig.c:					r_config_set (core->config, "asm.cpu", nac);
../core/cconfig.c:				r_config_set (core->config, "asm.cpu", "");
../core/cconfig.c:		bits = core->assembler->cur->bits;
../core/cconfig.c:	r_config_set (core->config, "asm.parser", asmparser);
../core/cconfig.c:	if (core->assembler->cur && core->anal &&
../core/cconfig.c:	    !(core->assembler->cur->bits & core->anal->bits)) {
../core/cconfig.c:		r_config_set_i (core->config, "asm.bits", bits);
../core/cconfig.c:	//r_debug_set_arch (core->dbg, r_sys_arch_id (node->value), bits);
../core/cconfig.c:	r_debug_set_arch (core->dbg, node->value, bits);
../core/cconfig.c:	if (!r_config_set (core->config, "anal.arch", node->value)) {
../core/cconfig.c:			if (!r_config_set (core->config, "anal.arch", s)) {
../core/cconfig.c:				r_config_set (core->config, "anal.arch", "null");
../core/cconfig.c:		int v = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);
../core/cconfig.c:			r_config_set_i (core->config, "asm.pcalign", v);
../core/cconfig.c:			r_config_set_i (core->config, "asm.pcalign", 0);
../core/cconfig.c:	if (core->anal) {
../core/cconfig.c:		if (!r_syscall_setup (core->anal->syscall, node->value, asmos, core->anal->bits)) {
../core/cconfig.c:	//	r_config_set (core->config, "dbg.backend", "bf");
../core/cconfig.c:	__setsegoff (core->config, node->value, core->assembler->bits);
../core/cconfig.c:	int bigbin = r_bin_is_big_endian (core->bin);
../core/cconfig.c:		r_asm_set_big_endian (core->assembler, false);
../core/cconfig.c:		core->print->big_endian = false;
../core/cconfig.c:		r_asm_set_big_endian (core->assembler, bigbin);
../core/cconfig.c:		core->print->big_endian = bigbin;
../core/cconfig.c:	r_asm_set_cpu (core->assembler, asm_cpu);
../core/cconfig.c:	RConfigNode *asmcpu = r_config_node_get (core->config, "asm.cpu");
../core/cconfig.c:	if (!core->anal || !core->anal->sdb_types) {
../core/cconfig.c:	core->dbg->bpsize = node->i_value;
../core/cconfig.c:	core->dbg->btdepth = node->i_value;
../core/cconfig.c:		ret = r_asm_set_bits (core->assembler, bits);
../core/cconfig.c:			RAsmPlugin *h = core->assembler->cur;
../core/cconfig.c:		if (!r_anal_set_bits (core->anal, bits)) {
../core/cconfig.c:		core->print->bits = bits;
../core/cconfig.c:	if (core->dbg && core->anal && core->anal->cur) {
../core/cconfig.c:		r_debug_set_arch (core->dbg, core->anal->cur->arch, bits);
../core/cconfig.c:		if (r_config_get_i (core->config, "cfg.debug")) {
../core/cconfig.c:			(void)r_anal_set_reg_profile (core->anal);
../core/cconfig.c:			if (core->dbg->h && core->dbg->h->reg_profile) {
../core/cconfig.c:				core->dbg->bits = R_SYS_BITS_32;
../core/cconfig.c:				core->dbg->bits = R_SYS_BITS_64;
../core/cconfig.c:				char *rp = core->dbg->h->reg_profile (core->dbg);
../core/cconfig.c:				r_reg_set_profile_string (core->dbg->reg, rp);
../core/cconfig.c:				r_reg_set_profile_string (core->anal->reg, rp);
../core/cconfig.c:	asmos = r_config_get (core->config, "asm.os");
../core/cconfig.c:	asmarch = r_config_get (core->config, "asm.arch");
../core/cconfig.c:	if (core->anal) {
../core/cconfig.c:		if (!r_syscall_setup (core->anal->syscall, asmarch, asmos, bits)) {
../core/cconfig.c:		__setsegoff (core->config, asmarch, core->anal->bits);
../core/cconfig.c:		if (core->dbg) {
../core/cconfig.c:			r_bp_use (core->dbg->bp, asmarch, core->anal->bits);
../core/cconfig.c:		int v = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);
../core/cconfig.c:			r_config_set_i (core->config, "asm.pcalign", v);
../core/cconfig.c:			r_config_set_i (core->config, "asm.pcalign", 0);
../core/cconfig.c:	if (core && core->assembler && core->assembler->cur) {
../core/cconfig.c:		if (core->assembler->cur->features) {
../core/cconfig.c:			features = strdup (core->assembler->cur->features);
../core/cconfig.c:	free (core->assembler->features);
../core/cconfig.c:	core->assembler->features = NULL;
../core/cconfig.c:		core->assembler->features = strdup (node->value);
../core/cconfig.c:	core->anal->lineswidth = node->i_value;
../core/cconfig.c:		r_config_set (core->config, "asm.emu", "true");
../core/cconfig.c:	core->assembler->immdisp = node->i_value ? true : false;
../core/cconfig.c:	core->assembler->invhex = node->i_value;
../core/cconfig.c:	core->assembler->pcalign = align;
../core/cconfig.c:	core->anal->pcalign = align;
../core/cconfig.c:	int asmbits = r_config_get_i (core->config, "asm.bits");
../core/cconfig.c:	asmarch = r_config_node_get (core->config, "asm.arch");
../core/cconfig.c:		r_syscall_setup (core->anal->syscall, asmarch->value,
../core/cconfig.c:				node->value, core->anal->bits);
../core/cconfig.c:		__setsegoff (core->config, asmarch->value, asmbits);
../core/cconfig.c:	r_anal_set_os (core->anal, node->value);
../core/cconfig.c:	return r_parse_use (core->parser, node->value);
../core/cconfig.c:	core->bin->filter = node->i_value;
../core/cconfig.c:	core->bin->demanglercmd = node->i_value;
../core/cconfig.c:	core->bin->strpurge = node->i_value;
../core/cconfig.c:		core->bin->strfilter = node->value[0];
../core/cconfig.c:	r_bin_force_plugin (core->bin, node->value);
../core/cconfig.c:		r_asm_set_syntax (core->assembler, syntax);
../core/cconfig.c:	free (core->anal->zign_path);
../core/cconfig.c:	core->anal->zign_path = strdup (node->value);
../core/cconfig.c:	bool isbig = r_asm_set_big_endian (core->assembler, node->i_value);
../core/cconfig.c:	r_anal_set_big_endian (core->anal, isbig);
../core/cconfig.c:	core->dbg->bp->endian = isbig;
../core/cconfig.c:	core->print->big_endian = node->i_value;
../core/cconfig.c:	snprintf (core->print->datefmt, 32, "%s", node->value);
../core/cconfig.c:	core->print->datezone = node->i_value;
../core/cconfig.c:	core->cfglog = node->i_value;
../core/cconfig.c:	if (core->io) {
../core/cconfig.c:		core->io->debug = node->i_value;
../core/cconfig.c:	if (core->dbg && node->i_value) {
../core/cconfig.c:		const char *dbgbackend = r_config_get (core->config, "dbg.backend");
../core/cconfig.c:		core->bin->is_debugger = true;
../core/cconfig.c:		r_debug_use (core->dbg, dbgbackend);
../core/cconfig.c:		if (!strcmp (r_config_get (core->config, "cmd.prompt"), "")) {
../core/cconfig.c:			r_config_set (core->config, "cmd.prompt", ".dr*");
../core/cconfig.c:			r_config_set (core->config, "asm.arch", "bf");
../core/cconfig.c:		if (core->file) {
../core/cconfig.c:			r_debug_select (core->dbg, r_io_fd_get_pid (core->io, core->file->fd),
../core/cconfig.c:					r_io_fd_get_tid (core->io, core->file->fd));
../core/cconfig.c:		if (core->dbg) {
../core/cconfig.c:			r_debug_use (core->dbg, NULL);
../core/cconfig.c:		core->bin->is_debugger = false;
../core/cconfig.c:	free (core->bin->srcdir);
../core/cconfig.c:	core->bin->srcdir = strdup (node->value);
../core/cconfig.c:	R_FREE (core->cmdlog);
../core/cconfig.c:	core->cmdlog = strdup (node->value);
../core/cconfig.c:	core->cmdrepeat = node->i_value;
../core/cconfig.c:	core->cons->null = node->i_value;
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_COLOR;
../core/cconfig.c:		//c:core->print->flags ^= R_PRINT_FLAGS_COLOR;
../core/cconfig.c:		core->print->flags &= (~R_PRINT_FLAGS_COLOR);
../core/cconfig.c:	r_print_set_flags (core->print, core->print->flags);
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_ADDRDEC;
../core/cconfig.c:		core->print->flags &= (~R_PRINT_FLAGS_ADDRDEC);
../core/cconfig.c:	r_print_set_flags (core->print, core->print->flags);
../core/cconfig.c:	free (core->dbg->btalgo);
../core/cconfig.c:	core->dbg->btalgo = strdup (node->value);
../core/cconfig.c:	free (core->dbg->glob_libs);
../core/cconfig.c:	core->dbg->glob_libs = strdup (node->value);
../core/cconfig.c:	free (core->dbg->glob_unlibs);
../core/cconfig.c:	core->dbg->glob_unlibs = strdup (node->value);
../core/cconfig.c:	core->dbg->trace_forks = node->i_value;
../core/cconfig.c:	if (core->io->debug) {
../core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../core/cconfig.c:		free (r_io_system (core->io, cmd));
../core/cconfig.c:		free (r_io_system (core->io, cmd));
../core/cconfig.c:	core->dbg->trace_execs = node->i_value;
../core/cconfig.c:	if (core->io->debug) {
../core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../core/cconfig.c:	core->dbg->trace_clone = node->i_value;
../core/cconfig.c:	if (core->io->debug) {
../core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../core/cconfig.c:	core->dbg->follow_child = node->i_value;
../core/cconfig.c:	core->dbg->trace_aftersyscall = node->i_value;
../core/cconfig.c:	if (core->io->debug) {
../core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../core/cconfig.c:		core->io->args = NULL;
../core/cconfig.c:		core->io->args = strdup (node->value);
../core/cconfig.c:		r_debug_plugin_list (core->dbg, 'q');
../core/cconfig.c:		r_config_set (core->config, "asm.arch", "bf");
../core/cconfig.c:	r_debug_use (core->dbg, node->value);
../core/cconfig.c:	if (core->anal->esil) {
../core/cconfig.c:		core->anal->esil_goto_limit = node->i_value;
../core/cconfig.c:	if (core->anal->esil) {
../core/cconfig.c:		core->anal->esil->verbose = node->i_value;
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_COMPACT;
../core/cconfig.c:		core->print->flags &= (~R_PRINT_FLAGS_COMPACT);
../core/cconfig.c:	core->print->pairs = node->i_value;
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_COMMENT;
../core/cconfig.c:		core->print->flags &= ~R_PRINT_FLAGS_COMMENT;
../core/cconfig.c:			r_config_set_i (core->config, "io.pcache.read", true);
../core/cconfig.c:			r_config_set_i (core->config, "io.pcache.write", true);
../core/cconfig.c:		if (core && core->io) {
../core/cconfig.c:			r_io_desc_cache_fini_all (core->io);
../core/cconfig.c:			r_config_set_i (core->config, "io.pcache.read", false);
../core/cconfig.c:			r_config_set_i (core->config, "io.pcache.write", false);
../core/cconfig.c:		if (core && core->io) {
../core/cconfig.c:			core->io->p_cache |= 1;
../core/cconfig.c:		if (core && core->io && core->io->p_cache) {
../core/cconfig.c:			core->io->p_cache &= 2;
../core/cconfig.c:			if (!(core->io->p_cache & 2)) {
../core/cconfig.c:				r_io_desc_cache_fini_all (core->io);
../core/cconfig.c:				r_config_set_i (core->config, "io.pcache", false);
../core/cconfig.c:		if (core && core->io) {
../core/cconfig.c:			core->io->p_cache |= 2;
../core/cconfig.c:		if (core && core->io && core->io->p_cache) {
../core/cconfig.c:			core->io->p_cache &= 1;
../core/cconfig.c:			if (!(core->io->p_cache & 1)) {
../core/cconfig.c:				r_io_desc_cache_fini_all (core->io);
../core/cconfig.c:				r_config_set_i (core->config, "io.pcache", false);
../core/cconfig.c:	if (core && core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->cmd = r_core_esil_cmd;
../core/cconfig.c:		free (core->anal->esil->cmd_ioer);
../core/cconfig.c:		core->anal->esil->cmd_ioer = strdup (node->value);
../core/cconfig.c:	if (core && core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->cmd = r_core_esil_cmd;
../core/cconfig.c:		free (core->anal->esil->cmd_todo);
../core/cconfig.c:		core->anal->esil->cmd_todo = strdup (node->value);
../core/cconfig.c:	if (core && core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->cmd = r_core_esil_cmd;
../core/cconfig.c:		free (core->anal->esil->cmd_intr);
../core/cconfig.c:		core->anal->esil->cmd_intr = strdup (node->value);
../core/cconfig.c:	if (core && core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->cmd = r_core_esil_cmd;
../core/cconfig.c:		free (core->anal->esil->mdev_range);
../core/cconfig.c:		core->anal->esil->mdev_range = strdup (node->value);
../core/cconfig.c:	if (core && core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->cmd = r_core_esil_cmd;
../core/cconfig.c:		free (core->anal->esil->cmd_mdev);
../core/cconfig.c:		core->anal->esil->cmd_mdev = strdup (node->value);
../core/cconfig.c:	if (core && core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->cmd = r_core_esil_cmd;
../core/cconfig.c:		core->anal->esil->cmd_trap = strdup (node->value);
../core/cconfig.c:	r_fs_view (core->fs, type);
../core/cconfig.c:	core->print->cols = c & ~1;
../core/cconfig.c:	core->dbg->regcols = c/4;
../core/cconfig.c:	core->search->n_kws = node->i_value;
../core/cconfig.c:		from = r_config_get_i (core->config, "io.buffer.from");
../core/cconfig.c:		to = r_config_get_i (core->config, "io.buffer.to");
../core/cconfig.c:			r_io_buffer_load (core->io, from, (int)(to-from));
../core/cconfig.c:		r_io_buffer_close (core->io);
../core/cconfig.c:		core->io->cached |= R_IO_READ;
../core/cconfig.c:		core->io->cached &= ~R_IO_READ;
../core/cconfig.c:		core->io->cached |= R_IO_WRITE;
../core/cconfig.c:		core->io->cached &= ~R_IO_WRITE;
../core/cconfig.c:	if (node->i_value != core->io->aslr) {
../core/cconfig.c:		core->io->aslr = node->i_value;
../core/cconfig.c:	if (node->i_value != core->io->va) {
../core/cconfig.c:		core->io->va = node->i_value;
../core/cconfig.c:		if (core->io->desc) {
../core/cconfig.c:		if (r_list_length (r_bin_get_sections (core->bin)) > 0) {
../core/cconfig.c:	core->io->ff = node->i_value;
../core/cconfig.c:	core->io->Oxff = node->i_value;
../core/cconfig.c:			r_config_set (core->config, "file.lastpath", node->value);
../core/cconfig.c:	r_config_set (core->config, "file.lastpath", node->value);
../core/cconfig.c:	core->io->autofd = node->i_value;
../core/cconfig.c:	core->cons->pager = node->value;
../core/cconfig.c:			(r_config_get_i (core->config, "scr.truecolor"))?2:1;
../core/cconfig.c:	core->cons->force_columns = n;
../core/cconfig.c:	core->dbg->regcols = n / 20;
../core/cconfig.c:	core->cons->user_fgets = node->i_value
../core/cconfig.c:	if (core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->exectrap = node->i_value;
../core/cconfig.c:	if (core->anal && core->anal->esil) {
../core/cconfig.c:		core->anal->esil->iotrap = node->i_value;
../core/cconfig.c:	core->search->contiguous = node->i_value;
../core/cconfig.c:	core->search->align = node->i_value;
../core/cconfig.c:	core->print->addrmod = node->i_value;
../core/cconfig.c:		core->print->flags |= R_PRINT_FLAGS_SEGOFF;
../core/cconfig.c:		core->print->flags &= (((ut32)-1) & (~R_PRINT_FLAGS_SEGOFF));
../core/cconfig.c:	core->dbg->stop_all_threads = node->i_value;
../core/cconfig.c:	core->dbg->swstep = node->i_value;
../core/cconfig.c:	core->dbg->consbreak = node->i_value;
../core/cconfig.c:	core->dbg->trace->enabled = node->i_value;
../core/cconfig.c:	core->dbg->trace->tag = node->i_value;
../core/cconfig.c:	core->cons->use_utf8 = node->i_value;
../core/cconfig.c:	core->cons->use_utf8_curvy = node->i_value;
../core/cconfig.c:			core->print->zoom->mode = *node->value;
../core/cconfig.c:	core->bin->verbose = node->i_value;
../core/cconfig.c:	core->bin->rawstr = node->i_value;
../core/cconfig.c:	core->bin->debase64 = node->i_value;
../core/cconfig.c:		core->bin->filter_rules |= req;
../core/cconfig.c:		core->bin->filter_rules &= ~req;
../core/cconfig.c:	if (!core || !core->bin) {
../core/cconfig.c:	core->bin->want_dbginfo = node->i_value;
../core/cconfig.c:	if (!core || !core->bin) {
../core/cconfig.c:			if (!core->bin->file) {
../core/cconfig.c:			char *name = (char *)r_file_basename (core->bin->file);
../core/cconfig.c:				core->bin->prefix = strdup (name);
../core/cconfig.c:			core->bin->prefix = node->value;
../core/cconfig.c:	if (core->bin) {
../core/cconfig.c:		ut64 old_v = core->bin->maxstrbuf;
../core/cconfig.c:		core->bin->maxstrbuf = v;
../core/cconfig.c:	if (core->bin) {
../core/cconfig.c:		core->bin->maxstrlen = v;
../core/cconfig.c:	if (core->bin) {
../core/cconfig.c:		core->bin->minstrlen = v;
../core/cconfig.c:	node->i_value = core->dbg->swstep;
../core/cconfig.c:	core->anal->gp = node->i_value;
../core/cconfig.c:	if (r_config_get_i (core->config, "anal.limits")) {
../core/cconfig.c:		r_anal_set_limits (core->anal,
../core/cconfig.c:				r_config_get_i (core->config, "anal.from"),
../core/cconfig.c:				r_config_get_i (core->config, "anal.to"));
../core/cconfig.c:		r_anal_set_limits (core->anal,
../core/cconfig.c:				r_config_get_i (core->config, "anal.from"),
../core/cconfig.c:				r_config_get_i (core->config, "anal.to"));
../core/cconfig.c:		r_anal_unset_limits (core->anal);
../core/cconfig.c:	core->anal->opt.jmptbl = node->i_value;
../core/cconfig.c:	core->anal->opt.cjmpref = node->i_value;
../core/cconfig.c:	core->anal->opt.jmpref = node->i_value;
../core/cconfig.c:	core->anal->opt.jmpabove = node->i_value;
../core/cconfig.c:	core->anal->opt.followdatarefs = node->i_value;
../core/cconfig.c:	core->anal->opt.searchstringrefs = node->i_value;
../core/cconfig.c:	core->anal->opt.pushret = node->i_value;
../core/cconfig.c:	core->anal->opt.followbrokenfcnsrefs = node->i_value;
../core/cconfig.c:	core->anal->opt.bbs_alignment = node->i_value;
../core/cconfig.c:	core->anal->opt.bb_max_size = node->i_value;
../core/cconfig.c:	ut64 from = (ut64)r_config_get_i (core->config, "lines.from");
../core/cconfig.c:	int io_sz = r_io_size (core->io);
../core/cconfig.c:	ut64 to = r_num_math (core->num, node->value);
../core/cconfig.c:		core->print->lines_cache_sz = -1; //r_core_lines_initcache (core, from, to);
../core/cconfig.c:		core->print->lines_cache_sz = r_core_lines_initcache (core, from, to);
../core/cconfig.c:		//if (core->print->lines_cache_sz == -1) { eprintf ("ERROR: Can't allocate memory\n"); }
../core/cconfig.c:	core->print->lines_abs = node->i_value;
../core/cconfig.c:	if (core->print->lines_abs && core->print->lines_cache_sz <= 0) {
../core/cconfig.c:		ut64 from = (ut64)r_config_get_i (core->config, "lines.from");
../core/cconfig.c:		ut64 to = (ut64)r_config_get_i (core->config, "lines.to");
../core/cconfig.c:		core->print->lines_cache_sz = r_core_lines_initcache (core, from, to);
../core/cconfig.c:		if (core->print->lines_cache_sz == -1) {
../core/cconfig.c:			eprintf ("Found %d lines\n", core->print->lines_cache_sz-1);
../core/cconfig.c: 			core->dbg->malloc = data;
../core/cconfig.c:		r_debug_session_path (core->dbg, node->value);
../core/cconfig.c:	RConfig *cfg = core->config = r_config_new (core);
../core/cconfig.c:	cfg->num = core->num;
../core/cconfig.c:	SETICB ("esil.gotolimit", core->anal->esil_goto_limit, &cb_gotolimit, "Maximum number of gotos per ESIL expression");
../core/cconfig.c:	if (core->cons->rows > 30) { // HACKY
../core/cconfig.c:	r_config_desc (cfg, "dbg.follow", "Follow program counter when pc > core->offset + dbg.follow");
../core/cconfig.c:	SETCB ("scr.color", (core->print->flags&R_PRINT_FLAGS_COLOR)?"true":"false", &cb_color, "Enable colors");
Binary file ../core/cconfig.o matches
../core/cio.c:	ut64 addr = r_num_tail (core->num, core->offset, hex);
../core/cio.c:	int bs = core->blocksize;
../core/cio.c:		r_io_read_at (core->io, addr + i, buf, bs);
../core/cio.c:	buf = (ut8 *)malloc (core->blocksize);
../core/cio.c:	memcpy (buf, core->block, core->blocksize);
../core/cio.c:			len = core->yank_buf->length;
../core/cio.c:			str = r_mem_dup (core->yank_buf->buf, len);
../core/cio.c:			from = r_num_math (core->num, s);
../core/cio.c:			to = r_num_math (core->num, s);
../core/cio.c:			step = r_num_math (core->num, s);
../core/cio.c:			wordsize = r_num_math (core->num, s);
../core/cio.c:			step = r_num_math (core->num, s);
../core/cio.c:			for (i = n = 0; i < core->blocksize; i++, n += step) {
../core/cio.c:			for (i = 0; i < core->blocksize; i += wordsize, num16 += step) {
../core/cio.c:			for (i = 0; i < core->blocksize; i += wordsize, num32 += step) {
../core/cio.c:			for (i = 0; i < core->blocksize; i += wordsize, num64 += step) {
../core/cio.c:		// if i < core->blocksize would pass the test but buf[i+3] goes beyond the buffer
../core/cio.c:		if (core->blocksize > 3) {
../core/cio.c:			for (i=0; i<core->blocksize-3; i+=op) {
../core/cio.c:		for (i=j=0; i<core->blocksize; i++) {
../core/cio.c:	ret = r_core_write_at (core, core->offset, buf, core->blocksize);
../core/cio.c:	r_list_foreach (core->anal->bits_ranges, iter, range) {
../core/cio.c:	const char *arch = r_io_section_get_archbits (core->io, addr, &bits);
../core/cio.c:		r_config_set_i (core->config, "asm.bits", bits);
../core/cio.c:		r_config_set (core->config, "asm.arch", arch);
../core/cio.c:	core->offset = r_io_seek (core->io, addr, R_IO_SEEK_SET);
../core/cio.c:	return core->offset == addr;
../core/cio.c:	ut64 tmp = core->offset;
../core/cio.c:	core->offset = addr;
../core/cio.c:	//	memset (core->block, 0xff, core->blocksize);
../core/cio.c:	//	core->offset = tmp;
../core/cio.c:	ret = r_io_write_at (core->io, addr, buf, size);
../core/cio.c:	if (addr >= core->offset && addr <= core->offset + core->blocksize) {
../core/cio.c:	if (!core->io || !core->file || size < 1) {
../core/cio.c:	ret = r_io_use_fd (core->io, core->file->fd);
../core/cio.c:		ret = r_io_extend_at (core->io, addr, size);
../core/cio.c:		if (addr >= core->offset && addr <= core->offset+core->blocksize) {
../core/cio.c:	if (!core->io || !core->file) {
../core/cio.c:		res = r_io_use_fd (core->io, core->file->fd);
../core/cio.c:		file_sz = r_io_size (core->io);
../core/cio.c:		bstart = r_io_seek (core->io, addr, R_IO_SEEK_SET);
../core/cio.c:		fend = r_io_seek (core->io, 0, R_IO_SEEK_END);
../core/cio.c:		r_io_use_fd (core->io, core->file->fd);
../core/cio.c:		r_io_read_at (core->io, addr, shift_buf, b_size);
../core/cio.c:		r_io_write_at (core->io, addr + dist, shift_buf, b_size);
../core/cio.c:	if (core && core->block) {
../core/cio.c:		return r_io_read_at (core->io, core->offset, core->block, core->blocksize);
../core/cio.c:		return r_io_read_at (core->io, addr, buf, size);
../core/cio.c:	return r_io_is_valid_offset (core->io, offset, 0);
../core/cmd.c:			r_list_append (core->cmd_descriptors, d); \
../core/cmd.c:			r_list_append (core->cmd_descriptors, d); \
../core/cmd.c:			r_list_append (core->cmd_descriptors, d); \
../core/cmd.c:			r_list_append (core->cmd_descriptors, d); \
../core/cmd.c:	RCmdDescriptor *desc = &core->root_cmd_descriptor;
../core/cmd.c:	if (core->cons->breaked) {
../core/cmd.c:		core->cons->breaked = false;
../core/cmd.c:	if (!core->cmdrepeat) {
../core/cmd.c:	r_asm_set_pc (core->assembler, addr);
../core/cmd.c:	if (r_asm_disassemble (core->assembler, op, b->buf + delta, b->length) < 1) {
../core/cmd.c:			if (*def) r_cmd_alias_set (core->rcmd, buf, def, 0);
../core/cmd.c:			else r_cmd_alias_del (core->rcmd, buf);
../core/cmd.c:		char *v = r_cmd_alias_get (core->rcmd, buf, 0);
../core/cmd.c:		char **keys = r_cmd_alias_keys (core->rcmd, &count);
../core/cmd.c:			const char *v = r_cmd_alias_get (core->rcmd, keys[i], 0);
../core/cmd.c:		char **keys = r_cmd_alias_keys (core->rcmd, &count);
../core/cmd.c:		char *v = r_cmd_alias_get (core->rcmd, buf, 0);
../core/cmd.c:			r_cmd_alias_del (core->rcmd, str + 2);
../core/cmd.c:			r_cmd_alias_del (core->rcmd, NULL);
../core/cmd.c:		//	r_cmd_alias_reset (core->rcmd);
../core/cmd.c:		r_cmd_alias_set (core->rcmd, str, "", 1);
../core/cmd.c:			// swap core->cmdremote = core->cmdremote? 0: 1;
../core/cmd.c:			core->cmdremote = input[2]? 1: 0;
../core/cmd.c:			r_cons_println (r_str_bool (core->cmdremote));
../core/cmd.c:			char *res = r_io_system (core->io, input + 1);
../core/cmd.c:	char *res = r_io_system (core->io, input);
../core/cmd.c:		r_core_yank (core, core->offset, r_num_math (core->num, input + 1));
../core/cmd.c:		core->num->value = core->yank_buf->length;
../core/cmd.c:		n = input[1]? r_num_math (core->num, input + 1): core->offset;
../core/cmd.c:		r_core_yank_hexdump (core, r_num_math (core->num, input + 1));
../core/cmd.c:		r_core_yank_string (core, core->offset, r_num_math (core->num, input + 1));
../core/cmd.c:		r_core_yank_cat (core, r_num_math (core->num, input + 1));
../core/cmd.c:		r_core_yank_cat_string (core, r_num_math (core->num, input + 1));
../core/cmd.c:			if (!r_file_dump (file, core->yank_buf->buf, core->yank_buf->length, false)) {
../core/cmd.c:		r_core_yank_dump (core, r_num_math (core->num, ""));
../core/cmd.c:	r_list_foreach (core->scriptstack, iter, name) {
../core/cmd.c:	r_list_push (core->scriptstack, strdup (file));
../core/cmd.c:		char *out = r_parse_c_file (core->anal, file);
../core/cmd.c:			sdb_query_lines (core->anal->sdb_types, out);
../core/cmd.c:		p = r_lang_get_by_extension (core->lang, file);
../core/cmd.c:			r_lang_use (core->lang, p->name);
../core/cmd.c:			ret = r_lang_run_file (core->lang, file);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "vala");
../core/cmd.c:					r_lang_run_file (core->lang, file);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:					r_lang_use (core->lang, "pipe");
../core/cmd.c:					r_lang_run_file (core->lang, cmd);
../core/cmd.c:	free (r_list_pop (core->scriptstack));
../core/cmd.c:		if (r_fs_check (core->fs, path)) {
../core/cmd.c:			core->num->value = 1;
../core/cmd.c:			core->num->value = 0;
../core/cmd.c:		r_cmd_macro_call (&core->rcmd->macro, input + 1);
../core/cmd.c:	Sdb *s = core->sdb;
../core/cmd.c:		if (core->http_up) {
../core/cmd.c:		if (!r_config_get_i (core->config, "scr.interactive")) {
../core/cmd.c:		if (!s) s = core->sdb;
../core/cmd.c:					db = sdb_ns_path (core->sdb, ns, 1);
../core/cmd.c:				Sdb *db = sdb_ns_path (core->sdb, ns, 0);
../core/cmd.c:		s = sdb_ns (core->sdb, inp + 1, 1);
../core/cmd.c:		n = r_num_math (core->num, input + 1);
../core/cmd.c:		if (n > 1) core->blocksize_max = n;
../core/cmd.c:		else r_cons_printf ("0x%x\n", (ut32)core->blocksize_max);
../core/cmd.c:		n = r_num_math (core->num, input + 1);
../core/cmd.c:		r_core_block_size (core, core->blocksize + n);
../core/cmd.c:		n = r_num_math (core->num, input + 1);
../core/cmd.c:		r_core_block_size (core, core->blocksize - n);
../core/cmd.c:			flag = r_flag_get (core->flags, input + 2);
../core/cmd.c:		r_cons_printf ("0x%x\n", core->blocksize);
../core/cmd.c:		r_core_block_size (core, r_num_math (core->num, input));
../core/cmd.c:	if (core->file)
../core/cmd.c:		oldsize = r_io_fd_size (core->io, core->file->fd);
../core/cmd.c:		if (core->file) {
../core/cmd.c:		if (core->file) {
../core/cmd.c:		delta = (st64)r_num_math (core->num, input);
../core/cmd.c:		newsize = r_num_math (core->num, input + 1);
../core/cmd.c:		ret = r_io_resize (core->io, newsize);
../core/cmd.c:	if (delta && core->offset < newsize)
../core/cmd.c:		r_io_shift (core->io, core->offset, grow?newsize:oldsize, delta);
../core/cmd.c:		ret = r_io_resize (core->io, newsize);
../core/cmd.c:	if (newsize < core->offset+core->blocksize ||
../core/cmd.c:			oldsize < core->offset + core->blocksize) {
../core/cmd.c:	if (core->http_up) {
../core/cmd.c:	if (!r_config_get_i (core->config, "scr.interactive")) {
../core/cmd.c:			int tid = r_num_math (core->num, input + 1);
../core/cmd.c:		int tid = r_num_math (core->num, input + 1);
../core/cmd.c:			r_core_task_del (core, r_num_math (core->num, input + 1));
../core/cmd.c:			int tid = r_num_math (core->num, input + 1);
../core/cmd.c:				core->cmdremote = input[1]? 1: 0;
../core/cmd.c:				r_cons_println (r_str_bool (core->cmdremote));
../core/cmd.c:	si = r_config_get_i (core->config, "scr.interactive");
../core/cmd.c:	r_config_set_i (core->config, "scr.interactive", 0);
../core/cmd.c:	if (!r_config_get_i (core->config, "scr.pipecolor")) {
../core/cmd.c:		pipecolor = r_config_get_i (core->config, "scr.color");
../core/cmd.c:		r_config_set_i (core->config, "scr.color", 0);
../core/cmd.c:		r_config_set_i (core->config, "scr.color", pipecolor);
../core/cmd.c:	r_config_set_i (core->config, "scr.interactive", si);
../core/cmd.c:			const char *ov = r_config_get (core->config, kv);
../core/cmd.c:			r_config_set (core->config, kv, eq + 1);
../core/cmd.c:		if (r_config_get_i (core->config, "cmd.repeat")) {
../core/cmd.c:			if (r_config_get_i (core->config, "scr.interactive")) {
../core/cmd.c:	// TODO: store in core->cmdtimes to speedup ?
../core/cmd.c:	cmdrep = r_config_get (core->config, "cmd.times");
../core/cmd.c:	int ocur_enabled = core->print->cur_enabled;
../core/cmd.c:		core->print->cur_enabled = false;
../core/cmd.c:		if (ocur_enabled && core->seltab >= 0) {
../core/cmd.c:			if (core->seltab == core->curtab) {
../core/cmd.c:				core->print->cur_enabled = true;
../core/cmd.c:		core->break_loop = false;
../core/cmd.c:		if (core->break_loop) {
../core/cmd.c:	core->print->cur_enabled = ocur_enabled;
../core/cmd.c:			return r_cmd_call (core->rcmd, cmd);
../core/cmd.c:					oseek = core->offset;
../core/cmd.c:					r_core_seek (core, r_num_math (core->num, p + 2), 1);
../core/cmd.c:				r_cmd_call (core->rcmd, line);
../core/cmd.c:			return r_cmd_call (core->rcmd, cmd);
../core/cmd.c:					scr_html = r_config_get_i (core->config, "scr.html");
../core/cmd.c:					r_config_set_i (core->config, "scr.html", true);
../core/cmd.c:					scr_color = r_config_get_i (core->config, "scr.color");
../core/cmd.c:					r_config_set_i (core->config, "scr.color", false);
../core/cmd.c:					core->cons->use_tts = true;
../core/cmd.c:					int value = core->num->value;
../core/cmd.c:						char *res = r_io_system (core->io, ptr + 1);
../core/cmd.c:					core->num->value = value;
../core/cmd.c:					scr_html = r_config_get_i (core->config, "scr.html");
../core/cmd.c:					r_config_set_i (core->config, "scr.html", 0);
../core/cmd.c:					scr_color = r_config_get_i (core->config, "scr.color");
../core/cmd.c:					r_config_set_i (core->config, "scr.color", false);
../core/cmd.c:		ret = r_cmd_call (core->rcmd, cmd);
../core/cmd.c:				r_config_set_i (core->config, "scr.html", scr_html);
../core/cmd.c:				r_config_set_i (core->config, "scr.color", scr_color);
../core/cmd.c:	free (core->oobi);
../core/cmd.c:	core->oobi = NULL;
../core/cmd.c:				r_config_set_i (core->config, "scr.html", scr_html);
../core/cmd.c:				r_config_set_i (core->config, "scr.color", scr_color);
../core/cmd.c:				free (core->oobi);
../core/cmd.c:				core->oobi = malloc (1);
../core/cmd.c:				if (core->oobi) {
../core/cmd.c:					core->oobi[0] = '\0';
../core/cmd.c:				core->oobi_len = 0;
../core/cmd.c:					core->oobi_len += ret;
../core/cmd.c:					core->oobi = realloc (core->oobi, core->oobi_len + 1);
../core/cmd.c:					if (core->oobi) {
../core/cmd.c:						strcat ((char *)core->oobi, buf);
../core/cmd.c:				free (core->oobi);
../core/cmd.c:				core->oobi = (ut8*)r_file_slurp (str, &core->oobi_len);
../core/cmd.c:				if (!core->oobi) {
../core/cmd.c:					return r_core_cmd_buffer (core, (const char *)core->oobi);
../core/cmd.c:		int pipecolor = r_config_get_i (core->config, "scr.pipecolor");
../core/cmd.c:		int ocolor = r_config_get_i (core->config, "scr.color");
../core/cmd.c:				scr_html = r_config_get_i (core->config, "scr.html");
../core/cmd.c:				r_config_set_i (core->config, "scr.html", true);
../core/cmd.c:			r_config_set (core->config, "scr.color", "false");
../core/cmd.c:					r_config_set_i (core->config, "scr.color", 0);
../core/cmd.c:			r_config_set_i (core->config, "scr.color", ocolor);
../core/cmd.c:			const char *editor = r_config_get (core->config, "cfg.editor");
../core/cmd.c:			r_config_set_i (core->config, "scr.color", ocolor);
../core/cmd.c:			r_config_set_i (core->config, "scr.html", scr_html);
../core/cmd.c:			r_config_set_i (core->config, "scr.color", scr_color);
../core/cmd.c:		core->cons->use_tts = false;
../core/cmd.c:			int value = core->num->value;
../core/cmd.c:			core->num->value = value;
../core/cmd.c:				r_config_set_i (core->config, "scr.html", scr_html);
../core/cmd.c:	core->fixedblock = false;
../core/cmd.c:	core->tmpseek = ptr? true: false;
../core/cmd.c:		ut64 addr = core->offset;
../core/cmd.c:		ut64 tmpbsz = core->blocksize;
../core/cmd.c:		ut64 tmpoff = core->offset;
../core/cmd.c:				flgspc = r_flag_space_get (core->flags, ptr + 2);
../core/cmd.c:				r_flag_space_set (core->flags, ptr + 2);
../core/cmd.c:						free (core->block);
../core/cmd.c:						core->block = buf;
../core/cmd.c:						core->blocksize = sz;
../core/cmd.c:						memcpy (core->block, f, sz);
../core/cmd.c:						regval = r_debug_reg_get (core->dbg, mander);
../core/cmd.c:						regval = r_num_math (core->num, numexpr);
../core/cmd.c:						regval = r_debug_reg_get (core->dbg, ptr + 2);
../core/cmd.c:				tmpbits = strdup (r_config_get (core->config, "asm.bits"));
../core/cmd.c:				r_config_set_i (core->config, "asm.bits",
../core/cmd.c:					r_num_math (core->num, ptr + 2));
../core/cmd.c:					ut64 addr = r_num_math (core->num, ptr + 2);
../core/cmd.c:						memcpy (core->block, buf, core->blocksize);
../core/cmd.c:						core->fixedblock = true;
../core/cmd.c:					char *out = sdb_querys (core->sdb, NULL, 0, ptr + ((ptr[1])? 2: 1));
../core/cmd.c:						r_core_seek (core, r_num_math (core->num, out), 1);
../core/cmd.c:					tmpfd = core->io->desc ? core->io->desc->fd : -1;
../core/cmd.c:					r_io_use_fd (core->io, atoi (ptr + 2));
../core/cmd.c:					tmpasm = strdup (r_config_get (core->config, "asm.arch"));
../core/cmd.c:						tmpbits = strdup (r_config_get (core->config, "asm.bits"));
../core/cmd.c:						r_config_set (core->config, "asm.bits", q);
../core/cmd.c:					r_config_set (core->config, "asm.arch", ptr + 2);
../core/cmd.c:				memcpy (core->block, ptr + 2, len);
../core/cmd.c:					core, r_num_math (core->num, ptr2 + 1));
../core/cmd.c:		addr = r_num_math (core->num, offstr);
../core/cmd.c:			if (!r_flag_get (core->flags, ptr + 1)) {
../core/cmd.c:				addr = core->offset + addr;
../core/cmd.c:				ut64 from = r_num_math (core->num, range);
../core/cmd.c:				ut64 to = r_num_math (core->num, p + 1);
../core/cmd.c:					curfrom[i] = r_config_get_i (core->config, fromvars[i]);
../core/cmd.c:					curto[i] = r_config_get_i (core->config, tovars[i]);
../core/cmd.c:					r_config_set_i (core->config, fromvars[i], from);
../core/cmd.c:					r_config_set_i (core->config, tovars[i], to);
../core/cmd.c:					core->offset = addr;
../core/cmd.c:				ret = r_cmd_call (core->rcmd, r_str_trim_head (cmd));
../core/cmd.c:					ret = r_cmd_call (core->rcmd, r_str_trim_head (cmd));
../core/cmd.c:					r_config_set_i (core->config, fromvars[i], curfrom[i]);
../core/cmd.c:					r_config_set_i (core->config, tovars[i], curto[i]);
../core/cmd.c:			r_config_set (core->config, "asm.arch", tmpasm);
../core/cmd.c:			r_io_use_fd (core->io, tmpfd);
../core/cmd.c:			r_config_set (core->config, "asm.bits", tmpbits);
../core/cmd.c:			r_flag_space_set_i (core->flags, flgspc);
../core/cmd.c:	rc = cmd? r_cmd_call (core->rcmd, r_str_trim_head (cmd)): false;
../core/cmd.c:		r_config_set_i (core->config, "scr.html", scr_html);
../core/cmd.c:		r_config_set_i (core->config, "scr.color", scr_color);
../core/cmd.c:	core->fixedblock = false;
../core/cmd.c:	RDebug *dbg = core->dbg;
../core/cmd.c:			r_meta_list_cb (core->anal, R_META_TYPE_COMMENT, 0, foreach_comment, (void*)cmd, UT64_MAX);
../core/cmd.c:			ut64 offorig = core->offset;
../core/cmd.c:					if (item->size != core->anal->bits) {
../core/cmd.c:			ut64 offorig = core->offset;
../core/cmd.c:			list = r_bin_get_imports (core->bin);
../core/cmd.c:				ut64 addr = r_num_math (core->num, impflag);
../core/cmd.c:			ut64 offorig = core->offset;
../core/cmd.c:			list = r_bin_get_symbols (core->bin);
../core/cmd.c:			r_list_foreach (core->flags->flags, iter, flg) {
../core/cmd.c:				ut64 offorig = core->offset;
../core/cmd.c:				list = core->anal->fcns;
../core/cmd.c:				addr = r_num_math (core->num, each);
../core/cmd.c:				addr = r_num_math (core->num, each);
../core/cmd.c:	oseek = core->offset;
../core/cmd.c:		char *cmdhit = strdup (r_config_get (core->config, "cmd.hit"));
../core/cmd.c:		r_config_set (core->config, "cmd.hit", cmd);
../core/cmd.c:		r_config_set (core->config, "cmd.hit", cmdhit);
../core/cmd.c:			RAnalFunction *fcn = r_anal_get_fcn_at (core->anal, core->offset, 0);
../core/cmd.c:			int bs = core->blocksize;
../core/cmd.c:				ut64 from = r_num_math (core->num, r_str_word_get0 (str, 0));
../core/cmd.c:				ut64 to = r_num_math (core->num, r_str_word_get0 (str, 1));
../core/cmd.c:				ut64 step = r_num_math (core->num, r_str_word_get0 (str, 2));
../core/cmd.c:			RAnalFunction *fcn = r_anal_get_fcn_at (core->anal, core->offset, 0);
../core/cmd.c:			if (core->anal) {
../core/cmd.c:				r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd.c:			if (core->anal) {
../core/cmd.c:				RConsGrep grep = core->cons->grep;
../core/cmd.c:				r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd.c:				core->cons->grep = grep;
../core/cmd.c:			int pid = core->dbg->pid;
../core/cmd.c:			if (core->dbg->h && core->dbg->h->pids) {
../core/cmd.c:				RList *list = core->dbg->h->pids (core->dbg, R_MAX (0, pid));
../core/cmd.c:					r_debug_select (core->dbg, p->pid, p->pid);
../core/cmd.c:			r_debug_select (core->dbg, pid, pid);
../core/cmd.c:			ut64 oseek = core->offset;
../core/cmd.c:			list = r_debug_frames (core->dbg, UT64_MAX);
../core/cmd.c:		char *out = sdb_querys (core->sdb, NULL, 0, str + ((str[1])? 2: 1));
../core/cmd.c:					addr = r_num_math (core->num, each);
../core/cmd.c:					addr = r_num_math (core->num, each);
../core/cmd.c:			for (core->rcmd->macro.counter = 0; i < 999; core->rcmd->macro.counter++) {
../core/cmd.c:				r_cmd_macro_call (&core->rcmd->macro, each + 2);
../core/cmd.c:				if (!core->rcmd->macro.brk_value) {
../core/cmd.c:				addr = core->rcmd->macro._brk_value;
../core/cmd.c:				core->rcmd->macro.counter=0;
../core/cmd.c:					addr = r_num_math (core->num, buf);
../core/cmd.c:					core->rcmd->macro.counter++;
../core/cmd.c:		core->rcmd->macro.counter = 0;
../core/cmd.c:				int flagspace = core->flags->space_idx;
../core/cmd.c:				r_list_foreach (core->flags->flags, iter, flag) {
../core/cmd.c:				core->flags->space_idx = flagspace;
../core/cmd.c:				core->rcmd->macro.counter++ ;
../core/cmd.c:	core->offset = oseek;
../core/cmd.c:	r_th_lock_enter (core->lock);
../core/cmd.c:	if (core->cmdfilter) {
../core/cmd.c:		if (strncmp (cstr, core->cmdfilter, strlen (core->cmdfilter))) {
../core/cmd.c:	if (core->cmdremote) {
../core/cmd.c:			char *res = r_io_system (core->io, cstr);
../core/cmd.c:		core->incomment = true;
../core/cmd.c:		core->incomment = false;
../core/cmd.c:	if (core->incomment) {
../core/cmd.c:		free (core->lastcmd);
../core/cmd.c:		core->lastcmd = strdup (cstr);
../core/cmd.c:	if (core->cmd_depth < 1) {
../core/cmd.c:		free (core->oobi);
../core/cmd.c:		core->oobi = NULL;
../core/cmd.c:		core->oobi_len = 0;
../core/cmd.c:	core->cmd_depth--;
../core/cmd.c:	r_th_lock_leave (core->lock);
../core/cmd.c:	if (core->anal->cmdtail) {
../core/cmd.c:		char *res = core->anal->cmdtail;
../core/cmd.c:		core->anal->cmdtail = NULL;
../core/cmd.c:	core->cmd_depth++;
../core/cmd.c:	free (core->oobi);
../core/cmd.c:	core->oobi = NULL;
../core/cmd.c:	core->oobi_len = 0;
../core/cmd.c:	r_th_lock_leave (core->lock);
../core/cmd.c:	if (core->anal->cmdtail) {
../core/cmd.c:		char *res = core->anal->cmdtail;
../core/cmd.c:		core->anal->cmdtail = NULL;
../core/cmd.c:				int sh = r_config_get_i (core->config, "scr.color");
../core/cmd.c:				r_config_set_i (core->config, "scr.color", 0);
../core/cmd.c:				r_config_set_i (core->config, "scr.color", sh);
../core/cmd.c:	if (!core->lastcmd || core->cmd_depth < 1) {
../core/cmd.c:	switch (*core->lastcmd) {
../core/cmd.c:		if (core->lastcmd[1] == '(') { // macro call
../core/cmd.c:			r_core_cmd0 (core, core->lastcmd);
../core/cmd.c:		r_core_cmd0 (core, core->lastcmd);
../core/cmd.c:		switch (core->lastcmd[1]) {
../core/cmd.c:		if (!strncmp (core->lastcmd, "pd", 2)) {
../core/cmd.c:			if (core->lastcmd[2]== ' ') {
../core/cmd.c:				r_core_cmdf (core, "so %s", core->lastcmd + 3);
../core/cmd.c:				r_core_seek (core, core->offset + core->blocksize, 1);
../core/cmd.c:				if (core->blocksize > core->offset) {
../core/cmd.c:					r_core_seek (core, core->offset - core->blocksize, 1);
../core/cmd.c:		r_core_cmd0 (core, core->lastcmd);
../core/cmd.c:	int n = core->cmd_descriptors->length;
../core/cmd.c:	r_list_sort (core->cmd_descriptors, compare_cmd_descriptor_name);
../core/cmd.c:	r_list_foreach (core->cmd_descriptors, iter, y) {
../core/cmd.c:		x = &core->root_cmd_descriptor;
../core/cmd.c:					r_list_append (core->cmd_descriptors, d);
../core/cmd.c:	core->rcmd = r_cmd_new ();
../core/cmd.c:	core->rcmd->macro.user = core;
../core/cmd.c:	core->rcmd->macro.num = core->num;
../core/cmd.c:	core->rcmd->macro.cmd = r_core_cmd0;
../core/cmd.c:	core->rcmd->nullcallback = r_core_cmd_nullcallback;
../core/cmd.c:	core->rcmd->macro.cb_printf = (PrintfCallback)r_cons_printf;
../core/cmd.c:	r_cmd_set_data (core->rcmd, core);
../core/cmd.c:	core->cmd_descriptors = r_list_newf (free);
../core/cmd.c:		r_cmd_add (core->rcmd, cmds[i].cmd, cmds[i].description, cmds[i].cb);
Binary file ../core/cmd.o matches
../core/cmd_anal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:	bool io_cache =  r_config_get_i (core->config, "io.cache");
../core/cmd_anal.c:		seek = core->offset;
../core/cmd_anal.c:		r_config_set_i (core->config, "io.cache", true);
../core/cmd_anal.c:			r_reg_arena_push (core->anal->reg);
../core/cmd_anal.c:		r_list_foreach (core->anal->fcns, it, fcn) {
../core/cmd_anal.c:			r_anal_esil_set_pc (core->anal->esil, fcn->addr);
../core/cmd_anal.c:		r_config_set_i (core->config, "io.cache", io_cache);
../core/cmd_anal.c:			r_reg_arena_pop (core->anal->reg);
../core/cmd_anal.c:		r_config_set_i (core->config, "io.cache", true);
../core/cmd_anal.c:		seek = core->offset;
../core/cmd_anal.c:		r_anal_esil_set_pc (core->anal->esil, fcn? fcn->addr: core->offset);
../core/cmd_anal.c:		r_config_set_i (core->config, "io.cache", io_cache);
../core/cmd_anal.c:	ut64 curseek = core->offset;
../core/cmd_anal.c:	r_flag_space_push (core->flags, "functions");
../core/cmd_anal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd_anal.c:		r_flag_set (core->flags, fcn->name,
../core/cmd_anal.c:	r_flag_space_pop (core->flags);
../core/cmd_anal.c:	RList *list = r_anal_var_list (core->anal, fcn, 0);
../core/cmd_anal.c:		const char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);
../core/cmd_anal.c:		var_accesses_list (core->anal, fcn, var->delta, typestr);
../core/cmd_anal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:		eprintf ("Cannot find function in 0x%08"PFMT64x"\n", core->offset);
../core/cmd_anal.c:		r_anal_var_delete_all (core->anal, fcn->addr, R_ANAL_VAR_KIND_REG);
../core/cmd_anal.c:		r_anal_var_delete_all (core->anal, fcn->addr, R_ANAL_VAR_KIND_BPV);
../core/cmd_anal.c:		r_anal_var_delete_all (core->anal, fcn->addr, R_ANAL_VAR_KIND_SPV);
../core/cmd_anal.c:			v1 = r_anal_var_get_byname (core->anal, fcn, old_name);
../core/cmd_anal.c:				r_anal_var_rename (core->anal, fcn->addr, R_ANAL_VAR_SCOPE_LOCAL,
../core/cmd_anal.c:			RList *list = r_anal_var_list (core->anal, fcn, 0);
../core/cmd_anal.c:			v1 = r_anal_var_get_byname (core->anal, fcn, p);
../core/cmd_anal.c:			r_anal_var_display (core->anal, v1->delta, v1->kind, v1->type);
../core/cmd_anal.c:			RList *list = r_anal_var_list (core->anal, fcn, 0);
../core/cmd_anal.c:			list = r_anal_var_list (core->anal, fcn, 1);
../core/cmd_anal.c:		v1 = r_anal_var_get_byname (core->anal, fcn, p);
../core/cmd_anal.c:		r_anal_var_retype (core->anal, fcn->addr,
../core/cmd_anal.c:		r_anal_var_list_show (core->anal, fcn, type, str[1]);
../core/cmd_anal.c:		r_anal_var_list_show (core->anal, fcn, core->offset, 0);
../core/cmd_anal.c:			r_anal_var_delete_all (core->anal, fcn->addr, type);
../core/cmd_anal.c:				r_anal_var_delete (core->anal, fcn->addr,
../core/cmd_anal.c:						type, 1, (int)r_num_math (core->num, str + 1));
../core/cmd_anal.c:				r_anal_var_delete_byname (core->anal, fcn, type, name);
../core/cmd_anal.c:			RAnalVar *var = r_anal_var_get (core->anal, fcn->addr,
../core/cmd_anal.c:				r_anal_var_access (core->anal, fcn->addr, (char)type,
../core/cmd_anal.c:						scope, atoi (str + 2), rw, core->offset);
../core/cmd_anal.c:			RRegItem *i = r_reg_get (core->anal->reg, str, -1);
../core/cmd_anal.c:			delta = r_num_math (core->num, str);
../core/cmd_anal.c:			r_anal_var_add (core->anal, fcn->addr,
../core/cmd_anal.c:	for (i = 0; i < core->blocksize; i += element_size) {
../core/cmd_anal.c:		memcpy (&n, core->block + i, sizeof (ut32));
../core/cmd_anal.c:				r_cons_printf ("f trampoline.%x @ 0x%" PFMT64x "\n", n, core->offset + i);
../core/cmd_anal.c:				r_cons_printf ("f trampoline.%" PFMT64x " @ 0x%" PFMT64x "\n", n, core->offset + i);
../core/cmd_anal.c:			r_cons_printf ("Cd %u @ 0x%" PFMT64x ":%u\n", element_size, core->offset + i, element_size);
../core/cmd_anal.c:	int bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_anal.c:	ut64 a = r_num_math (core->num, inp);
../core/cmd_anal.c:	ut64 b = p? r_num_math (core->num, p + 1): 0;
../core/cmd_anal.c:		n = (int)r_debug_reg_get (core->dbg, "oeax");
../core/cmd_anal.c:			const char *a0 = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);
../core/cmd_anal.c:			n = (int)r_debug_reg_get (core->dbg, a0);
../core/cmd_anal.c:	RSyscallItem *item = r_syscall_get (core->anal->syscall, n, -1);
../core/cmd_anal.c:		if (core->assembler->bits == 32) {
../core/cmd_anal.c:		ut64 arg = r_debug_arg_get (core->dbg, R_ANAL_CC_TYPE_FASTCALL, regidx);
../core/cmd_anal.c:				r_io_read_at (core->io, arg, (ut8 *)str, sizeof (str) - 1);
../core/cmd_anal.c:				ut64 len = r_debug_arg_get (core->dbg, R_ANAL_CC_TYPE_FASTCALL, i + 2);
../core/cmd_anal.c:				(void)r_io_read_at (core->io, arg, (ut8 *)str, len);
../core/cmd_anal.c:	int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_anal.c:	bool iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:	bool romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_anal.c:	bool stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_anal.c:	bool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/cmd_anal.c:		color = core->cons->pal.label;
../core/cmd_anal.c:		r_anal_esil_to_reil_setup (esil, core->anal, romem, stats);
../core/cmd_anal.c:		r_anal_esil_set_pc (esil, core->offset);
../core/cmd_anal.c:		addr = core->offset + idx;
../core/cmd_anal.c:		hint = r_anal_hint_get (core->anal, addr);
../core/cmd_anal.c:		r_asm_set_pc (core->assembler, addr);
../core/cmd_anal.c:		ret = r_asm_disassemble (core->assembler, &asmop, buf + idx, len - idx);
../core/cmd_anal.c:		ret = r_anal_op (core->anal, &op, core->offset + idx, buf + idx, len - idx);
../core/cmd_anal.c:			eprintf ("Oops at 0x%08" PFMT64x " (", core->offset + idx);
../core/cmd_anal.c:			for (i = idx, j = 0; i < core->blocksize && j < 3; ++i, ++j) {
../core/cmd_anal.c:			char *d = r_asm_describe (core->assembler, opname);
../core/cmd_anal.c:					r_cons_printf ("%s0x%" PFMT64x Color_RESET " %s\n", color, core->offset + idx, esilstr);
../core/cmd_anal.c:					r_cons_printf ("0x%" PFMT64x " %s\n", core->offset + idx, esilstr);
../core/cmd_anal.c:					r_cons_printf ("%s0x%" PFMT64x Color_RESET "\n", color, core->offset + idx);
../core/cmd_anal.c:					r_cons_printf ("0x%" PFMT64x "\n", core->offset + idx);
../core/cmd_anal.c:			r_cons_printf ("\"addr\":%" PFMT64d ",", core->offset + idx);
../core/cmd_anal.c:			printline ("address", "0x%" PFMT64x "\n", core->offset + idx);
../core/cmd_anal.c:				// addr should not override core->offset + idx.. its silly
../core/cmd_anal.c:		//r_cons_printf ("false: 0x%08"PFMT64x"\n", core->offset+idx);
../core/cmd_anal.c:		addr = bbaddr = r_num_math (core->num, input);
../core/cmd_anal.c:		addr = core->offset;
../core/cmd_anal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/cmd_anal.c:			tp = r_debug_trace_get (core->dbg, b->addr);
../core/cmd_anal.c:		ut64 sw_at = r_num_math (core->num, arg);
../core/cmd_anal.c:		ut64 cs_at = r_num_math (core->num, sp);
../core/cmd_anal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, sw_at, 0);
../core/cmd_anal.c:	ut64 addr = r_num_math (core->num, input);
../core/cmd_anal.c:		addr = core->offset;
../core/cmd_anal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);
../core/cmd_anal.c:		fail = r_num_math (core->num, r_str_word_get0 (ptr, 4));
../core/cmd_anal.c:		jump = r_num_math (core->num, r_str_word_get0 (ptr, 3));
../core/cmd_anal.c:		size = r_num_math (core->num, r_str_word_get0 (ptr, 2));
../core/cmd_anal.c:		addr = r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_anal.c:		fcnaddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:	fcn = r_anal_get_fcn_in (core->anal, fcnaddr, 0);
../core/cmd_anal.c:		int ret = r_anal_fcn_add_bb (core->anal, fcn, addr, size, jump, fail, type, diff);
../core/cmd_anal.c:	int minlen = (int)(input[0]==' ') ? r_num_math (core->num, input + 1): 16;
../core/cmd_anal.c:	ut64 code_size = r_num_get (core->num, "$SS");
../core/cmd_anal.c:	ut64 base_addr = r_num_get (core->num, "$S");
../core/cmd_anal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd_anal.c:				fcn = r_anal_get_fcn_in (core->anal, base_addr+chunk_offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);
../core/cmd_anal.c:		fcn = r_anal_get_fcn_in (core->anal, base_addr+chunk_offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);
../core/cmd_anal.c:	int show_color = r_config_get_i (core->config, "scr.color");
../core/cmd_anal.c:	int cols = r_config_get_i (core->config, "hex.cols") * 4;
../core/cmd_anal.c:	ut64 code_size = r_num_get (core->num, "$SS");
../core/cmd_anal.c:	ut64 base_addr = r_num_get (core->num, "$S");
../core/cmd_anal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd_anal.c:	const char *fcnpfx = r_config_get (core->config, "anal.fcnprefix");
../core/cmd_anal.c:	if (r_reg_get (core->anal->reg, _name, -1)) {
../core/cmd_anal.c:	fcn = r_anal_get_fcn_in (core->anal, off,
../core/cmd_anal.c:	r_flag_rename (core->flags, r_flag_get (core->flags, fcn->name), nname);
../core/cmd_anal.c:	if (core->anal->cb.on_fcn_rename) {
../core/cmd_anal.c:		core->anal->cb.on_fcn_rename (core->anal,
../core/cmd_anal.c:					core->anal->user, fcn, nname);
../core/cmd_anal.c:		addr = r_num_math (core->num, input);
../core/cmd_anal.c:		addr = core->offset;
../core/cmd_anal.c:		fcn = r_anal_fcn_find_name (core->anal, input + 3);
../core/cmd_anal.c:		fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:		ut32 totalCycles = r_anal_fcn_cost (core->anal, fcn);
../core/cmd_anal.c:	r_cons_break_timeout (r_config_get_i (core->config, "anal.timeout"));
../core/cmd_anal.c:		r_anal_fcn_fit_overlaps (core->anal, NULL);
../core/cmd_anal.c:			r_anal_fcn_del_locs (core->anal, UT64_MAX);
../core/cmd_anal.c:			r_anal_fcn_del (core->anal, UT64_MAX);
../core/cmd_anal.c:				? r_num_math (core->num, input + 2)
../core/cmd_anal.c:				: core->offset;
../core/cmd_anal.c:			r_anal_fcn_del_locs (core->anal, addr);
../core/cmd_anal.c:			r_anal_fcn_del (core->anal, addr);
../core/cmd_anal.c:		ut64 addr = core->offset;
../core/cmd_anal.c:		ut64 addr_end = r_num_math (core->num, input + 2);
../core/cmd_anal.c:			a = r_config_get_i (core->config, "anal.from");
../core/cmd_anal.c:			b = r_config_get_i (core->config, "anal.to");
../core/cmd_anal.c:			c = r_config_get (core->config, "anal.limits");
../core/cmd_anal.c:			r_config_set_i (core->config, "anal.from", addr);
../core/cmd_anal.c:			r_config_set_i (core->config, "anal.to", addr_end);
../core/cmd_anal.c:			r_config_set (core->config, "anal.limits", "true");
../core/cmd_anal.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/cmd_anal.c:			fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/cmd_anal.c:			r_config_set_i (core->config, "anal.from", a);
../core/cmd_anal.c:			r_config_set_i (core->config, "anal.to", b);
../core/cmd_anal.c:			r_config_set (core->config, "anal.limits", c? c: "");
../core/cmd_anal.c:				size = r_num_math (core->num, r_str_word_get0 (ptr, 4));
../core/cmd_anal.c:				addr = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:			if (!r_anal_fcn_add (core->anal, addr, size, name, type, diff)) {
../core/cmd_anal.c:		ut64 addr = core->offset;
../core/cmd_anal.c:			addr = r_num_math (core->num, input + 3);
../core/cmd_anal.c:			fcn = r_anal_fcn_find_name (core->anal, input + 3);
../core/cmd_anal.c:			fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:		if (input[2] && (addr = r_num_math (core->num, arg))) {
../core/cmd_anal.c:			addr = core->offset;
../core/cmd_anal.c:		if ((f = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL))) {
../core/cmd_anal.c:				r_anal_str_to_fcn (core->anal, f, arg);
../core/cmd_anal.c:				char *str = r_anal_fcn_to_string (core->anal, f);
../core/cmd_anal.c:		r_core_anal_fcn_merge (core, core->offset, r_num_math (core->num, input + 2));
../core/cmd_anal.c:			if ((fcn = r_anal_get_fcn_in (core->anal, core->offset, 0)) != NULL) {
../core/cmd_anal.c:				eprintf ("Error: Cannot find function at 0x08%" PFMT64x "\n", core->offset);
../core/cmd_anal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_anal.c:			if (!r_anal_cc_exist (core->anal, cc)) {
../core/cmd_anal.c:				fcn->cc = r_str_const (r_anal_cc_to_constant (core->anal, cc));
../core/cmd_anal.c:			sdb_foreach (core->anal->sdb_cc, cc_print, NULL);
../core/cmd_anal.c:				sdb_merge (core->anal->sdb_cc, db);
../core/cmd_anal.c:				out = sdb_querys (core->anal->sdb_cc, NULL, 0, cmd);
../core/cmd_anal.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_anal.c:				r_anal_hint_set_bits (core->anal, fcn->addr, bits);
../core/cmd_anal.c:				r_anal_hint_set_bits (core->anal,
../core/cmd_anal.c:					core->anal->bits);
../core/cmd_anal.c:			free (r_core_anal_fcn_autoname (core, core->offset, 1));
../core/cmd_anal.c:			char *name = r_core_anal_fcn_autoname (core, core->offset, 0);
../core/cmd_anal.c:				r_cons_printf ("afn %s 0x%08" PFMT64x "\n", name, core->offset);
../core/cmd_anal.c:				RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:			ut64 off = core->offset;
../core/cmd_anal.c:				off = r_num_math (core->num, p);
../core/cmd_anal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:			fcn->maxstack = r_num_math (core->num, input + 3);
../core/cmd_anal.c:		ut64 off = core->offset;
../core/cmd_anal.c:			off = r_num_math (core->num, p + 1);
../core/cmd_anal.c:		fcn = r_anal_get_fcn_in (core->anal, off, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);
../core/cmd_anal.c:		} else eprintf ("Cannot find function at 0x%08" PFMT64x "\n", core->offset);
../core/cmd_anal.c:				ut64 addr = input[2]? r_num_math (core->num, input + 2): core->offset;
../core/cmd_anal.c:				RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:				a = r_num_math (core->num, mi + 3);
../core/cmd_anal.c:				b = r_num_math (core->num, p + 1);
../core/cmd_anal.c:				fcn = r_anal_get_fcn_in (core->anal, a, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:					r_anal_fcn_xref_add (core->anal, fcn, a, b, input[2]);
../core/cmd_anal.c:				a = r_num_math (core->num, mi);
../core/cmd_anal.c:				b = r_num_math (core->num, p + 1);
../core/cmd_anal.c:				fcn = r_anal_get_fcn_in (core->anal, a, R_ANAL_FCN_TYPE_ROOT);
../core/cmd_anal.c:					r_anal_fcn_xref_del (core->anal, fcn, a, b, -1);
../core/cmd_anal.c:			int val = input[2] && r_num_math (core->num, input + 2);
../core/cmd_anal.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:		int depth = r_config_get_i (core->config, "anal.depth");
../core/cmd_anal.c:		bool analyze_recursively = r_config_get_i (core->config, "anal.calls");
../core/cmd_anal.c:		ut64 addr = core->offset;
../core/cmd_anal.c:				addr = r_num_math (core->num, uaddr);
../core/cmd_anal.c:		//r_core_anal_undefine (core, core->offset);
../core/cmd_anal.c:		fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/cmd_anal.c:		if (fcn && r_config_get_i (core->config, "anal.vars")) {
../core/cmd_anal.c:			fcn = r_anal_get_fcn_in (core->anal, addr, 0); /// XXX wrong in case of nopskip
../core/cmd_anal.c:					if (!r_io_is_valid_offset (core->io, ref->addr, 1)) {
../core/cmd_anal.c:					RAnalFunction *f = r_anal_get_fcn_at (core->anal, ref->addr, 0);
../core/cmd_anal.c:							if (!r_io_is_valid_offset (core->io, ref->addr, R_IO_EXEC)) {
../core/cmd_anal.c:						f = r_anal_get_fcn_in (core->anal, fcn->addr, 0);
../core/cmd_anal.c:							f = r_anal_get_fcn_at (core->anal, fcn->addr, 0);
../core/cmd_anal.c:	RReg *hack = core->dbg->reg;
../core/cmd_anal.c:	int use_colors = r_config_get_i (core->config, "scr.color");
../core/cmd_anal.c:#define ConsP(x) (core->cons && core->cons->pal.x)? core->cons->pal.x
../core/cmd_anal.c:		bits = core->anal->bits;
../core/cmd_anal.c:	if (core->anal) {
../core/cmd_anal.c:		core->dbg->reg = core->anal->reg;
../core/cmd_anal.c:		if (core->anal->cur && core->anal->cur->arch) {
../core/cmd_anal.c:			if (!strcmp (core->anal->cur->arch, "arm") && bits == 16) {
../core/cmd_anal.c:			if (!strcmp (core->anal->cur->arch, "6502") && bits == 8) {
../core/cmd_anal.c:				r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, 16, mode, use_color); // XXX detect which one is current usage
../core/cmd_anal.c:			if (!strcmp (core->anal->cur->arch, "avr") && bits == 8) {
../core/cmd_anal.c:				r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, 16, mode, use_color); // XXX detect which one is current usage
../core/cmd_anal.c:		const char *pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:		RRegItem *reg = r_reg_get (core->anal->reg, pcname, 0);
../core/cmd_anal.c:			r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, 2, use_color); // XXX detect which one is current usage
../core/cmd_anal.c:	r_debug_reg_list (core->dbg, type, bits, mode, use_color);
../core/cmd_anal.c:	core->dbg->reg = hack;
../core/cmd_anal.c:	int bits = (core->anal->bits & R_SYS_BITS_64)? 64: 32;
../core/cmd_anal.c:	int use_colors = r_config_get_i (core->config, "scr.color");
../core/cmd_anal.c:#define ConsP(x) (core->cons && core->cons->pal.x)? core->cons->pal.x
../core/cmd_anal.c:		RRegSet *rs = r_reg_regset_get (core->anal->reg, R_REG_TYPE_GPR);
../core/cmd_anal.c:		r_reg_arena_zero (core->anal->reg);
../core/cmd_anal.c:		if (core->anal->reg->reg_profile_cmt) {
../core/cmd_anal.c:			r_cons_println (core->anal->reg->reg_profile_cmt);
../core/cmd_anal.c:			r_reg_arena_set_bytes (core->anal->reg, str + 1);
../core/cmd_anal.c:			r_reg_arena_swap (core->anal->reg, false);
../core/cmd_anal.c:			r_reg_arena_push (core->anal->reg);
../core/cmd_anal.c:			r_reg_arena_pop (core->anal->reg);
../core/cmd_anal.c:				RRegSet *rs = &core->anal->reg->regset[i];
../core/cmd_anal.c:			ut64 off = r_reg_getv (core->anal->reg, str + 1);
../core/cmd_anal.c:		r_core_debug_rr (core, core->anal->reg);
../core/cmd_anal.c:			core->anal->reg, R_REG_TYPE_GPR, &sz);
../core/cmd_anal.c:		ut8 *buf = r_reg_get_bytes (core->dbg->reg, type, &len);
../core/cmd_anal.c:			//r_print_hexdump (core->print, 0LL, buf, len, 16, 16);
../core/cmd_anal.c:			r_print_hexdump (core->print, 0LL, buf, len, 32, 4, 1);
../core/cmd_anal.c:				r = r_reg_cond_get (core->dbg->reg, name);
../core/cmd_anal.c:					RRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../core/cmd_anal.c:						int o = r_reg_cond_bits (core->dbg->reg, id, rf);
../core/cmd_anal.c:						core->num->value = o;
../core/cmd_anal.c:				RRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../core/cmd_anal.c:								r_reg_cond_bits (core->dbg->reg, i, rf));
../core/cmd_anal.c:								r_reg_cond_bits (core->dbg->reg, i, rf),
../core/cmd_anal.c:			r_reg_arena_pop (core->dbg->reg);
../core/cmd_anal.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, true);
../core/cmd_anal.c:			r_reg_arena_push (core->dbg->reg);
../core/cmd_anal.c:						core->dbg->reg->regset[0].pool));
../core/cmd_anal.c:		name = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (str + 2));
../core/cmd_anal.c:		r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, 3, use_color); // XXX detect which one is current usage
../core/cmd_anal.c:		r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_anal.c:		r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, 0, use_color); // XXX detect which one is current usage
../core/cmd_anal.c:		r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_anal.c:				st64 sz = r_num_math (core->num, str + 1);
../core/cmd_anal.c:			r = r_reg_get (core->dbg->reg, regname, -1);
../core/cmd_anal.c:					const char *alias = r_reg_get_name (core->dbg->reg, role);
../core/cmd_anal.c:					r = r_reg_get (core->dbg->reg, alias, -1);
../core/cmd_anal.c:				//	r_reg_get_value (core->dbg->reg, r));
../core/cmd_anal.c:				r_reg_set_value (core->dbg->reg, r,
../core/cmd_anal.c:						r_num_math (core->num, arg + 1));
../core/cmd_anal.c:				r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);
../core/cmd_anal.c:				//	r_reg_get_value (core->dbg->reg, r));
../core/cmd_anal.c:	RAnalEsil *esil = core->anal->esil;
../core/cmd_anal.c:	const char *name = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:		int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_anal.c:		int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:		int romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_anal.c:		int stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_anal.c:		int noNULL = r_config_get_i (core->config, "esil.noNULL");
../core/cmd_anal.c:		int verbose = r_config_get_i (core->config, "esil.verbose");
../core/cmd_anal.c:		r_anal_esil_setup (esil, core->anal, romem, stats, noNULL); // setup io
../core/cmd_anal.c:		core->anal->esil = esil;
../core/cmd_anal.c:			const char *s = r_config_get (core->config, "cmd.esil.intr");
../core/cmd_anal.c:					r_config_set (core->config, "cmd.esil.intr", my);
../core/cmd_anal.c:	ut64 addr = r_reg_getv (core->anal->reg, name);
../core/cmd_anal.c:		int romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_anal.c:		int stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_anal.c:		int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:		int exectrap = r_config_get_i (core->config, "esil.exectrap");
../core/cmd_anal.c:		int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_anal.c:		int noNULL = r_config_get_i (core->config, "esil.noNULL");
../core/cmd_anal.c:		if (!(core->anal->esil = r_anal_esil_new (stacksize, iotrap))) {
../core/cmd_anal.c:		esil = core->anal->esil;
../core/cmd_anal.c:		r_anal_esil_setup (esil, core->anal, romem, stats, noNULL); // setup io
../core/cmd_anal.c:		RList *entries = r_bin_get_entries (core->bin);
../core/cmd_anal.c:			info = r_bin_get_info (core->bin);
../core/cmd_anal.c:			addr = core->offset;
../core/cmd_anal.c:		r_reg_setv (core->anal->reg, name, addr);
../core/cmd_anal.c:		addr = r_reg_getv (core->anal->reg, name);
../core/cmd_anal.c:		if (!r_io_is_valid_offset (core->io, addr, R_IO_EXEC)) {
../core/cmd_anal.c:	r_asm_set_pc (core->assembler, addr);
../core/cmd_anal.c:	const char *pincmd = r_anal_pin_call (core->anal, addr);
../core/cmd_anal.c:		ut64 pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_anal.c:	(void)r_io_read_at (core->io, addr, code, sizeof (code));
../core/cmd_anal.c:	ret = r_anal_op (core->anal, &op, addr, code, sizeof (code));
../core/cmd_anal.c:	esil = core->anal->esil;
../core/cmd_anal.c:		RAnalHint *hint = r_anal_hint_get (core->anal, addr);
../core/cmd_anal.c:	r_reg_setv (core->anal->reg, name, addr + op.size);
../core/cmd_anal.c:		if (core->dbg->trace->enabled) {
../core/cmd_anal.c:			RReg *reg = core->dbg->reg;
../core/cmd_anal.c:			core->dbg->reg = core->anal->reg;
../core/cmd_anal.c:			r_debug_trace_pc (core->dbg, addr);
../core/cmd_anal.c:			core->dbg->reg = reg;
../core/cmd_anal.c:			if (core->anal->cur && core->anal->cur->esil_post_loop) {
../core/cmd_anal.c:				core->anal->cur->esil_post_loop (esil, &op);
../core/cmd_anal.c:					r_reg_setv (core->anal->reg, name, jump_target);
../core/cmd_anal.c:	st64 follow = (st64)r_config_get_i (core->config, "dbg.follow");
../core/cmd_anal.c:	ut64 pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_anal.c:		if ((pc < core->offset) || (pc > (core->offset + follow)))
../core/cmd_anal.c:		if (r_reg_getv (core->anal->reg, name) == until_addr) {
../core/cmd_anal.c:		if (core->anal->esil->verbose) {
../core/cmd_anal.c:		if (r_anal_esil_condition (core->anal->esil, until_expr)) {
../core/cmd_anal.c:			if (core->anal->esil->verbose) {
../core/cmd_anal.c:	RAnalEsil *esil = core->anal->esil;
../core/cmd_anal.c:	const char *name = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:	ut64 end = r_reg_getv (core->anal->reg, name);
../core/cmd_anal.c:		addr = core->offset;
../core/cmd_anal.c:		addr = r_num_math (core->num, addrstr);
../core/cmd_anal.c:	const char *mode = r_config_get (core->config, "esil.fillstack");
../core/cmd_anal.c:	RAnalEsil *esil = core->anal->esil;
../core/cmd_anal.c:	ut64 curoff = core->offset;
../core/cmd_anal.c:		int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_anal.c:		int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:		int romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_anal.c:		int stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_anal.c:		int noNULL = r_config_get_i (core->config, "esil.noNULL");
../core/cmd_anal.c:		int verbose = r_config_get_i (core->config, "esil.verbose");
../core/cmd_anal.c:		r_anal_esil_setup (esil, core->anal, romem, stats, noNULL); // setup io
../core/cmd_anal.c:		core->anal->esil = esil;
../core/cmd_anal.c:			const char *s = r_config_get (core->config, "cmd.esil.intr");
../core/cmd_anal.c:					r_config_set (core->config, "cmd.esil.intr", my);
../core/cmd_anal.c:		fi = r_flag_get (core->flags, "aeim.stack");
../core/cmd_anal.c:		RFlagItem *fi = r_flag_get (core->flags, "aeim.fd");
../core/cmd_anal.c:			(void)r_io_fd_close (core->io, fi->offset);
../core/cmd_anal.c:	addr = r_config_get_i (core->config, "esil.stack.addr");
../core/cmd_anal.c:	size = r_config_get_i (core->config, "esil.stack.size");
../core/cmd_anal.c:	patt = r_config_get (core->config, "esil.stack.pattern");
../core/cmd_anal.c:		addr = r_num_math (core->num, p);
../core/cmd_anal.c:			size = (ut32)r_num_math (core->num, p);
../core/cmd_anal.c:			r_io_fd_close (core->io, esil->stack_fd);
../core/cmd_anal.c:		r_flag_unset_name (core->flags, name);
../core/cmd_anal.c:	esil->stack_fd = r_io_fd_open (core->io, uri, R_IO_RW, 0);
../core/cmd_anal.c:	if (!(stack_map = r_io_map_add (core->io, esil->stack_fd,
../core/cmd_anal.c:		r_io_fd_close (core->io, esil->stack_fd);
../core/cmd_anal.c:	// r_flag_set (core->flags, name, addr, size);	//why is this here?
../core/cmd_anal.c:	r_flag_set (core->flags, "aeim.stack", addr, size);
../core/cmd_anal.c:	r_flag_set (core->flags, "aeim.fd", esil->stack_fd, 1);
../core/cmd_anal.c:	r_config_set_i (core->config, "io.va", true);
../core/cmd_anal.c:	sp = r_reg_get_name (core->dbg->reg, R_REG_NAME_SP);
../core/cmd_anal.c:	r_debug_reg_set (core->dbg, sp, addr + (size / 2));
../core/cmd_anal.c:	sp = r_reg_get_name (core->dbg->reg, R_REG_NAME_BP);
../core/cmd_anal.c:	r_debug_reg_set (core->dbg, sp, addr + (size / 2));
../core/cmd_anal.c:	pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);
../core/cmd_anal.c:	r_debug_reg_set (core->dbg, pc, curoff);
../core/cmd_anal.c:	if (!r_io_section_get_name (core->io, ESIL_STACK_NAME)) {
../core/cmd_anal.c:	const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:	int noNULL = r_config_get_i (core->config, "esil.noNULL");
../core/cmd_anal.c:	opc = r_reg_getv (core->anal->reg, pc);
../core/cmd_anal.c:		opc = core->offset;
../core/cmd_anal.c:	if (!core->anal->esil) {
../core/cmd_anal.c:		int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:		ut64 stackSize = r_config_get_i (core->config, "esil.stack.size");
../core/cmd_anal.c:		if (!(core->anal->esil = r_anal_esil_new (stackSize, iotrap))) {
../core/cmd_anal.c:		r_anal_esil_setup (core->anal->esil, core->anal, 0, 0, noNULL);
../core/cmd_anal.c:	regstate = r_reg_arena_peek (core->anal->reg);
../core/cmd_anal.c:	const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:	r_reg_arena_poke (core->anal->reg, regstate);
../core/cmd_anal.c:	r_reg_setv (core->anal->reg, pc, opc);
../core/cmd_anal.c:	maxopsize = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MAX_OP_SIZE);
../core/cmd_anal.c:	(void)r_io_read_at (core->io, addr, (ut8 *)buf, buf_sz);
../core/cmd_anal.c:	//esil = core->anal->esil;
../core/cmd_anal.c:	r_reg_arena_push (core->anal->reg);
../core/cmd_anal.c:	int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_anal.c:	bool iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:	int romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_anal.c:	int stats1 = r_config_get_i (core->config, "esil.stats");
../core/cmd_anal.c:	int noNULL = r_config_get_i (core->config, "esil.noNULL");
../core/cmd_anal.c:	r_anal_esil_setup (esil, core->anal, romem, stats1, noNULL); // setup io
../core/cmd_anal.c:		len = r_anal_op (core->anal, &aop, addr + ptr, buf + ptr, buf_sz - ptr);
../core/cmd_anal.c:	r_reg_arena_pop (core->anal->reg);
../core/cmd_anal.c:	RAnalEsil *esil = core->anal->esil;
../core/cmd_anal.c:	ut64 addr = core->offset;
../core/cmd_anal.c:	int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_anal.c:	int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_anal.c:	int romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_anal.c:	int stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_anal.c:	int noNULL = r_config_get_i (core->config, "esil.noNULL");
../core/cmd_anal.c:			r_anal_pin_list (core->anal);
../core/cmd_anal.c:				addr = r_num_math (core->num, input + 2);
../core/cmd_anal.c:			r_anal_pin_unset (core->anal, addr);
../core/cmd_anal.c:			r_anal_pin (core->anal, addr, input + 2);
../core/cmd_anal.c:		if (core->anal->esil) {
../core/cmd_anal.c:			r_cons_printf ("trap: %d\n", core->anal->esil->trap);
../core/cmd_anal.c:			r_cons_printf ("trap-code: %d\n", core->anal->esil->trap_code);
../core/cmd_anal.c:		//r_anal_esil_eval (core->anal, input+1);
../core/cmd_anal.c:			if (!(core->anal->esil = esil = r_anal_esil_new (stacksize, iotrap)))
../core/cmd_anal.c:		r_anal_esil_setup (esil, core->anal, romem, stats, noNULL); // setup io
../core/cmd_anal.c:		r_anal_esil_set_pc (esil, core->offset);
../core/cmd_anal.c:			ut64 pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_anal.c:			r_debug_reg_set (core->dbg, "PC", pc + op->size);
../core/cmd_anal.c:				until_addr = r_num_math (core->num, input + 2);
../core/cmd_anal.c:			op = r_core_anal_op (core, r_reg_getv (core->anal->reg,
../core/cmd_anal.c:				r_reg_get_name (core->anal->reg, R_REG_NAME_PC)));
../core/cmd_anal.c:			const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:				if (core->anal->esil->trap || core->anal->esil->trap_code) {
../core/cmd_anal.c:				newaddr = r_num_get (core->num, pc);
../core/cmd_anal.c:				until_addr = r_num_math (core->num, input + 2);
../core/cmd_anal.c:			core->anal->esil = NULL;
../core/cmd_anal.c:				const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_anal.c:				if (r_reg_getv (core->anal->reg, pc) == 0LL) {
../core/cmd_anal.c:			if (!(esil = core->anal->esil = r_anal_esil_new (stacksize, iotrap))) {
../core/cmd_anal.c:			r_anal_esil_setup (esil, core->anal, romem, stats, noNULL); // setup io
../core/cmd_anal.c:			esil->verbose = (int)r_config_get_i (core->config, "esil.verbose");
../core/cmd_anal.c:				const char *s = r_config_get (core->config, "cmd.esil.intr");
../core/cmd_anal.c:						r_config_set (core->config, "cmd.esil.intr", my);
../core/cmd_anal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal,
../core/cmd_anal.c:							core->offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);
../core/cmd_anal.c:				r_io_read_at (core->io, pc, buf, bbs);
../core/cmd_anal.c:					r_asm_set_pc (core->assembler, pc);
../core/cmd_anal.c:					ret = r_anal_op (core->anal, &op, addr, buf, left); // read overflow
../core/cmd_anal.c:						r_reg_set_value_by_role (core->anal->reg, R_REG_NAME_PC, pc);
../core/cmd_anal.c:			eprintf ("Cannot find function at 0x%08" PFMT64x "\n", core->offset);
../core/cmd_anal.c:			r_anal_esil_to_reil_setup (esil, core->anal, romem, stats);
../core/cmd_anal.c:			r_anal_esil_set_pc (esil, core->offset);
../core/cmd_anal.c:			cmd_aea (core, 1 + (1<<1), core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1 + (1<<2), core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1 + (1<<3), core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1 + (1<<4), core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1 + (1<<5), core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:			cmd_aea (core, 1, core->offset, (int)r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1<<1, core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1<<2, core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1<<3, core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1<<4, core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			cmd_aea (core, 1<<5, core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:			cmd_aea (core, 0, core->offset, r_num_math (core->num, input+2));
../core/cmd_anal.c:		old_arch = strdup (r_config_get (core->config, "asm.arch"));
../core/cmd_anal.c:		old_bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_anal.c:		segoff = r_config_get_i (core->config, "asm.segoff");
../core/cmd_anal.c:		ret = r_anal_op (core->anal, &aop, core->offset,
../core/cmd_anal.c:	int len = core->blocksize;
../core/cmd_anal.c:		len = (int)r_num_get (core->num, input + 1);
../core/cmd_anal.c:	core_anal_bytes (core, core->block, len, 0, input[0]);
../core/cmd_anal.c:	if (tbs != core->blocksize) {
../core/cmd_anal.c:	int l, len = core->blocksize;
../core/cmd_anal.c:	ut32 tbs = core->blocksize;
../core/cmd_anal.c:			l = (int)r_num_get (core->num, input + 1);
../core/cmd_anal.c:			len = l = core->blocksize;
../core/cmd_anal.c:		core_anal_bytes (core, core->block, len, count, input[0]);
../core/cmd_anal.c:		r_core_anal_hint_list (core->anal, input[0]);
../core/cmd_anal.c:			l = (int)r_num_get (core->num, input + 1);
../core/cmd_anal.c:			len = l = core->blocksize;
../core/cmd_anal.c:		core_anal_bytes (core, core->block, len, count, 0);
../core/cmd_anal.c:	ut64 len = r_num_math (core->num, input);
../core/cmd_anal.c:	addr = core->offset;
../core/cmd_anal.c:		RIOSection *sec = r_io_section_vget (core->io, addr);
../core/cmd_anal.c:			if (sec && sec->vaddr != sec->paddr && binfile->size > (core->offset - sec->vaddr + sec->paddr)) {
../core/cmd_anal.c:				len = binfile->size - (core->offset - sec->vaddr + sec->paddr);
../core/cmd_anal.c:				if (binfile->size > core->offset) {
../core/cmd_anal.c:					len = binfile->size - core->offset;
../core/cmd_anal.c:			r_io_read_at (core->io, addr, buf, 4096);
../core/cmd_anal.c:		if (r_anal_op (core->anal, &op, addr, buf + bufi, 4096 - bufi)) {
../core/cmd_anal.c:	ls_foreach (core->io->sections, iter, s) {
../core/cmd_anal.c:	if (ls_empty (core->io->sections)) {
../core/cmd_anal.c:		min = core->offset;
../core/cmd_anal.c:	int depth = r_config_get_i (core->config, "anal.depth");
../core/cmd_anal.c:	const int addrbytes = core->io->addrbytes;
../core/cmd_anal.c:			r_io_read_at (core->io, addr, buf, sizeof (buf));
../core/cmd_anal.c:		if (r_anal_op (core->anal, &op, addr, buf + bufi, sizeof (buf) - bufi)) {
../core/cmd_anal.c:					fcn = r_anal_get_fcn_in (core->anal, op.jump, R_ANAL_FCN_TYPE_ROOT);
../core/cmd_anal.c:				RAnalFunction * fcn = r_anal_get_fcn_at (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:				r_anal_fcn_xref_add (core->anal, fcn, addr, op.jump, 'C');
../core/cmd_anal.c:				if (r_io_is_valid_offset (core->io, op.jump, 1)) {
../core/cmd_anal.c:	ut64 len = r_num_math (core->num, input);
../core/cmd_anal.c:	addr = core->offset;
../core/cmd_anal.c:		const char *search_in = r_config_get (core->config, "search.in");
../core/cmd_anal.c:		ret = sdb_querys (core->anal->sdb_fcnsign, NULL, 0, input + 1);
../core/cmd_anal.c:		ret = sdb_querys (core->anal->sdb_fcnsign, NULL, 0, "*");
../core/cmd_anal.c:					si = r_syscall_get (core->anal->syscall, n, -1);
../core/cmd_anal.c:					n = r_syscall_get_num (core->anal->syscall, input + 3);
../core/cmd_anal.c:				list = r_syscall_list (core->anal->syscall);
../core/cmd_anal.c:					si = r_syscall_get (core->anal->syscall, n, -1);
../core/cmd_anal.c:					n = r_syscall_get_num (core->anal->syscall, input + 2);
../core/cmd_anal.c:				list = r_syscall_list (core->anal->syscall);
../core/cmd_anal.c:				si = r_syscall_get (core->anal->syscall, n, -1);
../core/cmd_anal.c:				n = r_syscall_get_num (core->anal->syscall, input + 2);
../core/cmd_anal.c:			list = r_syscall_list (core->anal->syscall);
../core/cmd_anal.c:		list = r_syscall_list (core->anal->syscall);
../core/cmd_anal.c:		cmd_syscall_do (core, (int)r_num_get (core->num, input + 1));
../core/cmd_anal.c:			out = sdb_querys (core->anal->syscall->db, NULL, 0, input + 2);
../core/cmd_anal.c:	ut64 addr = core->offset;
../core/cmd_anal.c:		addr = r_num_math (core->num, input);
../core/cmd_anal.c:	xrefs = r_anal_xrefs_get (core->anal, addr);
../core/cmd_anal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);
../core/cmd_anal.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, ref->addr, -1);
../core/cmd_anal.c:	RAnalFunction * fcn = r_anal_get_fcn_at (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/cmd_anal.c:	ut64 addr = core->offset;
../core/cmd_anal.c:			r_anal_xrefs_init (core->anal);
../core/cmd_anal.c:				from = r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_anal.c:				to = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:				to = core->offset;
../core/cmd_anal.c:			list = r_anal_xrefs_get (core->anal, to);
../core/cmd_anal.c:						r_anal_ref_del (core->anal, ref->addr, ref->at);
../core/cmd_anal.c:						r_anal_ref_del (core->anal, ref->addr, ref->at);
../core/cmd_anal.c:			sdb_query (core->anal->sdb_xrefs, input + 2);
../core/cmd_anal.c:			addr = r_num_math (core->num, space + 1);
../core/cmd_anal.c:			addr = core->offset;
../core/cmd_anal.c:		list = r_anal_xrefs_get (core->anal, addr);
../core/cmd_anal.c:				bool asm_varsub = r_config_get_i (core->config, "asm.varsub");
../core/cmd_anal.c:				core->parser->relsub = r_config_get_i (core->config, "asm.relsub");
../core/cmd_anal.c:				core->parser->localvar_only = r_config_get_i (core->config, "asm.varsub_only");
../core/cmd_anal.c:					r_asm_set_pc (core->assembler, ref->addr);
../core/cmd_anal.c:					r_asm_disassemble (core->assembler, &asmop, buf, size);
../core/cmd_anal.c:					fcn = r_anal_get_fcn_in (core->anal, ref->addr, 0);
../core/cmd_anal.c:						r_parse_varsub (core->parser, fcn, ref->addr, asmop.size,
../core/cmd_anal.c:					r_parse_filter (core->parser, core->flags,
../core/cmd_anal.c:							asmop.buf_asm, str, sizeof (str), core->print->big_endian);
../core/cmd_anal.c:					RFlagItem *fi = r_flag_get_at (core->flags, fcn? fcn->addr: ref->addr, true);
../core/cmd_anal.c:				int has_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/cmd_anal.c:				bool asm_varsub = r_config_get_i (core->config, "asm.varsub");
../core/cmd_anal.c:				core->parser->relsub = r_config_get_i (core->config, "asm.relsub");
../core/cmd_anal.c:				core->parser->localvar_only = r_config_get_i (core->config, "asm.varsub_only");
../core/cmd_anal.c:				if (core->parser->relsub) {
../core/cmd_anal.c:					core->parser->relsub_addr = addr;
../core/cmd_anal.c:					r_asm_set_pc (core->assembler, ref->addr);
../core/cmd_anal.c:					r_asm_disassemble (core->assembler, &asmop, buf, size);
../core/cmd_anal.c:					fcn = r_anal_get_fcn_in (core->anal, ref->addr, 0);
../core/cmd_anal.c:						r_parse_varsub (core->parser, fcn, ref->addr, asmop.size,
../core/cmd_anal.c:					r_parse_filter (core->parser, core->flags,
../core/cmd_anal.c:							asmop.buf_asm, str, sizeof (str), core->print->big_endian);
../core/cmd_anal.c:						buf_asm = r_print_colorize_opcode (core->print, str,
../core/cmd_anal.c:							core->cons->pal.reg, core->cons->pal.num, false);
../core/cmd_anal.c:					comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, ref->addr);
../core/cmd_anal.c:						buf_fcn, ref->addr, r_anal_ref_to_string (core->anal, ref->type), buf_asm);
../core/cmd_anal.c:			addr = r_num_math (core->num, space + 1);
../core/cmd_anal.c:			addr = core->offset;
../core/cmd_anal.c:			list = list_ = r_anal_xrefs_get_from (core->anal, addr);
../core/cmd_anal.c:				RAnalFunction * fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/cmd_anal.c:			list = r_anal_refs_get (core->anal, addr);
../core/cmd_anal.c:					r_asm_set_pc (core->assembler, ref->at);
../core/cmd_anal.c:					r_asm_disassemble (core->assembler, &asmop, buf, 12);
../core/cmd_anal.c:				int has_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/cmd_anal.c:					r_asm_set_pc (core->assembler, ref->at);
../core/cmd_anal.c:					r_asm_disassemble (core->assembler, &asmop, buf, 12);
../core/cmd_anal.c:					r_parse_filter (core->parser, core->flags,
../core/cmd_anal.c:							asmop.buf_asm, str, sizeof (str), core->print->big_endian);
../core/cmd_anal.c:						buf_asm = r_print_colorize_opcode (core->print, str,
../core/cmd_anal.c:							core->cons->pal.reg, core->cons->pal.num, false);
../core/cmd_anal.c:						r_anal_op (core->anal, &aop, ref->at, buf, 12);
../core/cmd_anal.c:		ut64 at = core->offset;
../core/cmd_anal.c:			at = r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_anal.c:			addr = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:		r_anal_ref_add (core->anal, addr, at, input[0]);
../core/cmd_anal.c:			ut64 addr = r_num_math (core->num, input + 1);
../core/cmd_anal.c:			r_core_anal_hint_print (core->anal, addr, 0);
../core/cmd_anal.c:		r_core_anal_hint_print (core->anal, core->offset, 0);
../core/cmd_anal.c:				r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_anal.c:			r_anal_hint_set_arch (core->anal, core->offset, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:			r_anal_hint_unset_arch (core->anal, core->offset);
../core/cmd_anal.c:				r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_anal.c:			bits = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:			r_anal_hint_set_bits (core->anal, core->offset, bits);
../core/cmd_anal.c:			r_anal_hint_unset_bits (core->anal, core->offset);
../core/cmd_anal.c:				(int) r_num_math (core->num, input + 1);
../core/cmd_anal.c:			r_anal_hint_set_immbase (core->anal, core->offset, base);
../core/cmd_anal.c:			r_anal_hint_set_immbase (core->anal, core->offset, 0);
../core/cmd_anal.c:				core->anal, core->offset,
../core/cmd_anal.c:				r_num_math (core->num, input + 1));
../core/cmd_anal.c:			r_anal_hint_unset_jump (core->anal, core->offset);
../core/cmd_anal.c:				core->anal, core->offset,
../core/cmd_anal.c:				r_num_math (core->num, input + 1));
../core/cmd_anal.c:			r_anal_hint_unset_fail (core->anal, core->offset);
../core/cmd_anal.c:			r_anal_hint_set_size (core->anal, core->offset, atoi (input + 1));
../core/cmd_anal.c:			r_anal_hint_unset_size (core->anal, core->offset);
../core/cmd_anal.c:			r_anal_hint_set_syntax (core->anal, core->offset, input + 2);
../core/cmd_anal.c:			r_anal_hint_unset_syntax (core->anal, core->offset);
../core/cmd_anal.c:			r_anal_hint_set_opcode (core->anal, core->offset, input + 2);
../core/cmd_anal.c:			r_anal_hint_unset_opcode (core->anal, core->offset);
../core/cmd_anal.c:			r_anal_hint_set_esil (core->anal, core->offset, input + 2);
../core/cmd_anal.c:			r_anal_hint_unset_esil (core->anal, core->offset);
../core/cmd_anal.c:			r_anal_hint_set_opcode (core->anal, core->offset, atoi (input + 1));
../core/cmd_anal.c:			r_anal_hint_unset_opcode (core->anal, core->offset);
../core/cmd_anal.c:			r_anal_hint_set_pointer (core->anal, core->offset, r_num_math (core->num, input + 1));
../core/cmd_anal.c:			r_anal_hint_unset_pointer (core->anal, core->offset);
../core/cmd_anal.c:			ut64 addr = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:			r_core_anal_hint_print (core->anal, addr, '*');
../core/cmd_anal.c:			r_core_anal_hint_list (core->anal, input[0]);
../core/cmd_anal.c:		r_core_anal_hint_list (core->anal, input[0]);
../core/cmd_anal.c:				r_anal_hint_clear (core->anal);
../core/cmd_anal.c:					size = r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_anal.c:					addr = r_num_math (core->num, a0);
../core/cmd_anal.c:					addr = core->offset;
../core/cmd_anal.c:				r_anal_hint_del (core->anal, addr, size);
../core/cmd_anal.c:			r_anal_hint_clear (core->anal);
../core/cmd_anal.c:		r_agraph_add_node (core->graph, args[0], body);
../core/cmd_anal.c:		r_agraph_del_node (core->graph, args[0]);
../core/cmd_anal.c:		u = r_agraph_get_node (core->graph, args[0]);
../core/cmd_anal.c:		v = r_agraph_get_node (core->graph, args[1]);
../core/cmd_anal.c:			r_agraph_add_edge (core->graph, u, v);
../core/cmd_anal.c:			r_agraph_del_edge (core->graph, u, v);
../core/cmd_anal.c:		Sdb *db = r_agraph_get_sdb (core->graph);
../core/cmd_anal.c:		const char *cmd = r_config_get (core->config, "cmd.graph");
../core/cmd_anal.c:	case 'i': // "aggi" - open current core->graph in interactive mode
../core/cmd_anal.c:		RANode *ran = r_agraph_get_first_node (core->graph);
../core/cmd_anal.c:			r_agraph_set_title (core->graph, r_config_get (core->config, "graph.title"));
../core/cmd_anal.c:			r_agraph_set_curnode (core->graph, ran);
../core/cmd_anal.c:			core->graph->force_update_seek = true;
../core/cmd_anal.c:			core->graph->need_set_layout = true;
../core/cmd_anal.c:			core->graph->layout = r_config_get_i (core->config, "graph.layout");
../core/cmd_anal.c:			int ov = r_config_get_i (core->config, "scr.interactive");
../core/cmd_anal.c:			core->graph->need_update_dim = true;
../core/cmd_anal.c:			r_core_visual_graph (core, core->graph, NULL, true);
../core/cmd_anal.c:			r_config_set_i (core->config, "scr.interactive", ov);
../core/cmd_anal.c:		r_agraph_foreach (core->graph, agraph_print_node_dot, NULL);
../core/cmd_anal.c:		r_agraph_foreach_edge (core->graph, agraph_print_edge_dot, NULL);
../core/cmd_anal.c:		r_agraph_foreach (core->graph, agraph_print_node, NULL);
../core/cmd_anal.c:		r_agraph_foreach_edge (core->graph, agraph_print_edge, NULL);
../core/cmd_anal.c:		core->graph->can->linemode = r_config_get_i (core->config, "graph.linemode");
../core/cmd_anal.c:		core->graph->can->color = r_config_get_i (core->config, "scr.color");
../core/cmd_anal.c:		r_agraph_set_title (core->graph,
../core/cmd_anal.c:			r_config_get (core->config, "graph.title"));
../core/cmd_anal.c:		r_agraph_print (core->graph);
../core/cmd_anal.c:		r_agraph_reset (core->graph);
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, input + 1), 0);
../core/cmd_anal.c:		list = r_core_anal_graph_to (core, r_num_math (core->num, input + 1), 0);
../core/cmd_anal.c:				ut64 addr = input[2]? r_num_math (core->num, input + 2): core->offset;
../core/cmd_anal.c:			ut64 addr = input[2]? r_num_math (core->num, input + 2): UT64_MAX;
../core/cmd_anal.c:			ut64 addr = input[2]? r_num_math (core->num, input + 2): UT64_MAX;
../core/cmd_anal.c:			ut64 addr = input[2]? r_num_math (core->num, input + 1): UT64_MAX;
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, input + 1), R_CORE_ANAL_JSON);
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, input + 1), R_CORE_ANAL_KEYVALUE);
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, input + 1), R_CORE_ANAL_GRAPHLINES);
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, input + 1), 0);
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, input + 1),
../core/cmd_anal.c:		if (r_config_get_i (core->config, "graph.web")) {
../core/cmd_anal.c:			const char *cmd = r_config_get (core->config, "cmd.graph");
../core/cmd_anal.c:		r_core_anal_graph (core, r_num_math (core->num, arg? arg + 1: NULL),
../core/cmd_anal.c:	int cfg_debug = r_config_get_i (core->config, "cfg.debug");
../core/cmd_anal.c:			RDebugMap *map = r_debug_map_get (core->dbg, core->offset);
../core/cmd_anal.c:		} else if (core->io->va) {
../core/cmd_anal.c:			RIOSection *section = r_io_section_vget (core->io, core->offset);
../core/cmd_anal.c:			RIOMap *map = r_io_map_get (core->io, core->offset);
../core/cmd_anal.c:			from = core->offset;
../core/cmd_anal.c:			to = r_io_size (core->io) + (map? r_itv_end (map->itv) : 0);
../core/cmd_anal.c:		from = core->offset;
../core/cmd_anal.c:		to = core->offset + r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_anal.c:	if (to - from > r_io_size (core->io)) {
../core/cmd_anal.c:	int use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/cmd_anal.c:	bool verbose = r_config_get_i (core->config, "scr.prompt");
../core/cmd_anal.c:	int use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/cmd_anal.c:	bool verbose = r_config_get_i (core->config, "scr.prompt");
../core/cmd_anal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd_anal.c:		ls_foreach (core->io->sections, iter2, sec) {
../core/cmd_anal.c:	ls_foreach (core->io->sections, iter, sec) {
../core/cmd_anal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd_anal.c:	int fcns = r_list_length (core->anal->fcns);
../core/cmd_anal.c:	int strs = r_flag_count (core->flags, "str.*");
../core/cmd_anal.c:	int syms = r_flag_count (core->flags, "sym.*");
../core/cmd_anal.c:	int imps = r_flag_count (core->flags, "sym.imp.*");
../core/cmd_anal.c:	int xrfs = r_anal_xrefs_count (core->anal);
../core/cmd_anal.c:	r_anal_xrefs_from (core->anal, list, "xref", R_ANAL_REF_TYPE_DATA, UT64_MAX);
../core/cmd_anal.c:		if (r_io_is_valid_offset (core->io, ref->addr, false)) {
../core/cmd_anal.c:	RAsm *as = core ? core->assembler : NULL;
../core/cmd_anal.c:	return strstr (core->assembler->cur->name, "mips");
../core/cmd_anal.c:			r_anal_hint_set_bits (core->anal, to, 16);
../core/cmd_anal.c:			ut64 bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_anal.c:			r_anal_hint_set_bits (core->anal, from, bits);
../core/cmd_anal.c:#define seti(x,y) r_config_set_i(core->config, x, y);
../core/cmd_anal.c:#define geti(x) r_config_get_i(core->config, x);
../core/cmd_anal.c:	bool is_debug = r_config_get_i (core->config, "cfg.debug");
../core/cmd_anal.c:	if (core->assembler->bits == 64) {
../core/cmd_anal.c:		RList *list = r_core_get_boundaries_prot (core, 0, "io.maps"); //r_config_get (core->config, "search.in"));
../core/cmd_anal.c://			if (r_itv_contain (map->itv, core->offset)) {
../core/cmd_anal.c:		s = r_io_section_vget (core->io, core->offset);
../core/cmd_anal.c:	if (r_str_startswith (r_config_get (core->config, "asm.arch"), "x86")) {
../core/cmd_anal.c:			ut64 curseek = core->offset;
../core/cmd_anal.c:			r_cons_break_timeout (r_config_get_i (core->config, "anal.timeout"));
../core/cmd_anal.c:			char *dh_orig = core->dbg->h
../core/cmd_anal.c:					? strdup (core->dbg->h->name)
../core/cmd_anal.c:			if (core->io && core->io->desc && core->io->desc->plugin && !core->io->desc->plugin->isdbg) {
../core/cmd_anal.c:				int c = r_config_get_i (core->config, "anal.calls");
../core/cmd_anal.c:				r_config_set_i (core->config, "anal.calls", 1);
../core/cmd_anal.c:				r_config_set_i (core->config, "anal.calls", c);
../core/cmd_anal.c:				if (r_config_get_i (core->config, "anal.autoname")) {
../core/cmd_anal.c:					if (sdb_count (core->anal->sdb_zigns) > 0) {
../core/cmd_anal.c:		ut64 cur = core->offset;
../core/cmd_anal.c:		RIOSection *s = r_io_section_vget (core->io, cur);
../core/cmd_anal.c:			bool hasnext = r_config_get_i (core->config, "anal.hasnext");
../core/cmd_anal.c:			r_config_set_i (core->config, "anal.hasnext", 1);
../core/cmd_anal.c:			r_config_set_i (core->config, "anal.hasnext", hasnext);
../core/cmd_anal.c:			ut64 at = core->offset;
../core/cmd_anal.c:			ut64 from = r_num_get (core->num, "$S");
../core/cmd_anal.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);
../core/cmd_anal.c:	int i, wordsize = (core->assembler->bits == 64)? 8: 4;
../core/cmd_anal.c:	r_list_sort (core->anal->fcns, cmpaddr);
../core/cmd_anal.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/cmd_anal.c:	ut32 tbs = core->blocksize;
../core/cmd_anal.c:			ut64 off = core->offset;
../core/cmd_anal.c:				off = r_num_math (core->num, input+1);
../core/cmd_anal.c:				r_io_read_at (core->io, off - bufsz + prelude_sz, buf, bufsz);
../core/cmd_anal.c:				r_io_read_at (core->io, off - bufsz + prelude_sz, buf, bufsz);
../core/cmd_anal.c:		r_core_anal_fcn (core, core->offset, UT64_MAX, R_ANAL_REF_TYPE_NULL, 1);
../core/cmd_anal.c:		int ccl = input[1]? r_num_math (core->num, &input[2]): 0; //get cycles to look for
../core/cmd_anal.c:		int cr = r_config_get_i (core->config, "asm.cmtright");
../core/cmd_anal.c:		int fun = r_config_get_i (core->config, "asm.functions");
../core/cmd_anal.c:		int li = r_config_get_i (core->config, "asm.lines");
../core/cmd_anal.c:		int xr = r_config_get_i (core->config, "asm.xrefs");
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.cmtright", true);
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.functions", false);
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.lines", false);
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.xrefs", false);
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.cmtright", cr); //reset settings
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.functions", fun);
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.lines", li);
../core/cmd_anal.c:		r_config_set_i (core->config, "asm.xrefs", xr);
../core/cmd_anal.c:			a = r_num_math (core->num, input + 2);
../core/cmd_anal.c:			b = p? r_num_math (core->num, p + 1): default_depth;
../core/cmd_anal.c:			r_core_anal_data (core, core->offset, a, b, 0);
../core/cmd_anal.c:			r = r_anal_data_kind (core->anal,
../core/cmd_anal.c:					core->offset, core->block, core->blocksize);
../core/cmd_anal.c:			r_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 0);
../core/cmd_anal.c:			r_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 4);
../core/cmd_anal.c:			r_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 8);
../core/cmd_anal.c:		if (core->anal && core->anal->cur && core->anal->cur->cmd_ext) {
../core/cmd_anal.c:			return core->anal->cur->cmd_ext (core->anal, input + 1);
../core/cmd_anal.c:	if (tbs != core->blocksize) {
../core/cmd_cmp.c:	r_list_foreach (core->watchers, iter, w) {
../core/cmd_cmp.c:	r_io_read_at (core->io, addr, cmpw->ndata, size);
../core/cmd_cmp.c:	r_list_append (core->watchers, cmpw);
../core/cmd_cmp.c:	r_list_foreach_safe (core->watchers, iter, iter2, w) {
../core/cmd_cmp.c:			r_list_delete (core->watchers, iter);
../core/cmd_cmp.c:	r_list_foreach (core->watchers, iter, w) {
../core/cmd_cmp.c:	r_list_foreach (core->watchers, iter, w) {
../core/cmd_cmp.c:		r_io_read_at (core->io, w->addr, w->ndata, w->size);
../core/cmd_cmp.c:	return !r_list_empty (core->watchers);
../core/cmd_cmp.c:	r_list_foreach (core->watchers, iter, w) {
../core/cmd_cmp.c:	r_io_read_at (core->io, of, f, len);
../core/cmd_cmp.c:	r_io_read_at (core->io, od, d, len);
../core/cmd_cmp.c:	int headers = B_IS_SET (core->print->flags, R_PRINT_FLAGS_HEADER);
../core/cmd_cmp.c:		B_UNSET (core->print->flags, R_PRINT_FLAGS_HEADER);
../core/cmd_cmp.c:			r_print_hexdiff (core->print, of + i, f + i, of + i, f + i, min, 0);
../core/cmd_cmp.c:			r_print_hexdiff (core->print, of + i, f + i, od + i, d + i, min, 0);
../core/cmd_cmp.c:			r_print_hexdiff (core->print, od + i, d + i, of + i, f + i, min, 0);
../core/cmd_cmp.c:		B_SET (core->print->flags, R_PRINT_FLAGS_HEADER);
../core/cmd_cmp.c:				core->offset + i, i + 1,
../core/cmd_cmp.c:				core->offset + i);
../core/cmd_cmp.c:			addr = r_num_math (core->num, p);
../core/cmd_cmp.c:		addr = input[1]? r_num_math (core->num, input + 1): UT64_MAX;
../core/cmd_cmp.c:		addr = input[1]? r_num_math (core->num, input + 1): UT64_MAX;
../core/cmd_cmp.c:	int hascolor = r_config_get_i (core->config, "scr.color");
../core/cmd_cmp.c:	int cols = r_config_get_i (core->config, "hex.cols") * 2;
../core/cmd_cmp.c:	ut64 off = r_num_math (core->num, input);
../core/cmd_cmp.c:	ut8 *buf = calloc (core->blocksize + 32, 1);
../core/cmd_cmp.c:	r_core_read_at (core, off, buf, core->blocksize + 32);
../core/cmd_cmp.c:		for (i = j = 0; i < core->blocksize && j < core->blocksize;) {
../core/cmd_cmp.c:			r_asm_set_pc (core->assembler, core->offset + i);
../core/cmd_cmp.c:			(void) r_asm_disassemble (core->assembler, &op,
../core/cmd_cmp.c:				core->block + i, core->blocksize - i);
../core/cmd_cmp.c:			r_asm_set_pc (core->assembler, off + i);
../core/cmd_cmp.c:			(void) r_asm_disassemble (core->assembler, &op2,
../core/cmd_cmp.c:				buf + j, core->blocksize - j);
../core/cmd_cmp.c:				core->offset + i, op.buf_asm, colpad);
../core/cmd_cmp.c:		for (i = j = 0; i < core->blocksize && j < core->blocksize;) {
../core/cmd_cmp.c:			r_asm_set_pc (core->assembler, core->offset + i);
../core/cmd_cmp.c:			(void) r_asm_disassemble (core->assembler, &op,
../core/cmd_cmp.c:				core->block + i, core->blocksize - i);
../core/cmd_cmp.c:			r_asm_set_pc (core->assembler, off + i);
../core/cmd_cmp.c:			(void) r_asm_disassemble (core->assembler, &op2,
../core/cmd_cmp.c:				buf + j, core->blocksize - j);
../core/cmd_cmp.c:					core->offset + i, op.buf_asm);
../core/cmd_cmp.c:					core->offset + i, op.buf_asm);
../core/cmd_cmp.c:			if (r_fs_check (core->fs, path)) {
../core/cmd_cmp.c:		val = radare_compare (core, core->block, (ut8 *) input + 2,
../core/cmd_cmp.c:		val = radare_compare (core, core->block, (ut8 *) str, len, 0);
../core/cmd_cmp.c:		ret = r_hex_bin2str (core->block, strlen (input) / 2, (char *) buf);
../core/cmd_cmp.c:			val = radare_compare (core, core->block, buf, ret, mode);
../core/cmd_cmp.c:		buf = malloc (core->blocksize);
../core/cmd_cmp.c:			if (!r_io_read_at (core->io, r_num_math (core->num,
../core/cmd_cmp.c:					    input + 1), buf, core->blocksize)) {
../core/cmd_cmp.c:				val = radare_compare (core, core->block, buf, ret, mode);
../core/cmd_cmp.c:		buf = (ut8 *) malloc (core->blocksize);
../core/cmd_cmp.c:			if (fread (buf, 1, core->blocksize, fd) < 1) {
../core/cmd_cmp.c:				val = radare_compare (core, core->block,
../core/cmd_cmp.c:					buf, core->blocksize, 0);
../core/cmd_cmp.c:		v16 = (ut16) r_num_math (core->num, input + 1);
../core/cmd_cmp.c:		val = radare_compare (core, core->block, (ut8 *) &v16, sizeof (v16), 0);
../core/cmd_cmp.c:		v32 = (ut32) r_num_math (core->num, input + 1);
../core/cmd_cmp.c:		val = radare_compare (core, core->block, (ut8 *) &v32, sizeof (v32), 0);
../core/cmd_cmp.c:		v64 = (ut64) r_num_math (core->num, input + 1);
../core/cmd_cmp.c:		val = radare_compare (core, core->block, (ut8 *) &v64, sizeof (v64), 0);
../core/cmd_cmp.c:			ut32 oflags = core->print->flags;
../core/cmd_cmp.c:				core->print->flags |= R_PRINT_FLAGS_DIFFOUT;
../core/cmd_cmp.c:				addr = r_num_math (core->num, input + 2);
../core/cmd_cmp.c:					addr = r_num_math (core->num, input + 2);
../core/cmd_cmp.c:			int col = core->cons->columns > 123;
../core/cmd_cmp.c:			ut8 *b = malloc (core->blocksize);
../core/cmd_cmp.c:				memset (b, 0xff, core->blocksize);
../core/cmd_cmp.c:				r_core_read_at (core, addr, b, core->blocksize);
../core/cmd_cmp.c:				r_print_hexdiff (core->print, core->offset, core->block,
../core/cmd_cmp.c:					addr, b, core->blocksize, col);
../core/cmd_cmp.c:			core->print->flags = oflags;
../core/cmd_cmp.c:			r_anal_diff_setup (core->anal, true, -1, -1);
../core/cmd_cmp.c:			r_anal_diff_setup (core->anal, true, -1, -1);
../core/cmd_cmp.c:			r_core_gdiff_fcn (core, core->offset,
../core/cmd_cmp.c:				r_num_math (core->num, input + 2));
../core/cmd_cmp.c:			r_anal_diff_setup (core->anal, false, -1, -1);
../core/cmd_cmp.c:		core2->io->va = core->io->va;
../core/cmd_cmp.c:		core2->anal->split = core->anal->split;
../core/cmd_cmp.c:		r_anal_diff_setup (core->anal, diffops, -1, -1);
../core/cmd_cmp.c:			r_config_get_i (core->config, "bin.baddr"));
../core/cmd_cmp.c:			radare_compare_unified (core, core->offset,
../core/cmd_cmp.c:				r_num_math (core->num, input + 1),
../core/cmd_cmp.c:				core->blocksize);
../core/cmd_cmp.c:			switch (r_config_get_i (core->config, "asm.bits")) {
../core/cmd_cmp.c:			ut8 n = (ut8) r_num_math (core->num, input + 2);
../core/cmd_cmp.c:			if (core->block[0] == n) {
../core/cmd_cmp.c:				r_cons_printf ("0x%08"PFMT64x "\n", core->offset);
../core/cmd_cmp.c:			ut16 *b = (ut16 *) core->block, n = (ut16) r_num_math (core->num, input + 2);
../core/cmd_cmp.c:				r_cons_printf ("0x%08"PFMT64x "\n", core->offset);
../core/cmd_cmp.c:			ut32 *b = (ut32 *) core->block, n = (ut32) r_num_math (core->num, input + 2);
../core/cmd_cmp.c:				r_cons_printf ("0x%08"PFMT64x "\n", core->offset);
../core/cmd_cmp.c:			ut64 *b = (ut64 *) core->block, n = (ut64) r_num_math (core->num, input + 2);
../core/cmd_cmp.c:				r_cons_printf ("0x%08"PFMT64x "\n", core->offset);
../core/cmd_cmp.c:		core->num->value = val;
../core/cmd_debug.c:	"dg", " <file>", "Generate a core-file (WIP)",
../core/cmd_debug.c:			int sig = (int)r_num_math (core->num, sysnumstr);
../core/cmd_debug.c:				sig = r_syscall_get_num (core->anal->syscall, sysnumstr);
../core/cmd_debug.c:	r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:	r_debug_continue_syscalls (core->dbg, syscalls, count);
../core/cmd_debug.c:		rname = r_reg_get_name (core->dbg->reg, role);
../core/cmd_debug.c:	r = r_reg_get (core->dbg->reg, rname , -1);
../core/cmd_debug.c:			off = r_reg_get_value_big (core->dbg->reg, r, &value);
../core/cmd_debug.c:			off = r_reg_get_value (core->dbg->reg, r);
../core/cmd_debug.c:	const char *gfont = r_config_get (core->config, "graph.font");
../core/cmd_debug.c:	ut64 off = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:			core->break_loop = true;
../core/cmd_debug.c:		if (r_debug_is_dead (core->dbg)) {
../core/cmd_debug.c:			core->break_loop = true;
../core/cmd_debug.c:		r_debug_step (core->dbg, 1);
../core/cmd_debug.c:		off = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:	if (!core || !esilstr || !core->dbg || !core->dbg->anal \
../core/cmd_debug.c:			|| !core->dbg->anal->esil) {
../core/cmd_debug.c:		eprintf ("Not initialized %p. Run 'aei' first.\n", core->anal->esil);
../core/cmd_debug.c:			core->break_loop = true;
../core/cmd_debug.c:		if (r_debug_is_dead (core->dbg)) {
../core/cmd_debug.c:			core->break_loop = true;
../core/cmd_debug.c:		r_debug_step (core->dbg, 1);
../core/cmd_debug.c:		r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false);
../core/cmd_debug.c:		if (r_anal_esil_condition (core->anal->esil, esilstr)) {
../core/cmd_debug.c:	if (!core || !instr|| !core->dbg) {
../core/cmd_debug.c:		if (r_debug_is_dead (core->dbg)) {
../core/cmd_debug.c:		r_debug_step (core->dbg, 1);
../core/cmd_debug.c:		r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false);
../core/cmd_debug.c:		pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:		r_asm_set_pc (core->assembler, pc);
../core/cmd_debug.c:		r_io_read_at (core->io, pc, buf, sizeof (buf));
../core/cmd_debug.c:		ret = r_asm_disassemble (core->assembler, &asmop, buf, sizeof (buf));
../core/cmd_debug.c:	if (!core || !instr || !core->dbg) {
../core/cmd_debug.c:		if (r_debug_is_dead (core->dbg)) {
../core/cmd_debug.c:		r_debug_step (core->dbg, 1);
../core/cmd_debug.c:		r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false);
../core/cmd_debug.c:		pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:		list = r_flag_get_list (core->flags, pc);
../core/cmd_debug.c:	ut64 off, now = r_debug_reg_get (core->dbg, "SP");
../core/cmd_debug.c:		r_debug_step_over (core->dbg, 1);
../core/cmd_debug.c:		off = r_debug_reg_get (core->dbg, "SP");
../core/cmd_debug.c:	ut64 off = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:	if (r_bin_addr2line (core->bin, off, file, sizeof (file), &line)) {
../core/cmd_debug.c:		r_debug_step (core->dbg, 1);
../core/cmd_debug.c:		off = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:		if (!r_bin_addr2line (core->bin, off, file2, sizeof (file2), &line2)) {
../core/cmd_debug.c:		eprintf ("Selected: %d %d\n", core->dbg->pid, core->dbg->tid);
../core/cmd_debug.c:		r_debug_pid_list (core->dbg, core->dbg->pid, 0);
../core/cmd_debug.c:			r_debug_detach (core->dbg, r_num_math (core->num, input + 2));
../core/cmd_debug.c:			r_debug_detach (core->dbg, core->dbg->pid);
../core/cmd_debug.c:		if (core->dbg->forked_pid != -1) {
../core/cmd_debug.c:				eprintf ("dp %d\n", core->dbg->forked_pid);
../core/cmd_debug.c:				r_debug_select (core->dbg, core->dbg->forked_pid, core->dbg->tid);
../core/cmd_debug.c:				core->dbg->main_pid = core->dbg->forked_pid;
../core/cmd_debug.c:				core->dbg->n_threads = 0;
../core/cmd_debug.c:				core->dbg->forked_pid = -1;
../core/cmd_debug.c:			r_debug_kill (core->dbg, 0, false, sig);
../core/cmd_debug.c:		eprintf ("TODO: debug_fork: %d\n", r_debug_child_fork (core->dbg));
../core/cmd_debug.c:			r_debug_thread_list (core->dbg, core->dbg->pid);
../core/cmd_debug.c:			r_debug_thread_list (core->dbg, atoi (input + 2));
../core/cmd_debug.c:			r_debug_select (core->dbg, core->dbg->pid,
../core/cmd_debug.c:					(int) r_num_math (core->num, input + 3));
../core/cmd_debug.c:			eprintf ("TODO: debug_clone: %d\n", r_debug_child_clone (core->dbg));
../core/cmd_debug.c:			r_debug_attach (core->dbg, (int) r_num_math (
../core/cmd_debug.c:						core->num, input + 2));
../core/cmd_debug.c:			if (core->file && core->io) {
../core/cmd_debug.c:				r_debug_attach (core->dbg,
../core/cmd_debug.c:						r_io_fd_get_pid (core->io, core->file->fd));
../core/cmd_debug.c:		r_debug_select (core->dbg, core->dbg->pid, core->dbg->tid);
../core/cmd_debug.c:		r_config_set_i (core->config, "dbg.swstep",
../core/cmd_debug.c:				(core->dbg->h && !core->dbg->h->canstep));
../core/cmd_debug.c:		r_core_cmdf (core, "=!pid %d", core->dbg->pid);
../core/cmd_debug.c:		if (core->file && core->io) {
../core/cmd_debug.c:			r_debug_select (core->dbg, r_io_fd_get_pid (core->io, core->file->fd),
../core/cmd_debug.c:					r_io_fd_get_tid (core->io, core->file->fd));
../core/cmd_debug.c:		r_debug_select (core->dbg,
../core/cmd_debug.c:				(int) r_num_math (core->num, input + 2), core->dbg->tid);
../core/cmd_debug.c:		core->dbg->main_pid = r_num_math (core->num, input + 2);
../core/cmd_debug.c:		r_debug_pid_list (core->dbg, 0, 0);
../core/cmd_debug.c:		r_debug_pid_list (core->dbg, core->dbg->pid, 'j');
../core/cmd_debug.c:			int pid = (input[2] == ' ')? atoi (input + 2): core->dbg->pid;
../core/cmd_debug.c:		r_debug_pid_list (core->dbg,
../core/cmd_debug.c:				(int) R_MAX (0, (int)r_num_math (core->num, input + 2)), 0);
../core/cmd_debug.c:	ut64 addr, len = r_num_math (core->num, input);
../core/cmd_debug.c:		r_bp_traptrace_list (core->dbg->bp);
../core/cmd_debug.c:				core->offset, core->offset+len);
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		r_bp_traptrace_reset (core->dbg->bp, true);
../core/cmd_debug.c:		r_bp_traptrace_add (core->dbg->bp, core->offset, core->offset+len);
../core/cmd_debug.c:		r_bp_traptrace_enable (core->dbg->bp, true);
../core/cmd_debug.c:			r_debug_continue (core->dbg);
../core/cmd_debug.c:			addr = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:			r_anal_op (core->anal, &analop, addr, buf, sizeof (buf));
../core/cmd_debug.c:		} while (r_bp_traptrace_at (core->dbg->bp, addr, analop.size));
../core/cmd_debug.c:		r_bp_traptrace_enable (core->dbg->bp, false);
../core/cmd_debug.c:	RDebug *dbg = core->dbg;
../core/cmd_debug.c:	ut32 oflags = core->print->flags;
../core/cmd_debug.c:	int col = core->cons->columns>123;
../core/cmd_debug.c:	core->print->flags |= R_PRINT_FLAGS_DIFFOUT;
../core/cmd_debug.c:			r_print_hexdiff (core->print,
../core/cmd_debug.c:	core->print->flags = oflags;
../core/cmd_debug.c:				file = r_str_newf ("0x%08"PFMT64x".dump", core->offset);
../core/cmd_debug.c:			snap = r_debug_snap_get (core->dbg, core->offset);
../core/cmd_debug.c:				r_debug_snap (core->dbg, core->offset);
../core/cmd_debug.c:				snap = r_debug_snap_get (core->dbg, core->offset);
../core/cmd_debug.c:				eprintf ("Unable to find a snapshot for 0x%08"PFMT64x"\n", core->offset);
../core/cmd_debug.c:				file = r_str_newf ("0x%08"PFMT64x".dump", core->offset);
../core/cmd_debug.c:			snap = r_debug_snap_get (core->dbg, core->offset);
../core/cmd_debug.c:				eprintf ("Unable to find a snapshot for 0x%08"PFMT64x"\n", core->offset);
../core/cmd_debug.c:			r_debug_snap_delete (core->dbg, -1);
../core/cmd_debug.c:			r_debug_snap_delete (core->dbg, r_num_math (core->num, input + 1));
../core/cmd_debug.c:		r_debug_snap (core->dbg, r_num_math (core->num, input + 1));
../core/cmd_debug.c:		r_debug_snap_set_idx (core->dbg, atoi (input + 1));
../core/cmd_debug.c:		r_debug_snap_comment (core->dbg, atoi (input + 1), strchr (input, ' '));
../core/cmd_debug.c:		r_debug_snap_all (core->dbg, 0);
../core/cmd_debug.c:		r_debug_snap_all (core->dbg, R_IO_RW);
../core/cmd_debug.c:		r_debug_snap_list (core->dbg, -1, input[0]);
../core/cmd_debug.c:		if (!strcmp (r_config_get (core->config, "asm.arch"), "avr")) {
../core/cmd_debug.c:			const char *pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_debug.c:			RRegItem *reg = r_reg_get (core->anal->reg, pcname, 0);
../core/cmd_debug.c:				if (core->assembler->bits != reg->size)
../core/cmd_debug.c:	return pcbits ? pcbits : core->anal->bits;
../core/cmd_debug.c:	r_debug_map_sync (core->dbg); // update process memory maps
../core/cmd_debug.c:	ut64 addr = core->offset;
../core/cmd_debug.c:	int ret = r_list_empty(core->dbg->maps)? false: true;
../core/cmd_debug.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:			r_io_read_at (core->io, map->addr, buf, map->size);
../core/cmd_debug.c:	ut64 addr = core->offset;
../core/cmd_debug.c:	list = r_debug_modules_list (core->dbg);
../core/cmd_debug.c:	r_bin_load (core->bin, path, 0, 0, 0, -1, false);
../core/cmd_debug.c:	sects = r_bin_get_sections (core->bin);
../core/cmd_debug.c:			err = r_io_read_at (core->io, s->vaddr + 16, (ut8 *) buf, 20);
../core/cmd_debug.c:	r_debug_map_sync (core->dbg);
../core/cmd_debug.c:	// RList *list = r_debug_native_modules_get (core->dbg);
../core/cmd_debug.c:	RList *list = r_debug_modules_list (core->dbg);
../core/cmd_debug.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:	r_debug_map_sync (core->dbg);
../core/cmd_debug.c:	RList *list = r_debug_modules_list (core->dbg);
../core/cmd_debug.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:	const char *m = r_config_get (core->config, "dbg.malloc");
../core/cmd_debug.c:		if (core->assembler->bits == 64) {
../core/cmd_debug.c:		if (core->assembler->bits == 64) {
../core/cmd_debug.c:	ut64 addr = core->offset;
../core/cmd_debug.c:		r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:					addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:					size = r_num_math (core->num, p);
../core/cmd_debug.c:					r_debug_map_protect (core->dbg, addr, size, perms);
../core/cmd_debug.c:				r_debug_map_sync (core->dbg); // update process memory maps
../core/cmd_debug.c:				r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:					if (core->offset >= map->addr  && core->offset < map->addr_end) {
../core/cmd_debug.c:					r_debug_map_protect (core->dbg, addr, size, perms);
../core/cmd_debug.c:		r_debug_map_sync (core->dbg); // update process memory maps
../core/cmd_debug.c:		r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:				r_io_write_at (core->io, map->addr, (const ut8*)buf, sz);
../core/cmd_debug.c:					addr = r_num_math (core->num, a0);
../core/cmd_debug.c:						r_bin_set_baddr (core->bin, map->addr);
../core/cmd_debug.c:						r_bin_set_baddr (core->bin, baddr);
../core/cmd_debug.c:					RList *symbols = r_bin_get_symbols (core->bin);
../core/cmd_debug.c:						r_bin_set_baddr (core->bin, map->addr);
../core/cmd_debug.c:					addr = r_num_math (core->num, a0);
../core/cmd_debug.c:			r_debug_map_sync (core->dbg); // update process memory maps
../core/cmd_debug.c:			RList *list = r_debug_modules_list (core->dbg);
../core/cmd_debug.c:				addr = r_num_math (core->num, input + 1);
../core/cmd_debug.c:				size = r_num_math (core->num, p);
../core/cmd_debug.c:				r_debug_map_alloc (core->dbg, addr, size);
../core/cmd_debug.c:		addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:		r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:				r_debug_map_dealloc(core->dbg, map);
../core/cmd_debug.c:				r_debug_map_sync (core->dbg);
../core/cmd_debug.c:		r_debug_map_sync (core->dbg); // update process memory maps
../core/cmd_debug.c:		r_debug_map_list (core->dbg, core->offset, input[0]);
../core/cmd_debug.c:		r_debug_map_sync (core->dbg);
../core/cmd_debug.c:		r_debug_map_list_visual (core->dbg, core->offset,
../core/cmd_debug.c:				r_config_get_i (core->config, "scr.color"),
../core/cmd_debug.c:	int bits = core->assembler->bits;
../core/cmd_debug.c:	r_debug_map_sync (core->dbg);
../core/cmd_debug.c:		value = r_reg_get_value (core->dbg->reg, r);
../core/cmd_debug.c:		r_cons_printf ("%d %s %s\n", i, r_reg_get_role (i), core->anal->reg->name[i]);
../core/cmd_debug.c:		RRegSet *rs = &core->anal->reg->regset[i];
../core/cmd_debug.c:		if (core->dbg->reg->reg_profile_str) {
../core/cmd_debug.c:			r_cons_println (core->dbg->reg->reg_profile_str);
../core/cmd_debug.c:		r_reg_set_profile (core->dbg->reg, str+2);
../core/cmd_debug.c:		RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../core/cmd_debug.c:			ut64 n = r_num_math (core->num, str+2);
../core/cmd_debug.c:			RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../core/cmd_debug.c:			RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../core/cmd_debug.c:				if (core->dbg->reg->name[i]) {
../core/cmd_debug.c:							core->dbg->reg->name[i]);
../core/cmd_debug.c:				r_list_foreach (core->dbg->reg->regset[i].regs, iter, r) {
../core/cmd_debug.c:	r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false); //R_REG_TYPE_GPR, false);
../core/cmd_debug.c:		r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, str[0], use_color? Color_GREEN: NULL);
../core/cmd_debug.c:		off = r_debug_reg_get_err (core->dbg, str + 1, &err, &value);
../core/cmd_debug.c:		core->num->value = off;
../core/cmd_debug.c:			core->num->value = 0;
../core/cmd_debug.c:	int bits = (core->dbg->bits & R_SYS_BITS_64)? 64: 32;
../core/cmd_debug.c:	int use_colors = r_config_get_i (core->config, "scr.color");
../core/cmd_debug.c:#define ConsP(x) (core->cons && core->cons->pal.x)? core->cons->pal.x
../core/cmd_debug.c:		if (core->dbg->reg->reg_profile_cmt) {
../core/cmd_debug.c:			r_cons_println (core->dbg->reg->reg_profile_cmt);
../core/cmd_debug.c:		r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, '-', 0);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false); //R_REG_TYPE_GPR, false);
../core/cmd_debug.c:			off = r_debug_reg_get (core->dbg, p);
../core/cmd_debug.c:			//		r = r_reg_get (core->dbg->reg, str+1, 0);
../core/cmd_debug.c:			core->num->value = off;
../core/cmd_debug.c:			//r_reg_get_value (core->dbg->reg, r));
../core/cmd_debug.c:					RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../core/cmd_debug.c:			ut8 *buf = r_reg_get_bytes (core->dbg->reg, type, &len);
../core/cmd_debug.c:				r_print_bytes (core->print, buf, len, "%02x");
../core/cmd_debug.c:					r_print_hexdump (core->print, 0ll, buf, len, 8, 1, 1);
../core/cmd_debug.c:					r_print_hexdump (core->print, 0ll, buf, len, 16, 2, 1);
../core/cmd_debug.c:					r_print_hexdump (core->print, 0ll, buf, len, 32, 4, 1);
../core/cmd_debug.c:					r_print_hexdump (core->print, 0ll, buf, len, 64, 8, 1);
../core/cmd_debug.c:					if (core->assembler->bits == 64) {
../core/cmd_debug.c:						r_print_hexdump (core->print, 0ll, buf, len, 64, 8, 1);
../core/cmd_debug.c:						r_print_hexdump (core->print, 0ll, buf, len, 32, 4, 1);
../core/cmd_debug.c:				r = r_reg_cond_get (core->dbg->reg, name);
../core/cmd_debug.c:					RRegFlags* rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../core/cmd_debug.c:						int o = r_reg_cond_bits (core->dbg->reg, id, rf);
../core/cmd_debug.c:						core->num->value = o;
../core/cmd_debug.c:				RRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../core/cmd_debug.c:									r_reg_cond_bits (core->dbg->reg, i, rf));
../core/cmd_debug.c:									r_reg_cond_bits (core->dbg->reg, i, rf),
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, false);
../core/cmd_debug.c:			r_debug_drx_list (core->dbg);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, false);
../core/cmd_debug.c:			r_debug_drx_unset (core->dbg, atoi (str + 2));
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, true);
../core/cmd_debug.c:					  n = (char)r_num_math (core->num, arg(0));
../core/cmd_debug.c:					  off = r_num_math (core->num, arg(1));
../core/cmd_debug.c:					  len = (int)r_num_math (core->num, arg(2));
../core/cmd_debug.c:						  r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, false);
../core/cmd_debug.c:						  r_debug_drx_set (core->dbg, n, 0, 0, 0, 0);
../core/cmd_debug.c:						  r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, true);
../core/cmd_debug.c:						  r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, false);
../core/cmd_debug.c:						  r_debug_drx_set (core->dbg, n, off, len, rwx, 0);
../core/cmd_debug.c:						  r_debug_reg_sync (core->dbg, R_REG_TYPE_DRX, true);
../core/cmd_debug.c:						core->dbg->reg->regset[0].pool));
../core/cmd_debug.c:			r_reg_arena_pop (core->dbg->reg);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, true);
../core/cmd_debug.c:			r_reg_arena_push (core->dbg->reg);
../core/cmd_debug.c:					size = r_num_math (core->num, q);
../core/cmd_debug.c:				word = r_num_math (core->num, p);
../core/cmd_debug.c:			RRegItem *item = r_reg_get (core->dbg->reg, name, -1);
../core/cmd_debug.c:					ut64 val = r_num_math (core->num, eq);
../core/cmd_debug.c:					r_reg_set_pack (core->dbg->reg, item, word, size, val);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, true);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_MMX, true);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_MMX, false);
../core/cmd_debug.c:					ut64 res = r_reg_get_pack (core->dbg->reg, item, word, size);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, -R_REG_TYPE_MMX, false);
../core/cmd_debug.c:		//r_debug_drx_list (core->dbg);
../core/cmd_debug.c:		r_debug_reg_sync (core->dbg, -R_REG_TYPE_FPU, false);
../core/cmd_debug.c:		//r_debug_drx_list (core->dbg);
../core/cmd_debug.c:			RRegItem *item = r_reg_get (core->dbg->reg, name, -1);
../core/cmd_debug.c:					r_reg_set_double (core->dbg->reg, item, val);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, true);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_FPU, true);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_FPU, false);
../core/cmd_debug.c:					long double res = r_reg_get_double (core->dbg->reg, item);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, -R_REG_TYPE_FPU, false);
../core/cmd_debug.c:			const char *regname = r_reg_get_name (core->dbg->reg, role);
../core/cmd_debug.c:					size = core->dbg->bits * 8;
../core/cmd_debug.c:				r_debug_reg_sync (core->dbg, type, false);
../core/cmd_debug.c:				r_debug_reg_list (core->dbg, type, size, rad, use_color);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, type, false);
../core/cmd_debug.c:					r_debug_reg_list (core->dbg, type, size, rad, use_color);
../core/cmd_debug.c:			name = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (foo));
../core/cmd_debug.c:		r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, 3, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_debug.c:		r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, 0, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_debug.c:			if (r_config_get_i (core->config, "cfg.debug")) {
../core/cmd_debug.c:				if (r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false)) {
../core/cmd_debug.c:						r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, 2, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:					r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, 2, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:						r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits2, 2, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:				} //else eprintf ("cannot retrieve registers from pid %d\n", core->dbg->pid);
../core/cmd_debug.c:				RReg *orig = core->dbg->reg;
../core/cmd_debug.c:				core->dbg->reg = core->anal->reg;
../core/cmd_debug.c:					r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, 2, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:				r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, 2, use_color); // xxx detect which one is current usage
../core/cmd_debug.c:				core->dbg->reg = orig;
../core/cmd_debug.c:		if (r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false)) {
../core/cmd_debug.c:			r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, '*', use_color);
../core/cmd_debug.c:				r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits2, '*', use_color);
../core/cmd_debug.c:			r_flag_space_pop (core->flags);
../core/cmd_debug.c:		r_core_debug_rr (core, core->dbg->reg);
../core/cmd_debug.c:		if (r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false)) {
../core/cmd_debug.c:			int pcbits = core->anal->bits;
../core/cmd_debug.c:			const char *pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/cmd_debug.c:			RRegItem *reg = r_reg_get (core->anal->reg, pcname, 0);
../core/cmd_debug.c:				if (core->assembler->bits != reg->size) {
../core/cmd_debug.c:			r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, str[0], use_color);
../core/cmd_debug.c:			eprintf ("cannot retrieve registers from pid %d\n", core->dbg->pid);
../core/cmd_debug.c:			regname = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (string));
../core/cmd_debug.c:			r = r_reg_get (core->dbg->reg, regname, -1); //R_REG_TYPE_GPR);
../core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../core/cmd_debug.c:					r_reg_set_bvalue (core->dbg->reg, r, arg+1);
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);
../core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../core/cmd_debug.c:					r_reg_set_value (core->dbg->reg, r,
../core/cmd_debug.c:							r_num_math (core->num, arg+1));
../core/cmd_debug.c:					r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);
../core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../core/cmd_debug.c:			r_debug_reg_list (core->dbg, R_REG_TYPE_GPR, size, str[0], use_color);
../core/cmd_debug.c:	if (!r_config_get_i (core->config, "dbg.bpinmaps")) {
../core/cmd_debug.c:		return core->num->value = 1;
../core/cmd_debug.c:	r_debug_map_sync (core->dbg);
../core/cmd_debug.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_debug.c:			return core->num->value = 1;
../core/cmd_debug.c:	return core->num->value = 0;
../core/cmd_debug.c:	const char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);
../core/cmd_debug.c:	const char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);
../core/cmd_debug.c:	RReg *r = core->anal->reg;
../core/cmd_debug.c:		RFlagItem *fi = r_flag_get_at (core->flags, f->addr, true);
../core/cmd_debug.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, f->addr, 0);
../core/cmd_debug.c:	const char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);
../core/cmd_debug.c:	const char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);
../core/cmd_debug.c:	ut64 dsp = r_reg_getv (core->anal->reg, sp);
../core/cmd_debug.c:	ut64 dbp = r_reg_getv (core->anal->reg, bp);
../core/cmd_debug.c:	RDebugMap *map = r_debug_map_get (core->dbg, dsp);
../core/cmd_debug.c:	int tid_orig = core->dbg->tid;
../core/cmd_debug.c:			th_list = r_debug_threads_get (core->dbg, core->dbg->pid);
../core/cmd_debug.c:			addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:			r_debug_select (core->dbg, core->dbg->pid, th->pid);
../core/cmd_debug.c:		list = r_debug_frames (core->dbg, addr);
../core/cmd_debug.c:			RFlagItem *f = r_flag_get_at (core->flags, frame->addr, true);
../core/cmd_debug.c:			f = r_flag_get_at (core->flags, frame->addr, true);
../core/cmd_debug.c:				f = r_flag_get_at (core->flags, frame->addr - 1, true);
../core/cmd_debug.c:			if (core->dbg->bits & R_SYS_BITS_64) {
../core/cmd_debug.c:			} else if (core->dbg->bits & R_SYS_BITS_32) {
../core/cmd_debug.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, frame->addr, 0);
../core/cmd_debug.c:		r_debug_select (core->dbg, core->dbg->pid, tid_orig);
../core/cmd_debug.c:	int i, hwbp = r_config_get_i (core->config, "dbg.hwbp");
../core/cmd_debug.c:	addr = p? r_num_math (core->num, p + 1): UT64_MAX;
../core/cmd_debug.c:			ut64 addr = r_num_tail (core->num, core->offset, input + 2);
../core/cmd_debug.c:				bpi = r_debug_bp_add (core->dbg, addr, hwbp, false, 0, NULL, 0);
../core/cmd_debug.c:			bpi = r_bp_get_at (core->dbg->bp, core->offset);
../core/cmd_debug.c:		RList *symbols = r_bin_get_symbols (core->bin);
../core/cmd_debug.c:				if (r_anal_noreturn_at (core->anal, symbol->vaddr)) {
../core/cmd_debug.c:					bpi = r_debug_bp_add (core->dbg, symbol->vaddr, hwbp, false, 0, NULL, 0);
../core/cmd_debug.c:			list = r_debug_frames (core->dbg, addr);
../core/cmd_debug.c:			list = r_debug_frames (core->dbg, addr);
../core/cmd_debug.c:				r_bp_set_trace_all (core->dbg->bp,true);
../core/cmd_debug.c:			} else if (!r_bp_set_trace (core->dbg->bp, addr, true)) {
../core/cmd_debug.c:				r_bp_set_trace_all (core->dbg->bp, false);
../core/cmd_debug.c:			} else if (!r_bp_set_trace (core->dbg->bp, addr, false)) {
../core/cmd_debug.c:			bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:				addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:			list = r_debug_frames (core->dbg, addr);
../core/cmd_debug.c:				addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:			list = r_debug_frames (core->dbg, addr);
../core/cmd_debug.c:				addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:			list = r_debug_frames (core->dbg, addr);
../core/cmd_debug.c:			core->dbg->bp->delta = (st64)r_num_math (core->num, input + 2);
../core/cmd_debug.c:			r_cons_printf ("%"PFMT64d"\n", core->dbg->bp->delta);
../core/cmd_debug.c:			delta = (ut64)r_num_math (core->num, strtok (NULL, ""));
../core/cmd_debug.c:			bpi = r_debug_bp_add (core->dbg, 0, hwbp, false, 0, module, delta);
../core/cmd_debug.c:	case 'j': r_bp_list (core->dbg->bp, 'j'); break;
../core/cmd_debug.c:	case '*': r_bp_list (core->dbg->bp, 1); break;
../core/cmd_debug.c:	case '\0': r_bp_list (core->dbg->bp, 0); break;
../core/cmd_debug.c:		if (input[2] == '*') r_bp_del_all (core->dbg->bp);
../core/cmd_debug.c:		else r_bp_del (core->dbg->bp, r_num_math (core->num, input + 2));
../core/cmd_debug.c:					addr = r_num_math (core->num, inp);
../core/cmd_debug.c:					bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:					addr = r_num_math (core->num, inp);
../core/cmd_debug.c:					bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:		addr = r_num_math (core->num, input + 2);
../core/cmd_debug.c:		bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:			r_bp_del (core->dbg->bp, addr);
../core/cmd_debug.c:			bpi = r_debug_bp_add (core->dbg, addr, hwbp, false, 0, NULL, 0);
../core/cmd_debug.c:		r_bp_enable (core->dbg->bp, r_num_math (core->num, input + 2), true);
../core/cmd_debug.c:		bpi = r_bp_get_at (core->dbg->bp, core->offset);
../core/cmd_debug.c:						"0x%08"PFMT64x"\n", core->offset);
../core/cmd_debug.c:		if (*p == '*') r_bp_enable_all (core->dbg->bp,true);
../core/cmd_debug.c:		else r_bp_enable (core->dbg->bp, r_num_math (core->num, input + 2), true);
../core/cmd_debug.c:		if (*p == '*') r_bp_enable_all (core->dbg->bp, false);
../core/cmd_debug.c:		r_bp_enable (core->dbg->bp, r_num_math (core->num, input + 2), false);
../core/cmd_debug.c:			r_bp_plugin_list (core->dbg->bp);
../core/cmd_debug.c:				if (!r_bp_use (core->dbg->bp, input + 3, core->anal->bits)) {
../core/cmd_debug.c:				if (!r_bp_plugin_del (core->dbg->bp, input + 3)) {
../core/cmd_debug.c:						addr = r_num_math (core->num, inp);
../core/cmd_debug.c:						bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:			r_bp_del (core->dbg->bp, r_num_math (core->num, p + 1));
../core/cmd_debug.c:			addr = r_num_math (core->num, DB_ARG(0));
../core/cmd_debug.c:				bpi = r_debug_bp_add (core->dbg, addr, hwbp, watch, rw, NULL, 0);
../core/cmd_debug.c:						RFlagItem *f = r_flag_get_i2 (core->flags, addr);
../core/cmd_debug.c:			for (i = 0;i < core->dbg->bp->bps_idx_count; i++) {
../core/cmd_debug.c:				if ((bpi = core->dbg->bp->bps_idx[i])) {
../core/cmd_debug.c:					ut64 addr = r_num_math (core->num, p);
../core/cmd_debug.c:					bpi = r_bp_get_index (core->dbg->bp, addr);
../core/cmd_debug.c:			if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../core/cmd_debug.c:			if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../core/cmd_debug.c:			if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../core/cmd_debug.c:				if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../core/cmd_debug.c:				if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../core/cmd_debug.c:				if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../core/cmd_debug.c:		RFlagItem *f = r_flag_get_at (_core->flags, tn->addr, true);
../core/cmd_debug.c:	bool trace_libs = r_config_get_i (core->config, "dbg.trace.libs");
../core/cmd_debug.c:	bool shallow_trace = r_config_get_i (core->config, "dbg.trace.inrange");
../core/cmd_debug.c:	Sdb *tracenodes = core->dbg->tracenodes;
../core/cmd_debug.c:	RTree *tr = core->dbg->tree;
../core/cmd_debug.c:	RDebug *dbg = core->dbg;
../core/cmd_debug.c:		r_io_read_at (core->io, addr, buf, sizeof (buf));
../core/cmd_debug.c:		r_anal_op (core->anal, &aop, addr, buf, sizeof (buf));
../core/cmd_debug.c:	int t = core->dbg->trace->enabled;
../core/cmd_debug.c:	if (r_debug_is_dead (core->dbg)) {
../core/cmd_debug.c:		ut64 first_n = r_num_math (core->num, input);
../core/cmd_debug.c:			to = r_num_math (core->num, input);
../core/cmd_debug.c:				final_addr = r_num_math (core->num, input);
../core/cmd_debug.c:	core->dbg->trace->enabled = 0;
../core/cmd_debug.c:	r_cons_break_push (static_debug_stop, core->dbg);
../core/cmd_debug.c:	r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		int hwbp = r_config_get_i (core->config, "dbg.hwbp");
../core/cmd_debug.c:		bp_final = r_debug_bp_add (core->dbg, final_addr, hwbp, false, 0, NULL, 0);
../core/cmd_debug.c:		r_bp_del (core->dbg->bp, final_addr);
../core/cmd_debug.c:	trace_traverse (core->dbg->tree);
../core/cmd_debug.c:	core->dbg->trace->enabled = t;
../core/cmd_debug.c:		r_debug_esil_watch_list (core->dbg);
../core/cmd_debug.c:						r_debug_esil_watch (core->dbg, rwx, dev, q);
../core/cmd_debug.c:		r_debug_esil_watch_reset (core->dbg);
../core/cmd_debug.c:		if (r_debug_esil_watch_empty (core->dbg)) {
../core/cmd_debug.c:			r_debug_esil_prestep (core->dbg, r_config_get_i (core->config, "esil.prestep"));
../core/cmd_debug.c:			r_debug_esil_continue (core->dbg);
../core/cmd_debug.c:			ut64 addr, naddr, fin = r_num_math (core->num, input + 2);
../core/cmd_debug.c:			addr = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:				r_debug_esil_prestep (core->dbg, r_config_get_i (
../core/cmd_debug.c:							core->config, "esil.prestep"));
../core/cmd_debug.c:				r_debug_esil_step (core->dbg, 1);
../core/cmd_debug.c:				naddr = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:			r_debug_esil_prestep (core->dbg, r_config_get_i (core->config, "esil.prestep"));
../core/cmd_debug.c:			r_debug_esil_step (core->dbg, r_num_math (core->num, input + 1));
../core/cmd_debug.c:				r_debug_signal_list (core->dbg, 1);
../core/cmd_debug.c:							r_debug_signal_setup (core->dbg, signum, 0);
../core/cmd_debug.c:							r_debug_signal_setup (core->dbg, signum, R_DBG_SIGNAL_SKIP);
../core/cmd_debug.c:							r_debug_signal_setup (core->dbg, signum, R_DBG_SIGNAL_CONT);
../core/cmd_debug.c:		r_debug_signal_list (core->dbg, 2);
../core/cmd_debug.c:		r_debug_signal_list (core->dbg, 0);
../core/cmd_debug.c:		RList *list = r_debug_kill_list (core->dbg);
../core/cmd_debug.c:			r_debug_kill_setup (core->dbg, sig, r_num_math (core->num, p+1));
../core/cmd_debug.c:			r_debug_kill (core->dbg, core->dbg->pid, core->dbg->tid, sig);
../core/cmd_debug.c:			from = r_num_tail (core->num, core->offset, input + 2);
../core/cmd_debug.c:				to = r_num_tail (core->num, core->offset, ptr+2);
../core/cmd_debug.c:				to = r_num_math (core->num, ptr+1);
../core/cmd_debug.c:			from = r_num_tail (core->num, core->offset, input + 2);
../core/cmd_debug.c:			from = r_num_math (core->num, input + 3);
../core/cmd_debug.c:				to = r_num_tail (core->num, core->offset, ptr+2);
../core/cmd_debug.c:				to = r_num_math (core->num, ptr+1);
../core/cmd_debug.c:			from = r_num_math (core->num, input + 3);
../core/cmd_debug.c:			r_debug_step (core->dbg, 1);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:			pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:		eprintf ("Continue until 0x%08"PFMT64x" using %d bpsize\n", addr, core->dbg->bpsize);
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		r_bp_add_sw (core->dbg->bp, addr, core->dbg->bpsize, R_BP_PROT_EXEC);
../core/cmd_debug.c:		r_debug_continue (core->dbg);
../core/cmd_debug.c:		r_bp_del (core->dbg->bp, addr);
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		core->dbg->continue_all_threads = true;
../core/cmd_debug.c:		r_debug_continue (core->dbg);
../core/cmd_debug.c:		r_debug_continue (core->dbg);
../core/cmd_debug.c:			if (!r_debug_continue_back (core->dbg)) {
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		r_debug_continue_pass_exception (core->dbg);
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:			r_debug_continue_until_optype (core->dbg, R_ANAL_OP_TYPE_UCALL, 0);
../core/cmd_debug.c:			r_debug_continue_until_optype (core->dbg, R_ANAL_OP_TYPE_CALL, 0);
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		r_debug_continue_until_optype (core->dbg, R_ANAL_OP_TYPE_RET, 1);
../core/cmd_debug.c:		// select pid and r_debug_continue_kill (core->dbg,
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		signum = r_num_math (core->num, input + 2);
../core/cmd_debug.c:			int old_pid = core->dbg->pid;
../core/cmd_debug.c:			int old_tid = core->dbg->tid;
../core/cmd_debug.c:			r_debug_select (core->dbg, pid, tid);
../core/cmd_debug.c:			r_debug_continue_kill (core->dbg, signum);
../core/cmd_debug.c:			r_debug_select (core->dbg, old_pid, old_tid);
../core/cmd_debug.c:			r_debug_continue_kill (core->dbg, signum);
../core/cmd_debug.c:			int t = core->dbg->trace->enabled;
../core/cmd_debug.c:			core->dbg->trace->enabled = 0;
../core/cmd_debug.c:			r_cons_break_push (static_debug_stop, core->dbg);
../core/cmd_debug.c:				r_debug_step (core->dbg, 1);
../core/cmd_debug.c:				r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:				pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:				s = r_io_section_vget (core->io, pc);
../core/cmd_debug.c:			core->dbg->trace->enabled = t;
../core/cmd_debug.c:		old_pid = core->dbg->pid;
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		r_debug_select (core->dbg, pid, core->dbg->tid);
../core/cmd_debug.c:		r_debug_continue_only (core->dbg);
../core/cmd_debug.c:		//r_debug_continue (core->dbg);
../core/cmd_debug.c:		r_debug_select (core->dbg, old_pid, core->dbg->tid);
../core/cmd_debug.c:		if (r_config_get_i (core->config, "cfg.debug")) {
../core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:			if (!r_debug_step (core->dbg, times)) {
../core/cmd_debug.c:				core->break_loop = true;
../core/cmd_debug.c:			r_cons_break_push (static_debug_stop, core->dbg);
../core/cmd_debug.c:				r_debug_step (core->dbg, 1);
../core/cmd_debug.c:				if (r_debug_is_dead (core->dbg)) {
../core/cmd_debug.c:					core->break_loop = true;
../core/cmd_debug.c:			} while (!r_num_conditional (core->num, input + 3));
../core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:			step_until (core, r_num_math (core->num, input + 2)); // XXX dupped by times
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:			addr = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:			r_io_read_at (core->io, addr, buf, sizeof (buf));
../core/cmd_debug.c:			r_anal_op (core->anal, &aop, addr, buf, sizeof (buf));
../core/cmd_debug.c:				RIOSection *s = r_io_section_vget (core->io, aop.jump);
../core/cmd_debug.c:					r_debug_step_over (core->dbg, times);
../core/cmd_debug.c:			r_debug_step (core->dbg, 1);
../core/cmd_debug.c:			addr = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:			RBreakpointItem *bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:				r_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, false);
../core/cmd_debug.c:				r_io_read_at (core->io, addr, buf, sizeof (buf));
../core/cmd_debug.c:				r_anal_op (core->anal, &aop, addr, buf, sizeof (buf));
../core/cmd_debug.c:			r_debug_reg_set (core->dbg, "PC", addr);
../core/cmd_debug.c:		if (r_config_get_i (core->config, "cfg.debug")) {
../core/cmd_debug.c:			addr = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:			RBreakpointItem *bpi = r_bp_get_at (core->dbg->bp, addr);
../core/cmd_debug.c:			r_bp_del (core->dbg->bp, addr);
../core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:			r_debug_step_over (core->dbg, times);
../core/cmd_debug.c:			if (!r_debug_step_back (core->dbg)) {
../core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../core/cmd_debug.c:		r_print_date_get_now (core->print, str);
../core/cmd_debug.c:			r_debug_trace_list (core->dbg, 0);
../core/cmd_debug.c:			r_debug_trace_list (core->dbg, 1);
../core/cmd_debug.c:			if ((t = r_debug_trace_get (core->dbg,
../core/cmd_debug.c:					r_num_math (core->num, input + 3)))) {
../core/cmd_debug.c:			r_debug_trace_at (core->dbg, input + 3);
../core/cmd_debug.c:			r_debug_trace_tag (core->dbg, atoi (input + 3));
../core/cmd_debug.c:			dot_trace_traverse (core, core->dbg->tree, input[2]);
../core/cmd_debug.c:			r_tree_reset (core->dbg->tree);
../core/cmd_debug.c:			r_debug_trace_free (core->dbg->trace);
../core/cmd_debug.c:			r_debug_tracenodes_reset (core->dbg);
../core/cmd_debug.c:			core->dbg->trace = r_debug_trace_new ();
../core/cmd_debug.c:			addr = r_num_math (core->num, ptr);
../core/cmd_debug.c:					RDebugTracepoint *tp = r_debug_trace_add (core->dbg, addr, op->size);
../core/cmd_debug.c:					tp->count = r_num_math (core->num, ptr + 1);
../core/cmd_debug.c:					r_anal_trace_bb (core->anal, addr);
../core/cmd_debug.c:			if (!core->anal->esil) {
../core/cmd_debug.c:				int stacksize = r_config_get_i (core->config, "esil.stack.depth");
../core/cmd_debug.c:				int romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_debug.c:				int stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_debug.c:				int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_debug.c:				int nonull = r_config_get_i (core->config, "esil.nonull");
../core/cmd_debug.c:				if (!(core->anal->esil = r_anal_esil_new (stacksize, iotrap))) {
../core/cmd_debug.c:				r_anal_esil_setup (core->anal->esil,
../core/cmd_debug.c:						core->anal, romem, stats, nonull);
../core/cmd_debug.c:				r_anal_esil_trace_list (core->anal->esil);
../core/cmd_debug.c:				ut64 addr = r_num_math (core->num, input + 3);
../core/cmd_debug.c:					addr = core->offset;
../core/cmd_debug.c:					r_anal_esil_trace (core->anal->esil, op);
../core/cmd_debug.c:					if (core->anal->esil) {
../core/cmd_debug.c:						sdb_free (core->anal->esil->db_trace);
../core/cmd_debug.c:						core->anal->esil->db_trace = sdb_new0 ();
../core/cmd_debug.c:					core->anal->esil, idx);
../core/cmd_debug.c:					char *s = sdb_querys (core->anal->esil->db_trace,
../core/cmd_debug.c:				r_debug_session_list (core->dbg);
../core/cmd_debug.c:				r_debug_session_add (core->dbg, NULL);
../core/cmd_debug.c:					r_debug_session_delete (core->dbg, r_num_math (core->num, input + 3));
../core/cmd_debug.c:					r_debug_session_save (core->dbg, input + 4);
../core/cmd_debug.c:					r_debug_session_restore (core->dbg, input + 4);
../core/cmd_debug.c:					r_debug_session_comment (core->dbg, atoi (input + 3), strchr (input + 4, ' '));
../core/cmd_debug.c:				r_debug_session_set_idx (core->dbg, atoi (input + 4));
../core/cmd_debug.c:				r_cons_printf ("Current Tag: %d\n", core->dbg->trace->tag);
../core/cmd_debug.c:			r_debug_desc_list (core->dbg, 0);
../core/cmd_debug.c:			r_debug_desc_list (core->dbg, 1);
../core/cmd_debug.c:				if (str) off = r_num_math (core->num, str+1);
../core/cmd_debug.c:				if (off == UT64_MAX || !r_debug_desc_seek (core->dbg, fd, off)) {
../core/cmd_debug.c:				if (str) newfd = r_num_math (core->num, str+1);
../core/cmd_debug.c:				if (newfd == UT64_MAX || !r_debug_desc_dup (core->dbg, fd, newfd)) {
../core/cmd_debug.c:				if (str) off = r_num_math (core->num, str+1);
../core/cmd_debug.c:				if (str) len = r_num_math (core->num, str+1);
../core/cmd_debug.c:						!r_debug_desc_read (core->dbg, fd, off, len)) {
../core/cmd_debug.c:				if (str) off = r_num_math (core->num, str+1);
../core/cmd_debug.c:				if (str) len = r_num_math (core->num, str+1);
../core/cmd_debug.c:						!r_debug_desc_write (core->dbg, fd, off, len)) {
../core/cmd_debug.c:				//r_core_cmdf (core, "dxs close %d", (int)r_num_math ( core->num, input + 2));
../core/cmd_debug.c:			follow = r_config_get_i (core->config, "dbg.follow");
../core/cmd_debug.c:		r_cons_break_push (static_debug_stop, core->dbg);
../core/cmd_debug.c:		follow = r_config_get_i (core->config, "dbg.follow");
../core/cmd_debug.c:		if (core->io->debug || input[1] == '?') {
../core/cmd_debug.c:			r_debug_plugin_list (core->dbg, 'q');
../core/cmd_debug.c:			r_config_set (core->config, "dbg.backend", str);
../core/cmd_debug.c:			// implicit by config.set r_debug_use (core->dbg, str);
../core/cmd_debug.c:			r_debug_plugin_list (core->dbg, 0);
../core/cmd_debug.c:			RDebugInfo *rdi = r_debug_info (core->dbg, input + 2);
../core/cmd_debug.c:			RDebugReasonType stop = r_debug_stop_reason (core->dbg);
../core/cmd_debug.c:					const char *s = r_signal_to_string (core->dbg->reason.signum);
../core/cmd_debug.c:					P ("type=%s\n", r_debug_reason_to_string (core->dbg->reason.type));
../core/cmd_debug.c:					P ("signum=%d\n", core->dbg->reason.signum);
../core/cmd_debug.c:					P ("sigpid=%d\n", core->dbg->reason.tid);
../core/cmd_debug.c:					P ("addr=0x%"PFMT64x"\n", core->dbg->reason.addr);
../core/cmd_debug.c:					P ("bp_addr=0x%"PFMT64x"\n", core->dbg->reason.bp_addr);
../core/cmd_debug.c:					P ("inbp=%s\n", r_str_bool (core->dbg->reason.bp_addr));
../core/cmd_debug.c:					P ("baddr=0x%"PFMT64x"\n", r_debug_get_baddr (core->dbg, NULL));
../core/cmd_debug.c:					r_cons_printf ("f dbg.signal = %d\n", core->dbg->reason.signum);
../core/cmd_debug.c:					r_cons_printf ("f dbg.sigpid = %d\n", core->dbg->reason.tid);
../core/cmd_debug.c:					r_cons_printf ("f dbg.inbp = %d\n", core->dbg->reason.bp_addr? 1: 0);
../core/cmd_debug.c:					r_cons_printf ("f dbg.sigaddr = 0x%"PFMT64x"\n", core->dbg->reason.addr);
../core/cmd_debug.c:					r_cons_printf ("f dbg.baddr = 0x%"PFMT64x"\n", r_debug_get_baddr (core->dbg, NULL));
../core/cmd_debug.c:					const char *s = r_signal_to_string (core->dbg->reason.signum);
../core/cmd_debug.c:					P ("\"type\":\"%s\",", r_debug_reason_to_string (core->dbg->reason.type));
../core/cmd_debug.c:					P ("\"signum\":%d,", core->dbg->reason.signum);
../core/cmd_debug.c:					P ("\"sigpid\":%d,", core->dbg->reason.tid);
../core/cmd_debug.c:					P ("\"addr\":%"PFMT64d",", core->dbg->reason.addr);
../core/cmd_debug.c:					P ("\"inbp\":%s,", r_str_bool (core->dbg->reason.bp_addr));
../core/cmd_debug.c:					P ("\"baddr\":%"PFMT64d",", r_debug_get_baddr (core->dbg, NULL));
../core/cmd_debug.c:		if (core->dbg->h && core->dbg->h->gcore) {
../core/cmd_debug.c:			if (core->dbg->pid == -1) {
../core/cmd_debug.c:			char *corefile = get_corefile_name (input + 1, core->dbg->pid);
../core/cmd_debug.c:				if (!core->dbg->h->gcore (core->dbg, dst)) {
../core/cmd_debug.c:		r_cons_break_push (static_debug_stop, core->dbg);
../core/cmd_debug.c:			//int opid = core->dbg->pid = pid;
../core/cmd_debug.c:			int res = r_debug_kill (core->dbg, pid, 0, 0);
../core/cmd_debug.c:				if (bytes_len>0) r_debug_execute (core->dbg,
../core/cmd_debug.c:			r_asm_set_pc (core->assembler, core->offset);
../core/cmd_debug.c:			acode = r_asm_massemble (core->assembler, input + 2);
../core/cmd_debug.c:				r_reg_arena_push (core->dbg->reg);
../core/cmd_debug.c:				r_debug_execute (core->dbg, acode->buf,
../core/cmd_debug.c:				r_reg_arena_pop (core->dbg->reg);
../core/cmd_debug.c:			REgg *egg = core->egg;
../core/cmd_debug.c:			const char *asm_arch = r_config_get (core->config, "asm.arch");
../core/cmd_debug.c:			int asm_bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_debug.c:			const char *asm_os = r_config_get (core->config, "asm.os");
../core/cmd_debug.c:			r_asm_set_pc (core->assembler, core->offset);
../core/cmd_debug.c:			r_reg_arena_push (core->dbg->reg);
../core/cmd_debug.c:			r_debug_execute (core->dbg, b->buf, b->length, 0);
../core/cmd_debug.c:			r_reg_arena_pop (core->dbg->reg);
../core/cmd_debug.c:			r_reg_arena_push (core->dbg->reg);
../core/cmd_debug.c:						r_debug_execute (core->dbg,
../core/cmd_debug.c:			r_reg_arena_pop (core->dbg->reg);
../core/cmd_debug.c:		ut64 pc = r_debug_reg_get (core->dbg, "PC");
../core/cmd_debug.c:		if ((pc < core->offset) || (pc > (core->offset + follow))) {
../core/cmd_egg.c:	REgg *egg = core->egg;
../core/cmd_egg.c:		r_config_get (core->config, "asm.arch"),
../core/cmd_egg.c:		core->assembler->bits, 0,
../core/cmd_egg.c:		r_config_get (core->config, "asm.os")); // XXX
../core/cmd_eval.c:	core->cmdfilter = "ec ";
../core/cmd_eval.c:	core->cmdfilter = NULL;
../core/cmd_eval.c:			RConfigNode *node = r_config_node_get (core->config, input+2);
../core/cmd_eval.c:		r_config_list (core->config, NULL, 'j');
../core/cmd_eval.c:		r_config_list (core->config, input + 1, 'v');
../core/cmd_eval.c:		r_config_list (core->config, NULL, 'q');
../core/cmd_eval.c:		r_config_list (core->config, NULL, 0);
../core/cmd_eval.c:				r_meta_set_string (core->anal, R_META_TYPE_HIGHLIGHT, core->offset, "");
../core/cmd_eval.c:			char *str = r_meta_get_string (core->anal, R_META_TYPE_HIGHLIGHT, core->offset);
../core/cmd_eval.c:			r_meta_set_string (core->anal, R_META_TYPE_HIGHLIGHT, core->offset, dup);
../core/cmd_eval.c:			val = r_config_get (core->config, input2);
../core/cmd_eval.c:				r_config_set (core->config, input2, p);
../core/cmd_eval.c:		if (!r_config_toggle (core->config, input))
../core/cmd_eval.c:		r_config_list (core->config, (input[1])? input + 1: NULL, 's');
../core/cmd_eval.c:	case '*': r_config_list (core->config, NULL, 1); break;
../core/cmd_eval.c:		case '?': r_config_list (core->config, input+2, 2); break;
../core/cmd_eval.c:		default: r_config_list (core->config, input+1, 2); break;
../core/cmd_eval.c:			if (!r_config_readonly (core->config, key)) {
../core/cmd_eval.c:	case ' ': r_config_eval (core->config, input+1); break;
../core/cmd_eval.c:	default: r_config_eval (core->config, input); break;
../core/cmd_flag.c:			r_flag_zone_around (core->flags, core->offset, &a, &b);
../core/cmd_flag.c:			r_flag_zone_around (core->flags, core->offset, &a, &b);
../core/cmd_flag.c:				char *title = r_str_newf ("[ 0x%08"PFMT64x" ]", core->offset);
../core/cmd_flag.c:		r_flag_zone_add (core->flags, r_str_chop_ro (input + 1), core->offset);
../core/cmd_flag.c:			r_flag_zone_reset (core->flags);
../core/cmd_flag.c:			r_flag_zone_del (core->flags, input + 1);
../core/cmd_flag.c:		r_flag_zone_list (core->flags, '*');
../core/cmd_flag.c:		r_flag_zone_list (core->flags, 0);
../core/cmd_flag.c:	r_list_foreach (core->flags->flags, iter, flag) {
../core/cmd_flag.c:		ut64 min = 0, max = r_io_size (core->io);
../core/cmd_flag.c:		RIOSection *s = r_io_section_vget (core->io, flag->offset);
../core/cmd_flag.c:			r_print_rangebar (core->print, flag->offset, flag->offset + flag->size, min, max, cols);
../core/cmd_flag.c:	ut64 off = core->offset;
../core/cmd_flag.c:			(void)r_flag_set (core->flags, ptr,
../core/cmd_flag.c:					core->offset, 1);
../core/cmd_flag.c:			fi = r_flag_get (core->flags, name);
../core/cmd_flag.c:				fi = r_flag_set (core->flags, name,
../core/cmd_flag.c:					core->offset, 1);
../core/cmd_flag.c:			ut64 addr = arg? r_num_math (core->num, arg): core->offset;
../core/cmd_flag.c:		r_flag_move (core->flags, core->offset, r_num_math (core->num, input+1));
../core/cmd_flag.c:		r_flag_get_i2 (core->flags, r_num_math (core->num, input+1));
../core/cmd_flag.c:						mask = r_num_math (core->num, q+1);
../core/cmd_flag.c:					from = r_num_math (core->num, str+1);
../core/cmd_flag.c:					to = r_num_math (core->num, p+1);
../core/cmd_flag.c:					ret = r_flag_relocate (core->flags, from, mask, to);
../core/cmd_flag.c:				RFlag *f = core->flags;
../core/cmd_flag.c:				base = r_num_math (core->num, str);
../core/cmd_flag.c:				core->flags->base = r_num_math (core->num, input+1);
../core/cmd_flag.c:				core->flags->base,
../core/cmd_flag.c:				core->flags->base);
../core/cmd_flag.c:		ut32 bsze = 1; //core->blocksize;
../core/cmd_flag.c:			off = r_num_math (core->num, eq + 1);
../core/cmd_flag.c:					off = r_num_math (core->num, s2 + 1);
../core/cmd_flag.c:			bsze = r_num_math (core->num, s + 1);
../core/cmd_flag.c:				if (r_flag_get_at (core->flags, off, false)) {
../core/cmd_flag.c:				r_flag_set (core->flags, cstr, off, bsze);
../core/cmd_flag.c:			r_flag_unset_all (core->flags);
../core/cmd_flag.c:				RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, off, 0);
../core/cmd_flag.c:					//;r_anal_fcn_local_del_name (core->anal, fcn, flagname+1);
../core/cmd_flag.c:					r_flag_unset_glob (core->flags, flagname);
../core/cmd_flag.c:					r_flag_unset_name (core->flags, flagname);
../core/cmd_flag.c:			r_flag_unset_off (core->flags, off);
../core/cmd_flag.c:					r_anal_fcn_labels (core->anal, NULL, 1);
../core/cmd_flag.c:					RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, off, 0);
../core/cmd_flag.c:					if (fcn) r_anal_fcn_labels (core->anal, fcn, 1);
../core/cmd_flag.c:				RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, off, 0);
../core/cmd_flag.c:						off = r_num_math (core->num, eq);
../core/cmd_flag.c:							r_anal_fcn_label_del (core->anal, fcn, name + 1, off);
../core/cmd_flag.c:							r_anal_fcn_label_set (core->anal, fcn, name, off);
../core/cmd_flag.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, off, 0);
../core/cmd_flag.c:			if (fcn) r_anal_fcn_labels (core->anal, fcn, 0);
../core/cmd_flag.c:			// TODO: we can optimize this if core->flags->flags is sorted by flagitem->offset
../core/cmd_flag.c:			r_list_foreach (core->flags->flags, iter, flag) {
../core/cmd_flag.c:					r_list_foreach (core->flags->flags, iter2, flag2) {
../core/cmd_flag.c:				item = r_flag_get_i (core->flags,
../core/cmd_flag.c:					r_num_math (core->num, arg));
../core/cmd_flag.c:					item->size = r_num_math (core->num, p);
../core/cmd_flag.c:					item = r_flag_get_i (core->flags, core->offset);
../core/cmd_flag.c:						item->size = r_num_math (core->num, arg);
../core/cmd_flag.c:					item = r_flag_get_i (core->flags, r_num_math (core->num, arg));
../core/cmd_flag.c:			item = r_flag_get_i (core->flags, core->offset);
../core/cmd_flag.c:			RFlagItem *item = r_flag_get_i (core->flags,
../core/cmd_flag.c:				r_num_math (core->num, input+2));
../core/cmd_flag.c:			RFlagItem *item = r_flag_get_i (core->flags,
../core/cmd_flag.c:				r_num_math (core->num, input+2));
../core/cmd_flag.c:		r_flag_sort (core->flags, (input[1]=='n'));
../core/cmd_flag.c:			r_flag_space_push (core->flags, input+2);
../core/cmd_flag.c:				r_flag_space_rename (core->flags, NULL, input + 2);
../core/cmd_flag.c:			r_flag_space_stack_list (core->flags, input[2]);
../core/cmd_flag.c:				r_flag_space_unset (core->flags, NULL);
../core/cmd_flag.c:				const char *curfs = r_flag_space_cur (core->flags);
../core/cmd_flag.c:				r_flag_space_unset (core->flags, curfs);
../core/cmd_flag.c:				r_flag_space_pop (core->flags);
../core/cmd_flag.c:				r_flag_space_unset (core->flags, input+2);
../core/cmd_flag.c:			r_flag_space_list (core->flags, input[1]);
../core/cmd_flag.c:			r_flag_space_set (core->flags, input+2);
../core/cmd_flag.c:			ut64 off = core->offset;
../core/cmd_flag.c:				off = r_num_math (core->num, input+2);
../core/cmd_flag.c:			f = r_flag_get_i (core->flags, off);
../core/cmd_flag.c:				f->space = core->flags->space_idx;
../core/cmd_flag.c:				if (core->flags->spaces[i])
../core/cmd_flag.c:					(i == core->flags->space_idx)?'*':' ',
../core/cmd_flag.c:					core->flags->spaces[i]);
../core/cmd_flag.c:			fi = r_flag_get (core->flags, arg);
../core/cmd_flag.c:				ret = r_flag_color (core->flags, fi, color);
../core/cmd_flag.c:				item = r_flag_get (core->flags, p);
../core/cmd_flag.c:				item = r_flag_get_i (core->flags, r_num_math (core->num, p));
../core/cmd_flag.c:				item = r_flag_get (core->flags, old);
../core/cmd_flag.c:					item = r_flag_get (core->flags, old+4);
../core/cmd_flag.c:				item = r_flag_get_i (core->flags, core->offset);
../core/cmd_flag.c:				if (!r_flag_rename (core->flags, item, new)) {
../core/cmd_flag.c:		r_flag_list (core->flags, *input, input[0]? input + 1: "");
../core/cmd_flag.c:						input[1], core->offset, arg, core->offset);
../core/cmd_flag.c:					core->offset, core->offset + core->blocksize);
../core/cmd_flag.c:			r_flag_list (core->flags, 'i', arg);
../core/cmd_flag.c:				core->offset, core->offset + core->blocksize);
../core/cmd_flag.c:			r_flag_list (core->flags, 'i', arg);
../core/cmd_flag.c:			ut64 addr = core->offset;
../core/cmd_flag.c:				addr = core->offset;
../core/cmd_flag.c:					addr = r_num_math (core->num, input + 3);
../core/cmd_flag.c:					addr = r_num_math (core->num, input + 3);
../core/cmd_flag.c:				addr = r_num_math (core->num, input + 2);
../core/cmd_flag.c:			core->flags->space_strict = space_strict;
../core/cmd_flag.c:			f = r_flag_get_at (core->flags, addr, !strict_offset);
../core/cmd_flag.c:			core->flags->space_strict = false;
../core/cmd_flag.c:			core->num->value = r_flag_get (core->flags, input + 1)? 1: 0;
../core/cmd_hash.c:		RLangPlugin *p = r_lang_get_by_extension (core->lang, ptr);
../core/cmd_hash.c:		RLangPlugin *p = r_lang_get_by_extension (core->lang, input+2);
../core/cmd_hash.c:		r_lang_list (core->lang);
../core/cmd_hash.c:	if (r_lang_use (core->lang, lang)) {
../core/cmd_hash.c:		r_lang_setup (core->lang);
../core/cmd_hash.c:				r_lang_run_string (core->lang, p);
../core/cmd_hash.c:				r_lang_run_file (core->lang, p);
../core/cmd_hash.c:			if (r_config_get_i (core->config, "scr.interactive")) {
../core/cmd_hash.c:				r_lang_prompt (core->lang);
../core/cmd_help.c:			ut64 val = r_num_math (core->num, word);
../core/cmd_help.c:		core->curtab = 0;
../core/cmd_help.c:		if (core->curtab < 0) {
../core/cmd_help.c:			core->curtab = 0;
../core/cmd_help.c:		core->curtab ++;
../core/cmd_help.c:		r_list_foreach (core->rcmd->plist, iter, cp) {
../core/cmd_help.c:				b = (ut32)r_num_math (core->num, out);
../core/cmd_help.c:				r = (ut32)r_num_math (core->num, p+1)-b;
../core/cmd_help.c:				r = (ut32)r_num_math (core->num, out);
../core/cmd_help.c:		core->num->value = (ut64) (b + r_num_rand (r));
../core/cmd_help.c:		r_cons_printf ("0x%"PFMT64x"\n", core->num->value);
../core/cmd_help.c:			n = r_num_get (core->num, input+1);
../core/cmd_help.c:			int cur = R_MAX (core->print->cur, 0);
../core/cmd_help.c:			core_anal_bytes (core, core->block + cur, core->blocksize, 1, 'd');
../core/cmd_help.c:			char *d = r_asm_describe (core->assembler, input+2);
../core/cmd_help.c:				n = r_num_get (core->num, p);
../core/cmd_help.c:		n = r_num_math (core->num, input+1);
../core/cmd_help.c:				?(int)r_num_math (core->num, input + 2): -1;
../core/cmd_help.c:			char *ops = r_asm_mnemonics (core->assembler, id, false);
../core/cmd_help.c:					char *desc = r_asm_describe (core->assembler, ptr);
../core/cmd_help.c:			r_cons_printf ("%d\n", r_asm_mnemonics_byname (core->assembler, input + 2));
../core/cmd_help.c:				?(int)r_num_math (core->num, input + 2): -1;
../core/cmd_help.c:			char *ops = r_asm_mnemonics (core->assembler, id, json);
../core/cmd_help.c:			core->times->loadlibs_init_time,
../core/cmd_help.c:			core->times->loadlibs_time,
../core/cmd_help.c:			core->times->file_open_time);
../core/cmd_help.c:			n = r_num_math (core->num, input+1);
../core/cmd_help.c:			n = r_num_math (core->num, input + 1);
../core/cmd_help.c:			if (core->num->dbz) {
../core/cmd_help.c:			f = d = core->num->fvalue;
../core/cmd_help.c:			r_cons_printf ("%s %.01lf %ff %lf\n", out, core->num->fvalue, f, d);
../core/cmd_help.c:				n = r_num_math (core->num, space + 1);
../core/cmd_help.c:				n = r_num_math (core->num, "$?");
../core/cmd_help.c:		if (core->num->dbz) {
../core/cmd_help.c:		core->num->value = n; // redundant
../core/cmd_help.c:			r_num_math (core->num, input+1);
../core/cmd_help.c:			r_cons_printf ("0x%"PFMT64x"\n", core->num->value);
../core/cmd_help.c:			st64 n = (st64)core->num->value;
../core/cmd_help.c:			r_cons_printf ("0x%"PFMT64x"\n", core->num->value);
../core/cmd_help.c:			st64 n = (st64)core->num->value;
../core/cmd_help.c:			r_cons_printf ("0x%"PFMT64x"\n", core->num->value);
../core/cmd_help.c:			if (!core->num->value) {
../core/cmd_help.c:					return core->num->value = r_core_cmd (core, input+1, 0);
../core/cmd_help.c:			r_cons_printf ("0x%"PFMT64x"\n", core->num->value);
../core/cmd_help.c:				eprintf ("%s %s 0x%08"PFMT64x"\n", vars[i], pad, r_num_math (core->num, vars[i]));
../core/cmd_help.c:		core->num->value = strlen (input);
../core/cmd_help.c:		n = r_num_math (core->num, input);
../core/cmd_help.c:			ut64 n = r_num_math (core->num, input);
../core/cmd_help.c:				portions[i] = r_num_math (core->num, r_str_word_get0 (arg, i));
../core/cmd_help.c:			r_print_portionbar (core->print, portions, n);
../core/cmd_help.c:			r_cons_column (r_num_math (core->num, input + 2));
../core/cmd_help.c:			from = r_num_math (core->num, input);
../core/cmd_help.c:				step = r_num_math (core->num, p2 + 1);
../core/cmd_help.c:			to = r_num_math (core->num, p + 1);
../core/cmd_help.c:		if (core->io->va) {
../core/cmd_help.c:				r_num_math (core->num, input+2): core->offset;
../core/cmd_help.c:			RIOMap *map = r_io_map_get_paddr (core->io, n);
../core/cmd_help.c:			r_cons_printf ("0x%08"PFMT64x"\n", core->offset);
../core/cmd_help.c:		if (core->io->va) {
../core/cmd_help.c:				r_num_math (core->num, input + 2): core->offset;
../core/cmd_help.c:			RIOMap *map = r_io_map_get (core->io, n);
../core/cmd_help.c:			r_cons_printf ("0x%08"PFMT64x"\n", core->offset);
../core/cmd_help.c:		ut64 n = input[1] ? r_num_math (core->num, input + 2) : core->offset;
../core/cmd_help.c:		SdbList *sections = core->io->va ? r_io_sections_vget (core->io, n) : r_io_sections_get (core->io, n);
../core/cmd_help.c:		if (!r_config_get_i (core->config, "scr.interactive")) {
../core/cmd_help.c:				core->num->value = !r_num_conditional (core->num, input + 2);
../core/cmd_help.c:				eprintf ("%s\n", r_str_bool (!core->num->value));
../core/cmd_help.c:				core->num->value = r_core_yank_hud_path (core, input + 2, 0) == true;
../core/cmd_help.c:				 core->num->value = r_cons_yesno (1, "%s? (Y/n)", input);
../core/cmd_help.c:				 core->num->value = r_cons_yesno (0, "%s? (y/N)", input);
../core/cmd_help.c:				core->num->value = r_num_math (core->num, foo);
../core/cmd_help.c:		ut64 addr = r_num_math (core->num, input + 1);
../core/cmd_help.c:		const char *rstr = core->print->hasrefs (core->print->user, addr, true);
../core/cmd_help.c:		core->num->value = (ut64)(int)prof.result;
../core/cmd_help.c:				if (core->num->value) {
../core/cmd_help.c:			if (core->num->value) {
../core/cmd_help.c:				core->num->value = r_core_cmd (core, input+1, 0);
../core/cmd_help.c:			if (core->num->dbz) {
../core/cmd_help.c:			r_cons_printf ("%"PFMT64d"\n", core->num->value);
../core/cmd_info.c:	case R_BIN_NM_CXX: res = r_bin_demangle_cxx (core->bin->cur, s, 0); break;
../core/cmd_info.c:	case R_BIN_NM_SWIFT: res = r_bin_demangle_swift (s, core->bin->demanglercmd); break;
../core/cmd_info.c:	case R_BIN_NM_DLANG: res = r_bin_demangle_plugin (core->bin, "dlang", s); break;
../core/cmd_info.c:		r_bin_demangle_list (core->bin);
../core/cmd_info.c:		const char *lang = r_config_get (core->config, "bin.lang");
../core/cmd_info.c:	int dbg = r_config_get_i (core->config, "cfg.debug");
../core/cmd_info.c:	bool io_cache = r_config_get_i (core->config, "io.cache");
../core/cmd_info.c:	RBinInfo *info = r_bin_get_info (core->bin);
../core/cmd_info.c:	RCoreFile *cf = core->file;
../core/cmd_info.c:	RIODesc *desc = cf ? r_io_desc_get (core->io, cf->fd) : NULL;
../core/cmd_info.c:			r_cons_printf (",\"obsz\":%"PFMT64d, (ut64) core->io->desc->obsz);
../core/cmd_info.c:		r_cons_printf (",\"block\":%d", core->blocksize);
../core/cmd_info.c:			pair ("blksz", sdb_fmt (0, "0x%"PFMT64x, (ut64) core->io->desc->obsz));
../core/cmd_info.c:		pair ("block", sdb_fmt (0, "0x%x", core->blocksize));
../core/cmd_info.c:	RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:	if (core->file) {
../core/cmd_info.c:	if (r_config_get_i (core->config, "scr.tts")) {
../core/cmd_info.c:	bool newline = r_config_get_i (core->config, "scr.interactive");
../core/cmd_info.c:	RCoreFile *cf = core->file;
../core/cmd_info.c:	RIODesc *desc = cf ? r_io_desc_get (core->io, cf->fd) : NULL;
../core/cmd_info.c:	int i, va = core->io->va || core->io->debug;
../core/cmd_info.c:			ut64 baddr = r_config_get_i (core->config, "bin.baddr");
../core/cmd_info.c:				baddr = r_num_math (core->num, input + 1);
../core/cmd_info.c:			RBinObject *o = r_bin_cur_object (core->bin);
../core/cmd_info.c:			ut64 baddr = r_config_get_i (core->config, "bin.baddr");
../core/cmd_info.c:				r_bin_list_archs (core->bin, 'j');
../core/cmd_info.c:				r_bin_list_archs (core->bin, 1);
../core/cmd_info.c:				RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:				  RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:				r_bin_list_plugin (core->bin, plugin_name, json);
../core/cmd_info.c:				r_bin_list (core->bin, json);
../core/cmd_info.c:				ut64 addr = core->offset + (core->print->cur_enabled? core->print->cur: 0);
../core/cmd_info.c:				RFlagItem *f = r_flag_get_at (core->flags, addr, false);
../core/cmd_info.c:				RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:					pdbopts.user_agent = (char*) r_config_get (core->config, "pdb.useragent");
../core/cmd_info.c:					pdbopts.symbol_server = (char*) r_config_get (core->config, "pdb.server");
../core/cmd_info.c:					pdbopts.extract = r_config_get_i (core->config, "pdb.extract");
../core/cmd_info.c:					info = r_bin_get_info (core->bin);
../core/cmd_info.c:								char* dir = r_file_dirname (core->bin->cur->file);
../core/cmd_info.c:					if (core->bin->cur && core->bin->cur->o) {
../core/cmd_info.c:						baddr = core->bin->cur->o->baddr;
../core/cmd_info.c:				  RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:				RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:				RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_info.c:						if (r_num_is_valid_input (core->num, input + 2)) {
../core/cmd_info.c:							idx = r_num_math (core->num, input + 2);
../core/cmd_info.c:				RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_log.c:	const char *me = r_config_get (core->config, "cfg.user");
../core/cmd_log.c:		lastmsg = core->log->last;
../core/cmd_log.c:			r_config_set (core->config, "cfg.user", buf + 6);
../core/cmd_log.c:			me = r_config_get (core->config, "cfg.user");
../core/cmd_log.c:		r_cons_printf ("%d\n", core->log->last - 1);
../core/cmd_log.c:		if (r_config_get_i (core->config, "scr.interactive")) {
../core/cmd_log.c:		r_lib_list (core->lib);
../core/cmd_log.c:		r_lib_close (core->lib, input + 2);
../core/cmd_log.c:		r_lib_open (core->lib, input + 2);
../core/cmd_macro.c:		r_list_append (core->cmd_descriptors, d);
../core/cmd_macro.c:		r_cmd_macro_break (&core->rcmd->macro, input + 1);
../core/cmd_macro.c:		r_cmd_macro_rm (&core->rcmd->macro, input + 1);
../core/cmd_macro.c:		r_cmd_macro_meta (&core->rcmd->macro);
../core/cmd_macro.c:		r_cmd_macro_list (&core->rcmd->macro);
../core/cmd_macro.c:		r_cmd_macro_add (&core->rcmd->macro, buf);
../core/cmd_macro.c:				r_cmd_macro_call (&core->rcmd->macro, buf);
../core/cmd_magic.c:	ut64 curoffset = core->offset;
../core/cmd_magic.c:	if (addr != core->offset) {
../core/cmd_magic.c:		if (addr >= core->offset && (addr+NAH) < (core->offset + core->blocksize)) {
../core/cmd_magic.c:			delta = addr - core->offset;
../core/cmd_magic.c:	if (core->search->align) {
../core/cmd_magic.c:		int mod = addr % core->search->align;
../core/cmd_magic.c:			const char *magicpath = r_config_get (core->config, "dir.magic");
../core/cmd_magic.c:	if (delta+2>core->blocksize) {
../core/cmd_magic.c:	str = r_magic_buffer (ck, core->block+delta, core->blocksize-delta);
../core/cmd_magic.c:			int mod = core->search->align;
../core/cmd_magic.c:		cmdhit = r_config_get (core->config, "cmd.hit");
../core/cmd_magic.c:	if((core->blocksize-delta)>16)
../core/cmd_magic.c:	int mod = core->search->align;
../core/cmd_magic.c:	ut64 addr = core->offset;
../core/cmd_magic.c:	magicdepth = r_config_get_i (core->config, "magic.depth"); // TODO: do not use global var here
../core/cmd_magic.c:	if (addr != core->offset)
../core/cmd_meta.c:	return sdb_unset (core->bin->cur->sdb_addrinfo, aoffsetptr, 0);
../core/cmd_meta.c:	ret = r_bin_addr2line (core->bin, offset, file, sizeof (file)-1, &line);
../core/cmd_meta.c:	return sdb_unset (core->bin->cur->sdb_addrinfo, file_line, 0);
../core/cmd_meta.c:	char *meta_info = sdb_get (core->bin->cur->sdb_addrinfo, file_line, 0);
../core/cmd_meta.c:			sdb_reset (core->bin->cur->sdb_addrinfo);
../core/cmd_meta.c:			sdb_foreach (core->bin->cur->sdb_addrinfo, print_addrinfo, NULL);
../core/cmd_meta.c:		offset = r_num_math (core->num, p);
../core/cmd_meta.c:			offset = core->offset;
../core/cmd_meta.c:		offset = core->offset;
../core/cmd_meta.c:				ret = cmd_meta_add_fileline (core->bin->cur->sdb_addrinfo,
../core/cmd_meta.c:	offset = core->offset;
../core/cmd_meta.c:	ut64 addr = core->offset;
../core/cmd_meta.c:			char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);
../core/cmd_meta.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, nc);
../core/cmd_meta.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, comment);
../core/cmd_meta.c:			char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);
../core/cmd_meta.c:			  ut64 at = input[2]? r_num_math (core->num, input + 2): addr;
../core/cmd_meta.c:					  core->anal, R_META_TYPE_COMMENT, at);
../core/cmd_meta.c:		r_meta_list (core->anal, R_META_TYPE_COMMENT, 0);
../core/cmd_meta.c:			r_meta_list_at (core->anal, R_META_TYPE_COMMENT, 'j', core->offset);
../core/cmd_meta.c:			r_meta_list_at (core->anal, R_META_TYPE_COMMENT, 'f', core->offset);
../core/cmd_meta.c:		r_meta_list (core->anal, R_META_TYPE_COMMENT, 'j');
../core/cmd_meta.c:					core->anal, R_META_TYPE_COMMENT, addr);
../core/cmd_meta.c:				//r_meta_add (core->anal->meta, R_META_TYPE_COMMENT, addr, 0, out);
../core/cmd_meta.c:				//r_meta_del (core->anal->meta, input[0], addr, addr+1);
../core/cmd_meta.c:				r_meta_set_string (core->anal,
../core/cmd_meta.c:		char *text, *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);
../core/cmd_meta.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, text);
../core/cmd_meta.c:			r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, nc);
../core/cmd_meta.c:		r_meta_list (core->anal, R_META_TYPE_COMMENT, 1);
../core/cmd_meta.c:		r_meta_del (core->anal, R_META_TYPE_COMMENT, core->offset, 1);
../core/cmd_meta.c:					core->anal, R_META_TYPE_COMMENT, addr);
../core/cmd_meta.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT,
../core/cmd_meta.c:				addr = r_num_math (core->num, input+3);
../core/cmd_meta.c:				r_meta_del (core->anal,
../core/cmd_meta.c:		addr = r_num_math (core->num, s);
../core/cmd_meta.c:						core->anal, R_META_TYPE_COMMENT,
../core/cmd_meta.c:					r_meta_add (core->anal,
../core/cmd_meta.c:					r_meta_add (core->anal,
../core/cmd_meta.c:				r_meta_add (core->anal,
../core/cmd_meta.c:	ut64 addr_end = 0LL, addr = core->offset;
../core/cmd_meta.c:			core->num->value = r_meta_del (core->anal,
../core/cmd_meta.c:			addr = r_num_math (core->num, input+3);
../core/cmd_meta.c:			core->num->value = r_meta_del (core->anal,
../core/cmd_meta.c:		r_meta_list (core->anal, input[0], 1);
../core/cmd_meta.c:		r_meta_list (core->anal, input[0], 'j');
../core/cmd_meta.c:					core->anal, R_META_TYPE_COMMENT, addr);
../core/cmd_meta.c:				//r_meta_add (core->anal->meta, R_META_TYPE_COMMENT, addr, 0, out);
../core/cmd_meta.c:				//r_meta_del (core->anal->meta, input[0], addr, addr+1);
../core/cmd_meta.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, out);
../core/cmd_meta.c:			RAnalMetaItem *mi = r_meta_find (core->anal, addr, type, R_META_WHERE_HERE);
../core/cmd_meta.c:				r_meta_print (core->anal, mi, 0, false);
../core/cmd_meta.c:		str = r_meta_get_string (core->anal, type, addr);
../core/cmd_meta.c:		if (type != 'z' && !input[1] && !core->tmpseek) {
../core/cmd_meta.c:			r_meta_list (core->anal, type, 0);
../core/cmd_meta.c:				repeat = r_num_math (core->num, rep + 1);
../core/cmd_meta.c:				n = r_num_math (core->num, t);
../core/cmd_meta.c:							n = r_print_format_struct_size (p + 1, core->print, 0, 0);
../core/cmd_meta.c:						if (n > core->blocksize) {
../core/cmd_meta.c:							n = core->blocksize;
../core/cmd_meta.c:						int r = r_print_format (core->print, addr, core->block,
../core/cmd_meta.c:							fi = r_flag_get_i (core->flags, addr);
../core/cmd_meta.c:				r_meta_add_with_subtype (core->anal, type, subtype, addr, addr_end, name);
../core/cmd_meta.c:				r_meta_add (core->anal, type, addr, addr_end, name);
../core/cmd_meta.c:		//r_meta_cleanup (core->anal->meta, 0LL, UT64_MAX);
../core/cmd_meta.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_meta.c:		var_list = r_anal_var_list (core->anal, fcn, input[0]);
../core/cmd_meta.c:			oldcomment = r_meta_get_var_comment (core->anal, input[0], var->delta, fcn->addr);
../core/cmd_meta.c:		var = r_anal_var_get_byname (core->anal, fcn, name);
../core/cmd_meta.c:		if (!r_anal_var_get (core->anal, fcn->addr, input[0], 1, idx)) {
../core/cmd_meta.c:			oldcomment = r_meta_get_var_comment (core->anal, input[0], idx, fcn->addr);
../core/cmd_meta.c:					r_meta_set_var_comment (core->anal, input[0], idx, fcn->addr, text);
../core/cmd_meta.c:				r_meta_set_var_comment (core->anal, input[0], idx, fcn->addr, comment);
../core/cmd_meta.c:		var = r_anal_var_get_byname (core->anal,fcn, name);
../core/cmd_meta.c:		if (!r_anal_var_get (core->anal, fcn->addr, input[0],1,idx)) {
../core/cmd_meta.c:		r_meta_var_comment_del (core->anal, input[0], idx, fcn->addr);
../core/cmd_meta.c:		var = r_anal_var_get_byname (core->anal,fcn, name);
../core/cmd_meta.c:		oldcomment = r_meta_get_var_comment (core->anal, input[0], var->delta, fcn->addr);
../core/cmd_meta.c:			r_meta_var_comment_del (core->anal, input[0], var->delta, fcn->addr);
../core/cmd_meta.c:			r_meta_set_var_comment (core->anal, input[0], var->delta, fcn->addr, comment);
../core/cmd_meta.c:		r_meta_list (core->anal, R_META_TYPE_ANY, *input);
../core/cmd_meta.c:			i = r_num_math (core->num, input+((input[1]==' ')?2:1));
../core/cmd_meta.c:			r_meta_del (core->anal, R_META_TYPE_ANY, core->offset, i);
../core/cmd_meta.c:		} else r_meta_cleanup (core->anal, 0LL, UT64_MAX);
../core/cmd_meta.c:		f = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_meta.c:			r_anal_str_to_fcn (core->anal, f, input + 2);
../core/cmd_meta.c:		ms = &core->anal->meta_spaces;
../core/cmd_meta.c:				ut64 off = core->offset;
../core/cmd_meta.c:					off = r_num_math (core->num, input+2);
../core/cmd_meta.c:				f = r_flag_get_i (core->flags, off);
../core/cmd_meta.c:					f->space = core->flags->space_idx;
../core/cmd_mount.c:				off = r_num_math (core->num, ptr2+1);
../core/cmd_mount.c:			if (!r_fs_mount (core->fs, ptr, input, off)) {
../core/cmd_mount.c:			if (!(ptr = r_fs_name (core->fs, core->offset))) {
../core/cmd_mount.c:			} else if (!r_fs_mount (core->fs, ptr, input, core->offset)) {
../core/cmd_mount.c:		r_fs_umount (core->fs, input+1);
../core/cmd_mount.c:		r_list_foreach (core->fs->roots, iter, root) {
../core/cmd_mount.c:		r_list_foreach (core->fs->roots, iter, root) {
../core/cmd_mount.c:		r_list_foreach (core->fs->plugins, iter, plug) {
../core/cmd_mount.c:		list = r_fs_dir (core->fs, input);
../core/cmd_mount.c:		r_list_foreach (core->fs->roots, iter, root) {
../core/cmd_mount.c:			off = r_num_math (core->num, ptr+1);
../core/cmd_mount.c:		list = r_fs_partitions (core->fs, input, off);
../core/cmd_mount.c:		file = r_fs_open (core->fs, input);
../core/cmd_mount.c:			r_fs_read (core->fs, file, 0, file->size);
../core/cmd_mount.c:			r_fs_close (core->fs, file);
../core/cmd_mount.c:		file = r_fs_open (core->fs, input);
../core/cmd_mount.c:			r_fs_read (core->fs, file, 0, file->size);
../core/cmd_mount.c:			r_fs_close (core->fs, file);
../core/cmd_mount.c:		} else if (!r_fs_dir_dump (core->fs, input, ptr)) {
../core/cmd_mount.c:				list = r_fs_find_name (core->fs, input, ptr);
../core/cmd_mount.c:				ut64 off = r_num_math (core->num, ptr);
../core/cmd_mount.c:				list = r_fs_find_off (core->fs, input, off);
../core/cmd_mount.c:		if (core->http_up) {
../core/cmd_mount.c:		r_fs_prompt (core->fs, input);
../core/cmd_open.c:				RIODesc *desc = r_io_open (core->io, filename + 1, R_IO_READ, 0);
../core/cmd_open.c:					ut64 addr = r_num_math (core->num, arg);
../core/cmd_open.c:					r_bin_load_io (core->bin, desc->fd, addr, 0, 0);
../core/cmd_open.c:				ut64 addr = r_num_math (core->num, input + 2);
../core/cmd_open.c:					RIODesc *desc = r_io_desc_get (core->io, cf->fd);
../core/cmd_open.c:						r_bin_load_io (core->bin, desc->fd, addr, 0, 0);
../core/cmd_open.c:			r_list_foreach (core->files, iter, file) {
../core/cmd_open.c:				desc = r_io_desc_get (core->io, file->fd);
../core/cmd_open.c:				r_bin_load_io (core->bin, desc->fd, core->offset, 0, 0);
../core/cmd_open.c:		//r_bin_load_io_at_offset_as (core->bin, core->file->desc,
../core/cmd_open.c:			fd = *value && r_is_valid_input_num_value (core->num, value) ?
../core/cmd_open.c:				r_get_input_num_value (core->num, value) : UT32_MAX;
../core/cmd_open.c:			binfile_num = find_binfile_id_by_fd (core->bin, fd);
../core/cmd_open.c:		fd  = *v && r_is_valid_input_num_value (core->num, tmp) ?
../core/cmd_open.c:			r_get_input_num_value (core->num, tmp) : UT32_MAX;
../core/cmd_open.c:			binobj_num  = *v && r_is_valid_input_num_value (core->num, tmp) ?
../core/cmd_open.c:				r_get_input_num_value (core->num, tmp) : UT32_MAX;
../core/cmd_open.c:			binfile_num = find_binfile_id_by_fd (core->bin, fd);
../core/cmd_open.c:		r_core_bin_rebase (core, r_num_math (core->num, input + 3));
../core/cmd_open.c:		binobj_num  = *value && r_is_valid_input_num_value (core->num, value) ?
../core/cmd_open.c:				r_get_input_num_value (core->num, value) : UT32_MAX;
../core/cmd_open.c:					r_bin_file_delete_all (core->bin));
../core/cmd_open.c:			fd  = *value && r_is_valid_input_num_value (core->num, value) ?
../core/cmd_open.c:					r_get_input_num_value (core->num, value) : UT32_MAX;
../core/cmd_open.c:			binfile_num = find_binfile_id_by_fd (core->bin, fd);
../core/cmd_open.c:				if (!r_bin_file_delete (core->bin, fd))
../core/cmd_open.c:		binobj_num = *value && r_is_valid_input_num_value (core->num, value) ?
../core/cmd_open.c:			r_get_input_num_value (core->num, value) : UT32_MAX;
../core/cmd_open.c:			ls_foreach (core->io->maps, iter, map) {
../core/cmd_open.c:			ls_foreach (core->io->maps, iter, map) {
../core/cmd_open.c:			ls_foreach (core->io->maps, iter, map) {
../core/cmd_open.c:		int id = r_num_math (core->num, arg);
../core/cmd_open.c:		ls_foreach (core->io->maps, iter, map) {
../core/cmd_open.c:		ls_foreach (core->io->maps, iter, map) {
../core/cmd_open.c:			if (r_itv_contain (map->itv, core->offset)) {
../core/cmd_open.c:		map = r_io_map_get (core->io, core->offset);
../core/cmd_open.c:			core->print->cb_printf ("map: %i fd: %i +0x%"PFMT64x" 0x%"PFMT64x
../core/cmd_open.c:			id = (ut32)r_num_math (core->num, input+3);	//mapid
../core/cmd_open.c:			new = r_num_math (core->num, P+1);
../core/cmd_open.c:			r_io_map_resize (core->io, id, new);
../core/cmd_open.c:			RIOMap *map = r_io_map_get (core->io, core->offset);
../core/cmd_open.c:				ut64 dst = r_num_math (core->num, input + 3);
../core/cmd_open.c:				r_io_map_remap (core->io, map->id, dst);
../core/cmd_open.c:				id = (ut32)r_num_math (core->num, input+3);	//mapid
../core/cmd_open.c:				new = r_num_math (core->num, P + 1);
../core/cmd_open.c:				r_io_map_remap (core->io, id, new);
../core/cmd_open.c:			fd = r_num_math (core->num, input + 3);
../core/cmd_open.c:			if (!r_io_map_priorize_for_fd (core->io, (int)fd)) {
../core/cmd_open.c:			id = (ut32)r_num_math (core->num, input + 4);
../core/cmd_open.c:			if (!r_io_section_priorize_bin (core->io, id)) {
../core/cmd_open.c:			id = (ut32)r_num_math (core->num, input + 4);
../core/cmd_open.c:			if (!r_io_section_priorize (core->io, id)) {
../core/cmd_open.c:			id = r_num_math (core->num, input + 3);		//mapid
../core/cmd_open.c:			if (r_io_map_exists_for_id (core->io, id)) {
../core/cmd_open.c:				r_io_map_priorize (core->io, id);
../core/cmd_open.c:				paddr = r_num_math (core->num, r_str_word_get0 (s, 3));
../core/cmd_open.c:				size = r_num_math (core->num, r_str_word_get0 (s, 2));
../core/cmd_open.c:				vaddr = r_num_math (core->num, r_str_word_get0 (s, 1));
../core/cmd_open.c:				fd = r_num_math (core->num, r_str_word_get0 (s, 0));
../core/cmd_open.c:			desc = r_io_desc_get (core->io, fd);
../core/cmd_open.c:					size = r_io_fd_size (core->io, fd);
../core/cmd_open.c:				map = r_io_map_add (core->io, fd, rwx_arg ? rwx : desc->flags, paddr, vaddr, size, true);
../core/cmd_open.c:			int fd = r_io_fd_get_current (core->io);
../core/cmd_open.c:			if (r_io_desc_get (core->io, fd)) {
../core/cmd_open.c:				map_list (core->io, 0, core->print, fd);
../core/cmd_open.c:			RIOMap *map = r_io_map_get (core->io, core->offset);
../core/cmd_open.c:				id = (ut32)r_num_math (core->num, s);
../core/cmd_open.c:				map = r_io_map_get (core->io, id);
../core/cmd_open.c:			id = (ut32)r_num_math (core->num, s);
../core/cmd_open.c:			map = r_io_map_get (core->io, id);
../core/cmd_open.c:			ut64 fd = input[3]? r_num_math (core->num, input + 3): UT64_MAX;
../core/cmd_open.c:			RIODesc *desc = r_io_desc_get (core->io, fd);
../core/cmd_open.c:				fd = r_io_fd_get_current (core->io);
../core/cmd_open.c:				desc = r_io_desc_get (core->io, fd);
../core/cmd_open.c:				map = r_io_map_add (core->io, fd, desc->flags, 0, 0, size, true);
../core/cmd_open.c:			r_io_map_reset (core->io);
../core/cmd_open.c:			r_io_map_del (core->io, r_num_math (core->num, input + 2));
../core/cmd_open.c:		map_list (core->io, input[1], core->print, -1);
../core/cmd_open.c:		list_maps_visual (core->io, core->offset, core->blocksize,
../core/cmd_open.c:			r_cons_get_size (NULL), r_config_get_i (core->config, "scr.color"));
../core/cmd_open.c:	r_list_foreach (core->files, iter, f) {
../core/cmd_open.c:		ut64 sz = r_io_fd_size (core->io, f->fd);
../core/cmd_open.c:		(void)r_io_pread_at (core->io, 0, buf, sz);
../core/cmd_open.c:		RIODesc *desc = r_io_open (core->io, url, R_IO_READ | R_IO_WRITE, 0);		//use r_io_desc_exchange pls
../core/cmd_open.c:			r_io_fd_close (core->io, f->fd);
../core/cmd_open.c:			(void)r_io_write_at (core->io, 0, buf, sz);
../core/cmd_open.c:	RCoreFile *ofile = core->file;
../core/cmd_open.c:	if (!ofile || !(desc = r_io_desc_get (core->io, ofile->fd)) || !desc->uri) {
../core/cmd_open.c:	bf = r_bin_file_find_by_fd (core->bin, ofile->fd);
../core/cmd_open.c:	int bits = core->assembler->bits;
../core/cmd_open.c:	r_config_set_i (core->config, "asm.bits", bits);
../core/cmd_open.c:	r_config_set_i (core->config, "cfg.debug", true);
../core/cmd_open.c:	ut64 new_baddr = r_debug_get_baddr (core->dbg, newfile);
../core/cmd_open.c:	ut64 old_baddr = r_config_get_i (core->config, "bin.baddr");
../core/cmd_open.c:		r_bin_set_baddr (core->bin, new_baddr);
../core/cmd_open.c:		r_config_set_i (core->config, "bin.baddr", new_baddr);
../core/cmd_open.c:	ut64 baddr = r_config_get_i (core->config, "bin.baddr"),
../core/cmd_open.c:	int nowarn = r_config_get_i (core->config, "file.nowarn"),
../core/cmd_open.c:			if (r_num_is_valid_input (core->num, argv[1])) {
../core/cmd_open.c:				addr = r_num_math (core->num, argv[1]);
../core/cmd_open.c:			addr = r_num_math (core->num, argv[1]);
../core/cmd_open.c:			r_io_map_add (core->io, fd, perms, 0LL, addr,
../core/cmd_open.c:					r_io_fd_size (core->io, fd), true);
../core/cmd_open.c:		fd = r_io_fd_open (core->io, argv[0], perms, 0);
../core/cmd_open.c:			int fd = r_num_math (core->num, input + 1);
../core/cmd_open.c:				RIODesc *desc = r_io_desc_get (core->io, fd);
../core/cmd_open.c:					core->io->desc = desc;
../core/cmd_open.c:				if (r_num_is_valid_input (core->num, argv[1])) {
../core/cmd_open.c:					addr = r_num_math (core->num, argv[1]);
../core/cmd_open.c:				addr = r_num_math (core->num, argv[1]);
../core/cmd_open.c:		r_id_storage_foreach (core->io->files, init_desc_list_visual_cb, core->print);
../core/cmd_open.c:		r_id_storage_foreach (core->io->files, desc_list_visual_cb, core->print);
../core/cmd_open.c:		r_id_storage_foreach (core->io->files, desc_list_quiet_cb, core->print);
../core/cmd_open.c:		r_id_storage_foreach (core->io->files, desc_list_cb, core->print);
../core/cmd_open.c:			if (r_lib_open (core->lib, input+2) == R_FAIL) {
../core/cmd_open.c:			r_io_plugin_list (core->io);
../core/cmd_open.c:				int nth = r_num_math (core->num, input + 2);
../core/cmd_open.c:				r_list_foreach (core->files, iter, f) {
../core/cmd_open.c:						r_io_use_fd (core->io, f->fd);
../core/cmd_open.c:				int nth = r_num_math (core->num, input + 2);
../core/cmd_open.c:				r_list_foreach (core->files, iter, f) {
../core/cmd_open.c:			core->switch_file_view = 0;
../core/cmd_open.c:			r_list_foreach (core->files, iter, f) {
../core/cmd_open.c:					core->file = f;
../core/cmd_open.c:			r_io_use_fd (core->io, num);
../core/cmd_open.c:			binfile_num = find_binfile_id_by_fd (core->bin, num);
../core/cmd_open.c:			r_io_close_all (core->io);
../core/cmd_open.c:			r_bin_file_delete_all (core->bin);
../core/cmd_open.c:			r_list_purge(core->files);
../core/cmd_open.c:			r_io_close_all (core->io);
../core/cmd_open.c:			r_bin_file_delete_all (core->bin);
../core/cmd_open.c:			r_anal_purge (core->anal);
../core/cmd_open.c:			r_flag_unset_all (core->flags);
../core/cmd_open.c:				int fd = (int)r_num_math (core->num, input + 1);
../core/cmd_open.c:				RIODesc *desc = r_io_desc_get (core->io, core->file->fd);
../core/cmd_open.c:			} else if (core && core->io && core->io->desc) {
../core/cmd_open.c:					fd = (int)r_num_math (core->num, ptr + 1);
../core/cmd_open.c:					fd = core->io->desc->fd;
../core/cmd_open.c:				if (r_io_reopen (core->io, fd, R_IO_READ | R_IO_WRITE, 644)) {
../core/cmd_open.c:					ls_foreach_prev (core->io->maps, iter, map) {
../core/cmd_open.c:			if (core && core->io && core->io->desc) {
../core/cmd_open.c:					fd = (int)r_num_math (core->num, ptr + 1);
../core/cmd_open.c:					fd = core->io->desc->fd;
../core/cmd_open.c:				r_io_reopen (core->io, fd, R_IO_READ, 644);
../core/cmd_open.c:				fdx = (int)r_num_math (core->num, ptr + 1);
../core/cmd_open.c:					fd = r_num_math (core->num, ptr + 1);
../core/cmd_open.c:			r_io_desc_exchange (core->io, fd, fdx);
../core/cmd_print.c:	int cols = r_config_get_i (core->config, "hex.pcols") + core->print->cols; // * 3.5;
../core/cmd_print.c:	bool show_color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:	bool show_flags = r_config_get_i (core->config, "asm.flags");
../core/cmd_print.c:	bool show_cursor = core->print->cur_enabled;
../core/cmd_print.c:		r_print_addr (core->print, core->offset + i);
../core/cmd_print.c:			ut8 *p = (ut8 *) core->block + j;
../core/cmd_print.c:				if (show_cursor && core->print->cur == j) {
../core/cmd_print.c:				if (show_cursor && core->print->cur == j) {
../core/cmd_print.c:					RFlagItem *fi = r_flag_get_i (core->flags, core->offset + j);
../core/cmd_print.c:	int colwidth = r_config_get_i (core->config, "hex.cols") * 2.5;
../core/cmd_print.c:	int obsz = core->blocksize;
../core/cmd_print.c:	int user_rows = r_num_math (core->num, input);
../core/cmd_print.c:	bool asm_minicols = r_config_get_i (core->config, "asm.minicols");
../core/cmd_print.c:	char *o_ao = strdup (r_config_get (core->config, "asm.offset"));
../core/cmd_print.c:	char *o_ab = strdup (r_config_get (core->config, "asm.bytes"));
../core/cmd_print.c:		r_config_set (core->config, "asm.offset", "false");
../core/cmd_print.c:// r_config_set (core->config, "asm.bytes", "false");
../core/cmd_print.c:	r_config_set (core->config, "asm.bytes", "false");
../core/cmd_print.c:	ut64 osek = core->offset;
../core/cmd_print.c:	c->color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:		r_config_set (core->config, "asm.offset", o_ao);
../core/cmd_print.c:		r_config_set (core->config, "asm.bytes", o_ab);
../core/cmd_print.c:	r_config_set (core->config, "asm.bytes", o_ab);
../core/cmd_print.c:	RList *cs = r_bin_get_classes (core->bin);
../core/cmd_print.c:		// resolve by core->offset
../core/cmd_print.c:	int colwidth = r_config_get_i (core->config, "hex.cols") * 2.5;
../core/cmd_print.c:	int obsz = core->blocksize;
../core/cmd_print.c:	int user_rows = r_num_math (core->num, input);
../core/cmd_print.c:	bool asm_minicols = r_config_get_i (core->config, "asm.minicols");
../core/cmd_print.c:	char *o_ao = strdup (r_config_get (core->config, "asm.offset"));
../core/cmd_print.c:	char *o_ab = strdup (r_config_get (core->config, "asm.bytes"));
../core/cmd_print.c:		r_config_set (core->config, "asm.offset", "false");
../core/cmd_print.c:		r_config_set (core->config, "asm.bytes", "false");
../core/cmd_print.c:	r_config_set (core->config, "asm.bytes", "false");
../core/cmd_print.c:	ut64 osek = core->offset;
../core/cmd_print.c:	c->color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:		r_config_set (core->config, "asm.offset", o_ao);
../core/cmd_print.c:		r_config_set (core->config, "asm.bytes", o_ab);
../core/cmd_print.c:	r_config_set (core->config, "asm.bytes", o_ab);
../core/cmd_print.c:	int hex_cols = r_config_get_i (core->config, "hex.cols");
../core/cmd_print.c:	int user_rows = r_num_math (core->num, input);
../core/cmd_print.c:	r_config_set_i (core->config, "hex.cols", colwidth / 5);
../core/cmd_print.c:	ut64 tsek = core->offset;
../core/cmd_print.c:	c->color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:	r_config_set_i (core->config, "hex.cols", hex_cols);
../core/cmd_print.c:	r_config_set (core->config, "asm.arch", arch);
../core/cmd_print.c:	r_config_set_i (core->config, "asm.bits", bits);
../core/cmd_print.c:	r_config_set_i (core->config, "asm.segoff", segoff);
../core/cmd_print.c:	int bsize = r_num_math (core->num, arg);
../core/cmd_print.c:	if (bsize <= core->blocksize) {
../core/cmd_print.c:		r_core_print_disasm_json (core, core->offset, core->block,
../core/cmd_print.c:			r_io_read_at (core->io, core->offset, buf, bsize);
../core/cmd_print.c:			r_core_print_disasm_json (core, core->offset, buf, bsize, 0);
../core/cmd_print.c:	int nblines = r_num_math (core->num, arg);
../core/cmd_print.c:	r_core_print_disasm_json (core, core->offset, core->block, core->blocksize, nblines);
../core/cmd_print.c:		*blocksize = r_num_is_valid_input (core->num, input_one)? r_num_get_input_value (core->num, input_one): 0;
../core/cmd_print.c:		*asm_arch = r_asm_is_valid (core->assembler, input_two)? strdup (input_two): NULL;
../core/cmd_print.c:		*bits = r_num_get_input_value (core->num, input_three);
../core/cmd_print.c:		*blocksize = r_num_is_valid_input (core->num, input_one)? r_num_get_input_value (core->num, input_one): 0;
../core/cmd_print.c:		if (!r_num_is_valid_input (core->num, input_one)) {
../core/cmd_print.c:			*asm_arch = r_asm_is_valid (core->assembler, input_one)? strdup (input_one): NULL;
../core/cmd_print.c:			*bits = r_num_is_valid_input (core->num, input_two)? r_num_get_input_value (core->num, input_two): -1;
../core/cmd_print.c:			*bits = r_num_is_valid_input (core->num, input_two)? r_num_get_input_value (core->num, input_two): -1;
../core/cmd_print.c:			*asm_arch = r_asm_is_valid (core->assembler, input_two)? strdup (input_two): NULL;
../core/cmd_print.c:		*blocksize = r_num_is_valid_input (core->num, input_one)? r_num_get_input_value (core->num, input_one): 0;
../core/cmd_print.c:		if (!r_num_is_valid_input (core->num, input_one)) {
../core/cmd_print.c:			*asm_arch = r_asm_is_valid (core->assembler, input_one)? strdup (input_one): NULL;
../core/cmd_print.c:		*asm_arch = r_asm_is_valid (core->assembler, input_two)? strdup (input_two): NULL;
../core/cmd_print.c:		*bits = r_num_get_input_value (core->num, input_three);
../core/cmd_print.c:		*bits = r_num_is_valid_input (core->num, input_two)? r_num_get_input_value (core->num, input_two): -1;
../core/cmd_print.c:		*asm_arch = r_asm_is_valid (core->assembler, input_two)? strdup (input_two): NULL;
../core/cmd_print.c:			val = sdb_get (core->print->formats, _input, NULL);
../core/cmd_print.c:				r_cons_printf ("%d bytes\n", r_print_format_struct_size (val, core->print, mode, 0));
../core/cmd_print.c:				r_cons_printf ("%d bytes\n", r_print_format_struct_size (_input, core->print, mode, 0));
../core/cmd_print.c:				Sdb *sht = core->print->formats;
../core/cmd_print.c:	core->print->reg = core->dbg->reg;
../core/cmd_print.c:	core->print->get_register = r_reg_get;
../core/cmd_print.c:	core->print->get_register_value = r_reg_get_value;
../core/cmd_print.c:	int o_blocksize = core->blocksize;
../core/cmd_print.c:		core->print->num = core->num;
../core/cmd_print.c:			SdbList *sdbls = sdb_foreach_list (core->print->formats, false);
../core/cmd_print.c:				sdb_free (core->print->formats);
../core/cmd_print.c:				core->print->formats = sdb_new0 ();
../core/cmd_print.c:				sdb_unset (core->print->formats, input + 3, 0);
../core/cmd_print.c:					sdb_set (core->print->formats, name, space, 0);
../core/cmd_print.c:			!sdb_get (core->print->formats, name, NULL)) {
../core/cmd_print.c:			fmt = sdb_get (core->print->formats, name, NULL);
../core/cmd_print.c:				int size = r_print_format_struct_size (fmt, core->print, mode, 0) + 10;
../core/cmd_print.c:				if (size > core->blocksize) {
../core/cmd_print.c:					r_print_format (core->print, core->offset,
../core/cmd_print.c:						core->block, core->blocksize, name, mode, eq, dot);
../core/cmd_print.c:					r_print_format (core->print, core->offset,
../core/cmd_print.c:						core->block, core->blocksize, name, mode, NULL, dot);
../core/cmd_print.c:				r_print_format (core->print, core->offset,
../core/cmd_print.c:					core->block, core->blocksize, name, mode, NULL, NULL);
../core/cmd_print.c:		int size = r_print_format_struct_size (fmt, core->print, mode, 0) + 10;
../core/cmd_print.c:		if (size > core->blocksize) {
../core/cmd_print.c:			r_print_format (core->print, core->offset,
../core/cmd_print.c:				core->block, core->blocksize, fmt, mode, NULL, NULL);
../core/cmd_print.c:	const int usecolor = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:	int nb_cols = r_config_get_i (core->config, "hex.cols");
../core/cmd_print.c:	core->print->use_comments = r_config_get_i (core->config, "hex.comments");
../core/cmd_print.c:	int flagsz = r_config_get_i (core->config, "hex.flagsz");
../core/cmd_print.c:	const ut8 *buf = core->block;
../core/cmd_print.c:	ut64 addr = core->offset;
../core/cmd_print.c:	const int col = core->print->col;
../core/cmd_print.c:	int html = r_config_get_i (core->config, "scr.html");
../core/cmd_print.c:			append (ebytes, core->cons->pal.offset);
../core/cmd_print.c:			comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr + j);
../core/cmd_print.c:			flag = r_flag_get_i (core->flags, addr + j);
../core/cmd_print.c:					fend = addr + flagsz; // core->blocksize;
../core/cmd_print.c:			here = R_MIN ((i * nb_cols) + j, core->blocksize);
../core/cmd_print.c:			if (core->print->ocur != -1) {
../core/cmd_print.c:				low = R_MIN (core->print->cur, core->print->ocur);
../core/cmd_print.c:				max = R_MAX (core->print->cur, core->print->ocur);
../core/cmd_print.c:				low = max = core->print->cur;
../core/cmd_print.c:			if (core->print->cur_enabled) {
../core/cmd_print.c:			if (core->print->cur_enabled && max == here) {
../core/cmd_print.c:		if (core->print->use_comments) {
../core/cmd_print.c:				const char *comment = core->print->get_comments (core->print->user, addr + j);
../core/cmd_print.c:	ut64 addr = core->offset;
../core/cmd_print.c:	int size = (core->anal->bits / 4);
../core/cmd_print.c:		addr = r_num_math (core->num, p);
../core/cmd_print.c:		r_list_foreach (core->flags->flags, iter, flag)
../core/cmd_print.c:		j = r_flag_space_get (core->flags, "strings");
../core/cmd_print.c:		r_list_foreach (core->flags->flags, iter, flag) {
../core/cmd_print.c:	int col = core->cons->columns > 123;
../core/cmd_print.c:	ut8 *b = malloc (core->blocksize);
../core/cmd_print.c:	ut64 addr = core->offset;
../core/cmd_print.c:	memset (b, 0xff, core->blocksize);
../core/cmd_print.c:	r_core_read_at (core, to + delta, b, core->blocksize);
../core/cmd_print.c:	r_print_hexdiff (core->print, core->offset, core->block,
../core/cmd_print.c:		to + delta, b, core->blocksize, col);
../core/cmd_print.c:	RConsPalette *pal = &core->cons->pal;
../core/cmd_print.c:	int cols = r_config_get_i (core->config, "hex.cols");
../core/cmd_print.c:	int show_color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:	int onechar = r_config_get_i (core->config, "hex.onechar");
../core/cmd_print.c:	bool show_cursor = core->print->cur_enabled;
../core/cmd_print.c:	if (len < 0 || len > core->blocksize) {
../core/cmd_print.c:			"0x%08"PFMT64x "  ", core->offset);
../core/cmd_print.c:			r_cons_printf ("0x%08"PFMT64x "  ", core->offset + i);
../core/cmd_print.c:		if (r_anal_op (core->anal, &op, core->offset + i, core->block + i, len - i) <= 0) {
../core/cmd_print.c:			if (core->print->cur >= i && core->print->cur < i + opsz) {
../core/cmd_print.c:			if (core->print->cur >= i && core->print->cur < i + opsz) {
../core/cmd_print.c:	int obsz = core->blocksize;
../core/cmd_print.c:			len = core->blocksize;
../core/cmd_print.c:	r_print_raw (core->print, core->offset, core->block, len, mode);
../core/cmd_print.c:	core->cons->newline = true;
../core/cmd_print.c:	if (!core || !core->assembler || !core->assembler->cur) {
../core/cmd_print.c:	if (strstr (core->assembler->cur->arch, "x86")) {
../core/cmd_print.c:	} else if (strstr (core->assembler->cur->arch, "arm")) {
../core/cmd_print.c:	int i, count, use_color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:	bool show_comments = r_config_get_i (core->config, "asm.comments");
../core/cmd_print.c:	r_config_set_i (core->config, "scr.color", 0);
../core/cmd_print.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/cmd_print.c:			r_config_set_i (core->config, "scr.color", use_color);
../core/cmd_print.c:	r_config_set_i (core->config, "scr.color", use_color);
../core/cmd_print.c:			RConsPalette *pal = &core->cons->pal;
../core/cmd_print.c:					flag = r_flag_get_i2 (core->flags, ptr);
../core/cmd_print.c:	ut32 osize = 0, len = core->blocksize;
../core/cmd_print.c:	if (ptr && ptr[1]) { // && r_num_is_valid_input (core->num, ptr + 1)) {
../core/cmd_print.c:		int nlen = r_num_math (core->num, ptr + 1);
../core/cmd_print.c:		osize = core->blocksize;
../core/cmd_print.c:		if (nlen > core->blocksize) {
../core/cmd_print.c:			if (nlen != core->blocksize) {
../core/cmd_print.c:			hash_handlers[pos].handler (core->block, len);
../core/cmd_print.c:	int i, n = core->assembler->bits / 8;
../core/cmd_print.c:			r_num_math (core->num, "[$$]"),
../core/cmd_print.c:			v = r_read_ble8 (core->block);
../core/cmd_print.c:			v = r_read_ble16 (core->block, core->print->big_endian);
../core/cmd_print.c:			v = r_read_ble32 (core->block, core->print->big_endian);
../core/cmd_print.c:			v = r_read_ble64 (core->block, core->print->big_endian);
../core/cmd_print.c:			v = r_read_ble64 (core->block, core->print->big_endian);
../core/cmd_print.c:			switch (core->assembler->bits / 8) {
../core/cmd_print.c:		ut64 off = core->offset + (i + skipblocks) * blocksize;
../core/cmd_print.c:			nblocks = r_num_math (core->num, spc + 1);
../core/cmd_print.c:				nblocks = core->blocksize;
../core/cmd_print.c:				totalsize = r_num_math (core->num, spc + 1);
../core/cmd_print.c:					skipblocks = r_num_math (core->num, spc + 1);
../core/cmd_print.c:		if (core->file && core->io) {
../core/cmd_print.c:			totalsize = r_io_fd_size (core->io, core->file->fd);
../core/cmd_print.c:	blocksize = (blocksize > 0)? (totalsize / blocksize): (core->blocksize);
../core/cmd_print.c:					ut64 off = core->offset + blocksize * (i + skipblocks);
../core/cmd_print.c:				r_print_columns (core->print, ptr, nblocks, 14);
../core/cmd_print.c:				ut64 off = core->offset + (blocksize * (i + skipblocks));
../core/cmd_print.c:			r_print_columns (core->print, ptr, nblocks, 14); //core->block, core->blocksize, 10);
../core/cmd_print.c:			r_print_columns (core->print, core->block, core->blocksize, 14);
../core/cmd_print.c:			ut64 bufsz = r_num_math (core->num, input + 3);
../core/cmd_print.c:			ut64 curbsz = core->blocksize;
../core/cmd_print.c:			if (bufsz > core->blocksize) {
../core/cmd_print.c:			cmd_print_eq_dict (core, core->block, bufsz);
../core/cmd_print.c:			cmd_print_eq_dict (core, core->block, core->blocksize);
../core/cmd_print.c:			ut64 off = core->offset + (blocksize * (i + skipblocks));
../core/cmd_print.c:				if (r_flag_get_at (core->flags, off + j, false)) {
../core/cmd_print.c:			ut64 off = core->offset + (blocksize * (i + skipblocks));
../core/cmd_print.c:			ut64 off = core->offset + blocksize * (i + skipblocks);
../core/cmd_print.c:		r_core_read_at (core, core->offset, ptr, nblocks);
../core/cmd_print.c:		r_print_fill (core->print, ptr, nblocks, core->offset, blocksize);
../core/cmd_print.c:				blocksize, core->offset, totalsize);
../core/cmd_print.c:				off += core->offset;
../core/cmd_print.c:				ut64 off = core->offset + (blocksize * i);
../core/cmd_print.c:				if (core->print->cur_enabled) {
../core/cmd_print.c:					if (i == core->print->cur) {
../core/cmd_print.c:						core->num->value = off;
../core/cmd_print.c:			core->print->num = core->num;
../core/cmd_print.c:			r_print_fill (core->print, ptr, nblocks, core->offset, blocksize);
../core/cmd_print.c:	if (!r_io_is_valid_offset (core->io, origin, 0) ||
../core/cmd_print.c:	    !r_io_is_valid_offset (core->io, offset, 0)) {
../core/cmd_print.c:		if (!r_io_is_valid_offset (core->io, addr, 0)) {
../core/cmd_print.c:	core->anal->gp = saved_gp;
../core/cmd_print.c:			r_reg_arena_poke (core->anal->reg, b->parent_reg_arena);
../core/cmd_print.c:			gp = r_reg_getv (core->anal->reg, "gp");
../core/cmd_print.c:				core->anal->gp = gp;
../core/cmd_print.c:			r_reg_arena_poke (core->anal->reg, saved_arena);
../core/cmd_print.c:		core->anal->stackptr = b->parent_stackptr;
../core/cmd_print.c:				if (emu && core->anal->last_disasm_reg != NULL && !jumpbb->parent_reg_arena) {
../core/cmd_print.c:					jumpbb->parent_reg_arena = r_reg_arena_dup (core->anal->reg, core->anal->last_disasm_reg);
../core/cmd_print.c:					jumpbb->parent_stackptr = core->anal->stackptr + b->stackptr;
../core/cmd_print.c:				if (emu && core->anal->last_disasm_reg != NULL && !failbb->parent_reg_arena) {
../core/cmd_print.c:					failbb->parent_reg_arena = r_reg_arena_dup (core->anal->reg, core->anal->last_disasm_reg);
../core/cmd_print.c:					failbb->parent_stackptr = core->anal->stackptr + b->stackptr;
../core/cmd_print.c:#define P(x) (core->cons && core->cons->pal.x)? core->cons->pal.x
../core/cmd_print.c:	ut8 *buf = core->block;
../core/cmd_print.c:	int loop, len = core->blocksize;
../core/cmd_print.c:			r_asm_set_pc (core->assembler, addr + i);
../core/cmd_print.c:			ret = r_asm_disassemble (core->assembler, &asmop, buf + i, len - i);
../core/cmd_print.c:			ret = r_anal_op (core->anal, &aop, addr + i, buf +i , len - i);
../core/cmd_print.c:				asm_str = r_print_colorize_opcode (core->print, asm_str, color_reg, color_num, false);
../core/cmd_print.c:				char *hexstr = r_print_hexpair (core->print, asmop.buf_hex, -1);
../core/cmd_print.c:				r_print_offset (core->print, addr + i, 0, 0, 0, 0, NULL);
../core/cmd_print.c:					r_io_read_at (core->io, b->addr, buf, b->size);
../core/cmd_print.c:			r_core_print_disasm_json (core, core->offset, buf, bsize, 0);
../core/cmd_print.c:				r_io_read_at (core->io, b->addr, buf, b->size);
../core/cmd_print.c:					r_io_read_at (core->io, b->addr, buf, b->size);
../core/cmd_print.c:		bool asm_lines = r_config_get_i (core->config, "asm.lines");
../core/cmd_print.c:		bool emu = r_config_get_i (core->config, "asm.emu");
../core/cmd_print.c:		int saved_stackptr = core->anal->stackptr;
../core/cmd_print.c:			saved_gp = core->anal->gp;
../core/cmd_print.c:			saved_arena = r_reg_arena_peek (core->anal->reg);
../core/cmd_print.c:		r_config_set_i (core->config, "asm.lines", 0);
../core/cmd_print.c:			core->anal->gp = saved_gp;
../core/cmd_print.c:				r_reg_arena_poke (core->anal->reg, saved_arena);
../core/cmd_print.c:		core->anal->stackptr = saved_stackptr;
../core/cmd_print.c:		r_config_set_i (core->config, "asm.lines", asm_lines);
../core/cmd_print.c:	ut32 tbs = core->blocksize;
../core/cmd_print.c:	const int addrbytes = core->io->addrbytes;
../core/cmd_print.c:	r_print_init_rowoffsets (core->print);
../core/cmd_print.c:	l = len = core->blocksize;
../core/cmd_print.c:			l = (int) r_num_math (core->num, p + 1);
../core/cmd_print.c:				int n = (st32) l; // r_num_math (core->num, input+1);
../core/cmd_print.c:					off = core->offset + n;
../core/cmd_print.c:					tmpseek = core->offset;
../core/cmd_print.c:							l *= core->print->cols;
../core/cmd_print.c:						l = core->blocksize;
../core/cmd_print.c:	if (len > core->blocksize) {
../core/cmd_print.c:		len = core->blocksize;
../core/cmd_print.c:		n = core->blocksize_max;
../core/cmd_print.c:		RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_print.c:			eprintf ("p: Cannot find function at 0x%08"PFMT64x "\n", core->offset);
../core/cmd_print.c:			core->num->value = 0;
../core/cmd_print.c:	core->num->value = len;
../core/cmd_print.c:	if (len > core->blocksize) {
../core/cmd_print.c:		len = core->blocksize;
../core/cmd_print.c:				ut8 *data = calloc (core->offset + 1, 1);
../core/cmd_print.c:					data[core->offset] = 0;
../core/cmd_print.c:					(void)r_core_read_at (core, 0, data, core->offset);
../core/cmd_print.c:					char *res = r_print_json_path ((const char *)data, core->offset);
../core/cmd_print.c:					eprintf ("Cannot allocate %d\n", (int)(core->offset));
../core/cmd_print.c:				r_core_cmdf (core, "pj %"PFMT64d" @ 0", core->offset);
../core/cmd_print.c:			char *str = r_str_ndup ((const char *)core->block, core->blocksize);
../core/cmd_print.c:		w = core->print->cols * 2.7;
../core/cmd_print.c:		off = core->offset;
../core/cmd_print.c:			RList *list = r_core_get_boundaries (core, r_config_get (core->config, "search.in"));
../core/cmd_print.c:		bool use_color = r_config_get_i (core->config, "scr.color");
../core/cmd_print.c:					RIOSection *s = r_io_section_vget (core->io, at);
../core/cmd_print.c:		const ut64 saved_from = r_config_get_i (core->config, "search.from"),
../core/cmd_print.c:				saved_to = r_config_get_i (core->config, "search.to"),
../core/cmd_print.c:				saved_maxhits = r_config_get_i (core->config, "search.maxhits");
../core/cmd_print.c:		int want = r_num_math (core->num, input + 1);
../core/cmd_print.c:			r_config_set_i (core->config, "search.maxhits", want);
../core/cmd_print.c:			r_config_set_i (core->config, "search.from", core->offset);
../core/cmd_print.c:			r_config_set_i (core->config, "search.to", core->offset + core->blocksize);
../core/cmd_print.c:			r_config_set_i (core->config, "search.maxhits", saved_maxhits);
../core/cmd_print.c:			r_config_set_i (core->config, "search.from", saved_from);
../core/cmd_print.c:			r_config_set_i (core->config, "search.to", saved_to);
../core/cmd_print.c:		old_arch = strdup (r_config_get (core->config, "asm.arch"));
../core/cmd_print.c:		old_bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_print.c:		segoff = r_config_get_i (core->config, "asm.segoff");
../core/cmd_print.c:				r_anal_hint_set_bits (core->anal, core->offset, new_bits);
../core/cmd_print.c:				ret = r_anal_op (core->anal, &aop, core->offset,
../core/cmd_print.c:				r_asm_set_pc (core->assembler, core->offset);
../core/cmd_print.c:				c = r_asm_mdisassemble_hexstr (core->assembler, hex);
../core/cmd_print.c:			r_asm_set_pc (core->assembler, core->offset);
../core/cmd_print.c:			acode = r_asm_massemble (core->assembler, input + 1);
../core/cmd_print.c:					ut8 b = acode->buf[i]; // core->print->big_endian? (bytes - 1 - i): i ];
../core/cmd_print.c:			r_anal_hint_set_bits (core->anal, core->offset, old_bits);
../core/cmd_print.c:			r_anal_build_range_on_hints (core->anal);
../core/cmd_print.c:			r_core_seek_archbits (core, core->offset);
../core/cmd_print.c:			// r_anal_hint_set_bits (core->anal, core->offset, oldbits);
../core/cmd_print.c:				len = r_num_math (core->num, spc + 1);
../core/cmd_print.c:					from = r_num_math (core->num, spc + 1);
../core/cmd_print.c:				r_str_bits (buf, core->block, size, NULL);
../core/cmd_print.c:				len = core->blocksize;
../core/cmd_print.c:				r_str_bits (buf, core->block, size, NULL);
../core/cmd_print.c:					cmd_pDj (core, sdb_fmt (0, "%d", core->blocksize));
../core/cmd_print.c:			const RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_print.c:				r_core_print_disasm_all (core, core->offset,
../core/cmd_print.c:				RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_print.c:					ut32 bsz = core->blocksize;
../core/cmd_print.c:						core->blocksize, l);
../core/cmd_print.c:			RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_print.c:				eprintf ("Cannot find function at 0x%08"PFMT64x "\n", core->offset);
../core/cmd_print.c:				core->num->value = 0;
../core/cmd_print.c:			RAnalBlock *b = r_anal_bb_from_offset (core->anal, core->offset);
../core/cmd_print.c:					r_core_print_disasm_instructions (core, b->size - (core->offset - b->addr), 0);
../core/cmd_print.c:				eprintf ("Cannot find function at 0x%08"PFMT64x "\n", core->offset);
../core/cmd_print.c:				core->num->value = 0;
../core/cmd_print.c:		ut64 current_offset = core->offset;
../core/cmd_print.c:		ut64 use_blocksize = core->blocksize;
../core/cmd_print.c:		old_arch = strdup (r_config_get (core->config, "asm.arch"));
../core/cmd_print.c:		segoff = r_config_get_i (core->config, "asm.segoff");
../core/cmd_print.c:		old_bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_print.c:				int len = (int) r_num_math (core->num, p);
../core/cmd_print.c:			use_blocksize = core->blocksize;
../core/cmd_print.c:		if (core->blocksize_max < use_blocksize && (int) use_blocksize < -core->blocksize_max) {
../core/cmd_print.c:				(ut64) core->blocksize_max, (ut64) use_blocksize, input[0], (ut64) use_blocksize);
../core/cmd_print.c:		} else if (core->blocksize_max < use_blocksize && (int) use_blocksize > -core->blocksize_max) {
../core/cmd_print.c:			r_anal_hint_set_bits (core->anal, core->offset, new_bits);
../core/cmd_print.c:			r_core_print_disasm_all (core, core->offset, l, len, input[2]);
../core/cmd_print.c:			disasm_recursive (core, core->offset, 'D');
../core/cmd_print.c:				RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_print.c:					eprintf ("Cannot find function at 0x%08"PFMT64x "\n", core->offset);
../core/cmd_print.c:				RAnalBlock *b = r_anal_bb_from_offset (core->anal, core->offset);
../core/cmd_print.c:						core->num->value = r_core_print_disasm (
../core/cmd_print.c:							core->print, core, b->addr, block,
../core/cmd_print.c:					eprintf ("Cannot find function at 0x%08"PFMT64x "\n", core->offset);
../core/cmd_print.c:					core->num->value = 0;
../core/cmd_print.c:				ut64 oseek = core->offset;
../core/cmd_print.c:				int oblock = core->blocksize;
../core/cmd_print.c:				RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_print.c:				ut32 bsz = core->blocksize;
../core/cmd_print.c:				RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_print.c:							r_io_read_at (core->io, tmp_func->addr, loc_buf, cont_size);
../core/cmd_print.c:						r_io_read_at (core->io, f->addr, func_buf, cont_size);
../core/cmd_print.c:							r_io_read_at (core->io, tmp_func->addr, loc_buf, cont_size);
../core/cmd_print.c:					eprintf ("pdf: Cannot find function at 0x%08"PFMT64x "\n", core->offset);
../core/cmd_print.c:					core->num->value = 0;
../core/cmd_print.c:				if (bsz != core->blocksize) {
../core/cmd_print.c:				const ut8 *buf = core->block;
../core/cmd_print.c:				for (i = j = 0; i < core->blocksize && j < l; i += ret, j++) {
../core/cmd_print.c:					ret = r_asm_disassemble (core->assembler, &asmop, buf + i, len - i);
../core/cmd_print.c:			if (*input == 'd' && !core->fixedblock) {
../core/cmd_print.c:			ut64 addr = core->offset;
../core/cmd_print.c:				block = malloc (core->blocksize);
../core/cmd_print.c:						r_core_read_at (core, addr - l, block, l); // core->blocksize);
../core/cmd_print.c:						core->num->value = r_core_print_disasm (core->print, core, addr - l, block, l, l, 0, 1);
../core/cmd_print.c:						if (r_core_prevop_addr (core, core->offset, l, &start)) {
../core/cmd_print.c:							instr_len = core->offset - start;
../core/cmd_print.c:						ut64 prevaddr = core->offset;
../core/cmd_print.c:						int bs = core->blocksize, bs1 = addrbytes * instr_len;
../core/cmd_print.c:						memcpy (block, core->block, bs);
../core/cmd_print.c:						core->num->value = r_core_print_disasm (core->print,
../core/cmd_print.c:							core, core->offset, block, bs1, l, 0, 1);
../core/cmd_print.c:				const int bs = core->blocksize;
../core/cmd_print.c:						if (addrbytes * l > core->blocksize) {
../core/cmd_print.c:							r_core_read_at (core, addr, block, addrbytes * l); // core->blocksize);
../core/cmd_print.c:							memcpy (block, core->block, addrbytes * l);
../core/cmd_print.c:						core->num->value = r_core_print_disasm (core->print,
../core/cmd_print.c:					memcpy (block, core->block, bs);
../core/cmd_print.c:					core->num->value = r_core_print_disasm (core->print, core, addr, block, bs1, l, 0, 0);
../core/cmd_print.c:		core->offset = current_offset;
../core/cmd_print.c:			r_anal_hint_set_bits (core->anal, core->offset, old_bits);
../core/cmd_print.c:			r_anal_build_range_on_hints (core->anal);
../core/cmd_print.c:			r_core_seek_archbits (core, core->offset);
../core/cmd_print.c:				RBinObject *obj = r_bin_cur_object (core->bin);
../core/cmd_print.c:					len = r_num_math (core->num, input + 3);
../core/cmd_print.c:					len = R_MIN (len, core->blocksize);
../core/cmd_print.c:				if ((section = r_bin_get_section_at (obj, core->offset, true))) {
../core/cmd_print.c:					vaddr = core->offset + section->vaddr - section->paddr;
../core/cmd_print.c:				str = r_str_utf16_encode ((const char *) core->block, len);
../core/cmd_print.c:				r_cons_printf (",\"offset\":%"PFMT64d, core->offset);
../core/cmd_print.c:				switch (get_string_type (core->block, len)) {
../core/cmd_print.c:				if (core->offset < delta) {
../core/cmd_print.c:					delta = core->offset;
../core/cmd_print.c:				r_core_read_at (core, core->offset - delta, buf, 1024);
../core/cmd_print.c:				// r_print_string (core->print, core->offset, b,
../core/cmd_print.c:				r_print_string (core->print, core->offset, core->block, len, 0);
../core/cmd_print.c:				char *s = malloc (core->blocksize + 1);
../core/cmd_print.c:					memset (s, 0, core->blocksize);
../core/cmd_print.c:						r_print_offset (core->print, core->offset, 0, 0, 0, 0, NULL);
../core/cmd_print.c:					for (i = j = 0; i < core->blocksize; i++) {
../core/cmd_print.c:						char ch = (char) core->block[i];
../core/cmd_print.c:										r_print_offset (core->print, core->offset + i, 0, 0, 0, 0, NULL);
../core/cmd_print.c:				char *s = malloc (core->blocksize + 1);
../core/cmd_print.c:					memset (s, 0, core->blocksize);
../core/cmd_print.c:					for (i = j = 0; i < core->blocksize; i++) {
../core/cmd_print.c:						char ch = (char) core->block[i];
../core/cmd_print.c:				int mylen = core->block[0];
../core/cmd_print.c:				if (mylen < core->blocksize) {
../core/cmd_print.c:					r_print_string (core->print, core->offset,
../core/cmd_print.c:						core->block + 1, mylen, R_PRINT_STRING_ZEROEND);
../core/cmd_print.c:					core->num->value = mylen;
../core/cmd_print.c:					core->num->value = 0; // error
../core/cmd_print.c:				r_print_string (core->print, core->offset, core->block, len,
../core/cmd_print.c:				r_print_string (core->print, core->offset, core->block, len,
../core/cmd_print.c:			r_print_string (core->print, core->offset, core->block, l, 0);
../core/cmd_print.c:					(const char *) core->block, len);
../core/cmd_print.c:				int colwidth = r_config_get_i (core->config, "hex.cols") * 2;
../core/cmd_print.c:				core->print->width = (colwidth == 32)?w: colwidth; // w;
../core/cmd_print.c:				int bs = core->blocksize;
../core/cmd_print.c:				r_print_string (core->print, core->offset, core->block,
../core/cmd_print.c:				ut64 bitness = r_config_get_i (core->config, "asm.bits");
../core/cmd_print.c:				if (*core->block & 0x1) { // "long" string
../core/cmd_print.c:						r_core_cmdf (core, "ps @ 0x%" PFMT64x, *((ut64 *)core->block + 2));
../core/cmd_print.c:						r_core_cmdf (core, "ps @ 0x%" PFMT32x, *((ut32 *)core->block + 2));
../core/cmd_print.c:					r_print_string (core->print, core->offset, core->block + 1,
../core/cmd_print.c:				r_print_string (core->print, core->offset, core->block,
../core/cmd_print.c:				r_print_string (core->print, core->offset, core->block, len,
../core/cmd_print.c:			const ut8 *buf = core->block;
../core/cmd_print.c:				r_cons_printf ("sub_0x%08"PFMT64x ":\n", core->offset);
../core/cmd_print.c:					(void) r_asm_disassemble (core->assembler, &asmop, buf + i, len - i);
../core/cmd_print.c:				r_print_code (core->print, core->offset, core->block, len, input[1]);
../core/cmd_print.c:				in = core->block;
../core/cmd_print.c:				sz = core->blocksize;
../core/cmd_print.c:				in = core->block;
../core/cmd_print.c:				sz = core->blocksize;
../core/cmd_print.c:				in = core->block;
../core/cmd_print.c:				sz = core->blocksize;
../core/cmd_print.c:				printraw (core, strlen ((const char *) core->block), 0);
../core/cmd_print.c:			r_print_stereogram_print (core->print, res);
../core/cmd_print.c:			char *res = r_print_stereogram_bytes (core->block, core->blocksize);
../core/cmd_print.c:			r_print_stereogram_print (core->print, res);
../core/cmd_print.c:		int show_offset = r_config_get_i (core->config, "asm.offset");
../core/cmd_print.c:			core->print->flags |= R_PRINT_FLAGS_OFFSET;
../core/cmd_print.c:			core->print->flags &= ~R_PRINT_FLAGS_OFFSET;
../core/cmd_print.c:		if (r_config_get_i (core->config, "hex.header")) {
../core/cmd_print.c:			core->print->flags |= R_PRINT_FLAGS_HEADER;
../core/cmd_print.c:			core->print->flags &= ~R_PRINT_FLAGS_HEADER;
../core/cmd_print.c:		core->print->use_comments = false;
../core/cmd_print.c:			r_print_jsondump (core->print, core->block, core->blocksize, 8);
../core/cmd_print.c:				int len = r_str_nlen ((const char *)core->block, core->blocksize);
../core/cmd_print.c:				r_print_bytes (core->print, core->block, len, "%02x");
../core/cmd_print.c:				core->print->flags |= R_PRINT_FLAGS_NONHEX;
../core/cmd_print.c:				r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:					core->block, len, 8, 1, 1);
../core/cmd_print.c:				core->print->flags &= ~R_PRINT_FLAGS_NONHEX;
../core/cmd_print.c:					r_io_read_at (core->io, core->offset, buf, len * 4);
../core/cmd_print.c:					core->print->flags |= R_PRINT_FLAGS_NONHEX;
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset, buf, len * 4, 8, 1, 1);
../core/cmd_print.c:					core->print->flags &= ~R_PRINT_FLAGS_NONHEX;
../core/cmd_print.c:						r_print_offset (core->print,
../core/cmd_print.c:							core->offset + i, 0, 0, 0, 0, NULL);
../core/cmd_print.c:					r_str_bits (buf, core->block + i, 8, NULL);
../core/cmd_print.c:						const ut8 *b = core->block + i - 3;
../core/cmd_print.c:			int ocomments = core->print->use_comments;
../core/cmd_print.c:			core->print->use_comments = core->print->flags & R_PRINT_FLAGS_COMMENT;
../core/cmd_print.c:				ut64 from = r_config_get_i (core->config, "diff.from");
../core/cmd_print.c:				ut64 to = r_config_get_i (core->config, "diff.to");
../core/cmd_print.c:						len = core->blocksize;
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, 16, 1, 1);
../core/cmd_print.c:				core->num->value = len;
../core/cmd_print.c:			core->print->use_comments = ocomments;
../core/cmd_print.c:				r_print_hexii (core->print, core->offset, core->block,
../core/cmd_print.c:					core->blocksize, r_config_get_i (core->config, "hex.cols"));
../core/cmd_print.c:				r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:					core->block, len, 8, 1, 1);
../core/cmd_print.c:				ut64 origin = core->offset;
../core/cmd_print.c:					origin = r_num_math (core->num, arg + 1);
../core/cmd_print.c:				_pointer_table (core, origin, core->offset, core->block, len, 4, input[2]);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, -1, 4, 1);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, -10, 2, 1);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, -8, 4, 1);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, 10, 4, 1);
../core/cmd_print.c:					r_print_jsondump (core->print, core->block, len, 32);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset, core->block, len, 32, 4, 1);
../core/cmd_print.c:					RPrint *p = core->print;
../core/cmd_print.c:					ut32 v = r_read_ble32 (core->block + i, core->print->big_endian);
../core/cmd_print.c:					f = r_flag_get_at (core->flags, v, true);
../core/cmd_print.c:						(ut64) core->offset + i, a, (ut64) v, b, fn? fn: "");
../core/cmd_print.c:					int base = core->anal->bits;
../core/cmd_print.c:					const ut8 *buf = core->block;
../core/cmd_print.c:					for (i = 0; i < core->blocksize; i += (base / 4)) {
../core/cmd_print.c:						ut64 addr = core->offset + i;
../core/cmd_print.c:						if (core->print->hasrefs) {
../core/cmd_print.c:							const char *rstr = core->print->hasrefs (core->print->user, val, true);
../core/cmd_print.c:					const int ocols = core->print->cols;
../core/cmd_print.c:					int bitsize = core->assembler->bits;
../core/cmd_print.c:					core->print->cols = 1;
../core/cmd_print.c:					core->print->flags |= R_PRINT_FLAGS_REFS;
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len,
../core/cmd_print.c:					core->print->flags &= ~R_PRINT_FLAGS_REFS;
../core/cmd_print.c:					core->print->cols = ocols;
../core/cmd_print.c:					r_print_jsondump (core->print, core->block, len, 16);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, 32, 2, 1);
../core/cmd_print.c:					RPrint *p = core->print;
../core/cmd_print.c:					ut64 v = (ut64) r_read_ble16 (core->block + i, p->big_endian);
../core/cmd_print.c:					f = r_flag_get_at (core->flags, v, true);
../core/cmd_print.c:						(ut64) core->offset + i, a, v, b, fn? fn: "");
../core/cmd_print.c:					r_print_jsondump (core->print, core->block, len, 64);
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset, core->block, len, 64, 8, 1);
../core/cmd_print.c:					RPrint *p = core->print;
../core/cmd_print.c:					ut64 v = r_read_ble64 (core->block + i, p->big_endian);
../core/cmd_print.c:					f = r_flag_get_at (core->flags, v, true);
../core/cmd_print.c:						(ut64) core->offset + i, a, v, b, fn? fn: "");
../core/cmd_print.c:				core->print->flags |= R_PRINT_FLAGS_SPARSE;
../core/cmd_print.c:				r_print_hexdump (core->print, core->offset, core->block, len, 16, 1, 1);
../core/cmd_print.c:				core->print->flags &= (((ut32) - 1) & (~R_PRINT_FLAGS_SPARSE));
../core/cmd_print.c:				int cols = core->print->cols;
../core/cmd_print.c:					r_print_addr (core->print, core->offset + i);
../core/cmd_print.c:						ut8 *p = (ut8 *) core->block + j;
../core/cmd_print.c:						ut8 *p = (ut8 *) core->block + j;
../core/cmd_print.c:						r_print_byte (core->print, "%c", j, *p);
../core/cmd_print.c:			len = core->print->cols * len;
../core/cmd_print.c:				ut64 from = r_config_get_i (core->config, "diff.from");
../core/cmd_print.c:				ut64 to = r_config_get_i (core->config, "diff.to");
../core/cmd_print.c:						len = core->blocksize;
../core/cmd_print.c:					r_print_hexdump (core->print, core->offset,
../core/cmd_print.c:						core->block, len, 16, 1, 1);
../core/cmd_print.c:				core->num->value = len;
../core/cmd_print.c:				r_print_2bpp_tiles (core->print, core->block, len / 16);
../core/cmd_print.c:			int malen = (core->blocksize * 4) + 1;
../core/cmd_print.c:				} else if (r_base64_decode (buf, (const char *) core->block, len)) {
../core/cmd_print.c:					len = len > core->blocksize? core->blocksize: len;
../core/cmd_print.c:					r_base64_encode ((char *) buf, core->block, len);
../core/cmd_print.c:				len = core->blocksize;
../core/cmd_print.c:				r_print_bytes (core->print, core->block, len, "%02x");
../core/cmd_print.c:			RList *pids = (core->dbg->h && core->dbg->h->pids)
../core/cmd_print.c:			? core->dbg->h->pids (core->dbg, 0): NULL;
../core/cmd_print.c:					// r_debug_kill (core->dbg, pid->pid, pid->pid, 9); // kill -9
../core/cmd_print.c:			len = len > core->blocksize? core->blocksize: len;
../core/cmd_print.c:			char *s = r_print_randomart (core->block, len, core->offset);
../core/cmd_print.c:			len = len > core->blocksize? core->blocksize: len;
../core/cmd_print.c:			ut64 offset0 = core->offset;
../core/cmd_print.c:					core->offset += len;
../core/cmd_print.c:					r_core_read_at (core, core->offset, core->block, len);
../core/cmd_print.c:					s = r_print_randomart (core->block, len, core->offset);
../core/cmd_print.c:			r_core_read_at (core, offset0, core->block, len);
../core/cmd_print.c:			core->offset = offset0;
../core/cmd_print.c:				r_print_date_unix (core->print, core->block + l, sizeof (ut32));
../core/cmd_print.c:				r_print_date_hfs (core->print, core->block + l, sizeof (ut32));
../core/cmd_print.c:				r_print_date_dos (core->print, core->block + l, sizeof (ut32));
../core/cmd_print.c:				r_print_date_w32 (core->print, core->block + l, sizeof (ut64));
../core/cmd_print.c:			len = r_str_nlen ((const char*)core->block, core->blocksize);
../core/cmd_print.c:			if (len > core->blocksize) {
../core/cmd_print.c:				len = core->blocksize;
../core/cmd_print.c:		char *res = r_qrcode_gen (core->block, len, r_config_get_i (core->config, "scr.utf8"), inverted);
../core/cmd_print.c:			ut64 from = r_config_get_i (core->config, "zoom.from");
../core/cmd_print.c:			ut64 to = r_config_get_i (core->config, "zoom.to");
../core/cmd_print.c:			ut64 maxsize = r_config_get_i (core->config, "zoom.maxsz");
../core/cmd_print.c:			int oldva = core->io->va;
../core/cmd_print.c:			core->io->va = 0;
../core/cmd_print.c:				oldmode = strdup (r_config_get (core->config, "zoom.byte"));
../core/cmd_print.c:				if (!r_config_set (core->config, "zoom.byte", input + 1)) {
../core/cmd_print.c:				r_print_zoom (core->print, core, printzoomcallback,
../core/cmd_print.c:				r_config_set (core->config, "zoom.byte", oldmode);
../core/cmd_print.c:			core->io->va = oldva;
../core/cmd_print.c:	if (tbs != core->blocksize) {
../core/cmd_project.c:	const char *fileproject = r_config_get (core->config, "prj.name");
../core/cmd_project.c:					const char *editor = r_config_get (core->config, "cfg.editor");
../core/cmd_quit.c:		r_config_set (core->config, "scr.histsave", "false");
../core/cmd_quit.c:		core->num->value = r_num_math (core->num, input);
../core/cmd_quit.c:		core->num->value = -1;
../core/cmd_quit.c:		core->num->value = 0LL;
../core/cmd_quit.c:			r_num_math (core->num, input);
../core/cmd_quit.c:			core->num->value = 0LL;
../core/cmd_quit.c:			core->num->value = 5;
../core/cmd_quit.c:			core->num->value = 1;
../core/cmd_quit.c:			core->num->value += 10;	
../core/cmd_quit.c:			core->num->value += 2;	
../core/cmd_quit.c:		//exit (*input?r_num_math (core->num, input+1):0);
../core/cmd_quit.c:		//if (core->http_up) return false; // cancel quit when http is running
../core/cmd_search.c:		minlen = core->blocksize;
../core/cmd_search.c:			(void) r_io_read_at (core->io, from, buf, bufsz);
../core/cmd_search.c:		r_io_read_at (core->io, from, buf, sz);
../core/cmd_search.c:		plug = r_bin_get_binplugin_by_bytes (core->bin, buf, sz);
../core/cmd_search.c:				r_bin_load_io_at_offset_as_sz (core->bin, core->file->fd,
../core/cmd_search.c:					0, 0, 0, core->offset, plug->name, 4096);
../core/cmd_search.c:				size = plug->size (core->bin->cur);
../core/cmd_search.c:	int depth = r_config_get_i (core->config, "anal.depth");
../core/cmd_search.c:	ut8 *b = (ut8 *) malloc (core->blocksize);
../core/cmd_search.c:	r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:	r_search_kw_add (core->search, r_search_keyword_new (buf, blen, mask, mlen, NULL));
../core/cmd_search.c:	r_search_begin (core->search);
../core/cmd_search.c:	r_search_set_callback (core->search, &__prelude_cb_hit, core);
../core/cmd_search.c:	for (at = from; at < to; at += core->blocksize) {
../core/cmd_search.c:		if (!r_io_is_valid_offset (core->io, at, 0)) {
../core/cmd_search.c:		(void)r_io_read_at (core->io, at, b, core->blocksize);
../core/cmd_search.c:		if (r_search_update (core->search, at, b, core->blocksize) == -1) {
../core/cmd_search.c:	return r_list_length (core->anal->fcns);
../core/cmd_search.c:	const char *prelude = r_config_get (core->config, "anal.prelude");
../core/cmd_search.c:	const char *arch = r_config_get (core->config, "asm.arch");
../core/cmd_search.c:	int bits = r_config_get_i (core->config, "asm.bits");
../core/cmd_search.c:	int cfg_debug = r_config_get_i (core->config, "cfg.debug");
../core/cmd_search.c:	const RSearch *search = core->search;
../core/cmd_search.c:	bool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/cmd_search.c:			if (core->search->nhits >= 1) {
../core/cmd_search.c:			if (core->search->nhits >= 1) {
../core/cmd_search.c:		r_flag_set (core->flags, flag, base_addr + addr, keyword_len);
../core/cmd_search.c:		ut64 here = core->offset;
../core/cmd_search.c:	const ut64 search_from = r_config_get_i (core->config, "search.from"),
../core/cmd_search.c:			search_to = r_config_get_i (core->config, "search.to");
../core/cmd_search.c:	if (core && core->io && core->io->cur) {
../core/cmd_search.c:		fd = core->io->cur->fd; 
../core/cmd_search.c:	if (!core->io->va) {
../core/cmd_search.c:		append_bound (list, core->io, search_itv, 0, r_io_size (core->io));
../core/cmd_search.c:		append_bound (list, core->io, search_itv, core->offset, core->blocksize);
../core/cmd_search.c:		RIOMap *m = r_io_map_get (core->io, core->offset);
../core/cmd_search.c:			append_bound (list, core->io, search_itv, m->itv.addr, m->itv.size);
../core/cmd_search.c:		const RVector *skyline = &core->io->map_skyline;
../core/cmd_search.c:		RIOSection *s = r_io_section_vget (core->io, core->offset);
../core/cmd_search.c:			append_bound (list, core->io, search_itv, s->vaddr, s->vsize);
../core/cmd_search.c:		RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset,
../core/cmd_search.c:					ut64 at = core->offset;
../core/cmd_search.c:			append_bound (list, core->io, search_itv, from, size);
../core/cmd_search.c:			append_bound (list, core->io, search_itv, core->offset, 1);
../core/cmd_search.c:		ls_foreach (core->io->sections, iter, s) {
../core/cmd_search.c:		if (core->io->debug) {
../core/cmd_search.c:			r_debug_map_sync (core->dbg);
../core/cmd_search.c:				ut64 from = core->offset;
../core/cmd_search.c:				ut64 to = core->offset;
../core/cmd_search.c:				r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_search.c:						// nmap->fd = core->io->desc->fd;
../core/cmd_search.c:				r_list_foreach (core->dbg->maps, iter, map) {
../core/cmd_search.c:		if (core->tmpseek) {
../core/cmd_search.c:			append_bound (list, core->io, search_itv, core->offset, core->blocksize);
../core/cmd_search.c:			ut64 from = r_config_get_i (core->config, "search.from");
../core/cmd_search.c:				from = core->offset;
../core/cmd_search.c:			ut64 to = r_config_get_i (core->config, "search.to");
../core/cmd_search.c:				if (core->io->va) {
../core/cmd_search.c:					if (core->file) {
../core/cmd_search.c:						to = r_io_fd_size (core->io, core->file->fd);
../core/cmd_search.c:			append_bound (list, core->io, search_itv, from, to - from);
../core/cmd_search.c:	const ut8 max_instr = r_config_get_i (core->config, "rop.len");
../core/cmd_search.c:		r_asm_set_pc (core->assembler, addr);
../core/cmd_search.c:		if (!r_asm_disassemble (core->assembler, &asmop, buf + idx, 15)) {
../core/cmd_search.c:	const bool colorize = r_config_get_i (core->config, "scr.color");
../core/cmd_search.c:	const bool rop_comments = r_config_get_i (core->config, "rop.comments");
../core/cmd_search.c:	const bool esil = r_config_get_i (core->config, "asm.esil");
../core/cmd_search.c:	const bool rop_db = r_config_get_i (core->config, "rop.db");
../core/cmd_search.c:		db = sdb_ns (core->sdb, "rop", true);
../core/cmd_search.c:			r_asm_set_pc (core->assembler, hit->addr);
../core/cmd_search.c:			r_asm_disassemble (core->assembler, &asmop, buf, hit->len);
../core/cmd_search.c:			r_anal_op (core->anal, &analop, hit->addr, buf, hit->len);
../core/cmd_search.c:			r_asm_set_pc (core->assembler, hit->addr);
../core/cmd_search.c:			r_asm_disassemble (core->assembler, &asmop, buf, hit->len);
../core/cmd_search.c:			r_anal_op (core->anal, &analop, hit->addr, buf, hit->len);
../core/cmd_search.c:				buf_asm = r_print_colorize_opcode (core->print, asmop.buf_asm,
../core/cmd_search.c:					core->cons->pal.reg, core->cons->pal.num, false);
../core/cmd_search.c:			char *comment = rop_comments? r_meta_get_string (core->anal,
../core/cmd_search.c:			r_asm_set_pc (core->assembler, hit->addr);
../core/cmd_search.c:			r_asm_disassemble (core->assembler, &asmop, buf, hit->len);
../core/cmd_search.c:			r_anal_op (core->anal, &analop, hit->addr, buf, hit->len);
../core/cmd_search.c:				buf_asm = r_print_colorize_opcode (core->print, asmop.buf_asm,
../core/cmd_search.c:					core->cons->pal.reg, core->cons->pal.num, false);
../core/cmd_search.c:				otype = r_print_color_op_type (core->print, analop.type);
../core/cmd_search.c:	prot = r_config_get_i (core->config, "rop.nx")?
../core/cmd_search.c:	searchin = r_config_get (core->config, "search.in");
../core/cmd_search.c:	from = core->offset;
../core/cmd_search.c:	to = core->offset + core->blocksize;
../core/cmd_search.c:	__from = r_config_get_i (core->config, "search.from");
../core/cmd_search.c:	__to = r_config_get_i (core->config, "search.to");
../core/cmd_search.c:		map->fd = core->io->desc->fd;
../core/cmd_search.c:	const ut8 crop = r_config_get_i (core->config, "rop.conditional");      // decide if cjmp, cret, and ccall should be used too for the gadget-search
../core/cmd_search.c:	const ut8 subchain = r_config_get_i (core->config, "rop.subchains");
../core/cmd_search.c:	const ut8 max_instr = r_config_get_i (core->config, "rop.len");
../core/cmd_search.c:	const ut8 prot = r_config_get_i (core->config, "rop.nx")? R_IO_READ | R_IO_WRITE | R_IO_EXEC: R_IO_EXEC;
../core/cmd_search.c:	const char *smode = r_config_get (core->config, "search.in");
../core/cmd_search.c:	const char *arch = r_config_get (core->config, "asm.arch");
../core/cmd_search.c:// int max_count = core->search->maxhits;
../core/cmd_search.c:	int max_count = r_config_get_i (core->config, "search.maxhits"); // core->search->maxhits
../core/cmd_search.c:	int align = core->search->align;
../core/cmd_search.c:		increment = r_config_get_i (core->config, "asm.bits") == 16? 2: 4;
../core/cmd_search.c:		map->fd = core->io->desc->fd;
../core/cmd_search.c:		(void) r_io_read_at (core->io, from, buf, delta);
../core/cmd_search.c:			if (r_anal_op (core->anal, &end_gadget, from + i, buf + i,
../core/cmd_search.c:				ret = r_asm_disassemble (core->assembler, &asmop, buf + i, delta - i);
../core/cmd_search.c:					r_asm_set_pc (core->assembler, from + i);
../core/cmd_search.c:	const int hit_combo_limit = r_config_get_i (core->config, "search.esilcombo");
../core/cmd_search.c:	RSearch *search = core->search;
../core/cmd_search.c:		const int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/cmd_search.c:		const int stacksize = r_config_get_i (core->config, "esil.stacksize");
../core/cmd_search.c:		int nonull = r_config_get_i (core->config, "esil.nonull");
../core/cmd_search.c:		if (!core->anal->esil) {
../core/cmd_search.c:			core->anal->esil = r_anal_esil_new (stacksize, iotrap);
../core/cmd_search.c:		if (!core->anal->esil) {
../core/cmd_search.c:		core->anal->esil->cb.user = core;
../core/cmd_search.c:		r_anal_esil_set_op (core->anal->esil, "AddrInfo", esil_addrinfo);
../core/cmd_search.c:		r_anal_esil_setup (core->anal->esil, core->anal, 1, 0, nonull);
../core/cmd_search.c:		r_anal_esil_stack_free (core->anal->esil);
../core/cmd_search.c:		core->anal->esil->verbose = 0;
../core/cmd_search.c:			if (core->search->align) {
../core/cmd_search.c:				if ((addr % core->search->align)) {
../core/cmd_search.c:			r_anal_esil_set_op (core->anal->esil, "AddressInfo", esil_search_address_info);
../core/cmd_search.c:			r_anal_esil_set_pc (core->anal->esil, addr);
../core/cmd_search.c:			if (!r_anal_esil_parse (core->anal->esil, input + 2)) {
../core/cmd_search.c:			res = r_anal_esil_pop (core->anal->esil);
../core/cmd_search.c:			if (r_anal_esil_get_parm (core->anal->esil, res, &nres)) {
../core/cmd_search.c:				r_anal_esil_stack_free (core->anal->esil);
../core/cmd_search.c:			r_anal_esil_stack_free (core->anal->esil);
../core/cmd_search.c:		r_config_set_i (core->config, "search.kwidx", search->n_kws); // TODO remove
../core/cmd_search.c:	RSearch *search = core->search;
../core/cmd_search.c:	int i, ret, bsize = R_MIN (64, core->blocksize);
../core/cmd_search.c:	int kwidx = core->search->n_kws;
../core/cmd_search.c:		ret = r_anal_op (core->anal, &aop, at, buf + i, bsize - i);
../core/cmd_search.c:					r_flag_set (core->flags, flag, at, ret);
../core/cmd_search.c:					ut64 here = core->offset;
../core/cmd_search.c:			if (core->search->align > 0) {
../core/cmd_search.c:				i += core->search->align - 1;
../core/cmd_search.c:				at += core->search->align - 1;
../core/cmd_search.c:	int kwidx = core->search->n_kws; // (int)r_config_get_i (core->config, "search.kwidx")-1;
../core/cmd_search.c:	maxhits = (int) r_config_get_i (core->config, "search.maxhits");
../core/cmd_search.c:	filter = (int) r_config_get_i (core->config, "asm.filter");
../core/cmd_search.c:		map->fd = core->io->desc->fd;
../core/cmd_search.c:		map->itv.addr = r_config_get_i (core->config, "search.from");
../core/cmd_search.c:		map->itv.size = r_config_get_i (core->config, "search.to") - map->itv.addr;
../core/cmd_search.c:			const char *cmdhit = r_config_get (core->config, "cmd.hit");
../core/cmd_search.c:						r_parse_filter (core->parser, core->flags, hit->code, tmp, sizeof (tmp), core->print->big_endian);
../core/cmd_search.c:					r_flag_set (core->flags, flagname, hit->addr, hit->len);
../core/cmd_search.c:	RSearch *search = core->search;
../core/cmd_search.c:	core->search->inverse = param->inverse;
../core/cmd_search.c:		core->search->maxhits = 1;
../core/cmd_search.c:	if (core->search->n_kws > 0 || param->crypto_search) {
../core/cmd_search.c:		// REMOVE OLD FLAGS r_core_cmdf (core, "f-%s*", r_config_get (core->config, "search.prefix"));
../core/cmd_search.c:		r_search_set_callback (core->search, &_cb_hit, param);
../core/cmd_search.c:		cmdhit = r_config_get (core->config, "cmd.hit");
../core/cmd_search.c:		if (!(buf = malloc (core->blocksize))) {
../core/cmd_search.c:				RSearchKeyword *kw = r_list_first (core->search->kws);
../core/cmd_search.c:					len = R_MIN (core->blocksize, at - from);
../core/cmd_search.c:					if (!r_io_is_valid_offset (core->io, at - len, 0)) {
../core/cmd_search.c:					(void)r_io_read_at (core->io, at - len, buf, len);
../core/cmd_search.c:					len = R_MIN (core->blocksize, to - at);
../core/cmd_search.c:					if (!r_io_is_valid_offset (core->io, at, 0)) {
../core/cmd_search.c:					(void)r_io_read_at (core->io, at, buf, len);
../core/cmd_search.c:						delta = r_search_aes_update (core->search, at, buf, len);
../core/cmd_search.c:						delta = r_search_rsa_update (core->search, at, buf, len);
../core/cmd_search.c:						int t = r_search_hit_new (core->search, &aeskw, at + delta);
../core/cmd_search.c:					(void)r_search_update (core->search, at, buf, len);
../core/cmd_search.c:			core->num->value = search->nhits;
../core/cmd_search.c:	Sdb *db_rop = sdb_ns (core->sdb, "rop", false);
../core/cmd_search.c:			out = sdb_querys (core->sdb, NULL, 0, "rop/nop/*");
../core/cmd_search.c:			out = sdb_querys (core->sdb, NULL, 0, "rop/mov/*");
../core/cmd_search.c:			out = sdb_querys (core->sdb, NULL, 0, "rop/const/*");
../core/cmd_search.c:			out = sdb_querys (core->sdb, NULL, 0, "rop/arithm/*");
../core/cmd_search.c:			out = sdb_querys (core->sdb, NULL, 0, "rop/arithm_ct/*");
../core/cmd_search.c:		out = sdb_querys (core->sdb, NULL, 0, "rop/***");
../core/cmd_search.c:	ut8 *block = calloc (core->blocksize, 1);
../core/cmd_search.c:		(void) r_io_read_at (core->io, addr, block, core->blocksize);
../core/cmd_search.c:		int diff = memcmpdiff (core->block, block, core->blocksize);
../core/cmd_search.c:		int equal = core->blocksize - diff;
../core/cmd_search.c:			int pc = (equal * 100) / core->blocksize;
../core/cmd_search.c:			r_cons_printf ("0x%08"PFMT64x " %4d/%d %3d%%  ", addr, equal, core->blocksize, pc);
../core/cmd_search.c:			r_print_fill (core->print, ptr, 1, UT64_MAX, core->blocksize);
../core/cmd_search.c:		addr += core->blocksize;
../core/cmd_search.c:	const char *where = r_config_get (core->config, "search.in");
../core/cmd_search.c:	RAsm *as = core ? core->assembler : NULL;
../core/cmd_search.c:	const char *prefix = r_config_get (core->config, "search.prefix");
../core/cmd_search.c:		.cmd_hit = r_config_get (core->config, "cmd.hit"),
../core/cmd_search.c:	RSearch *search = core->search;
../core/cmd_search.c:	if (!core || !core->io || !core->io->desc) {
../core/cmd_search.c:	if (core->in_search) {
../core/cmd_search.c:		if (core->lastsearch) {
../core/cmd_search.c:			input = core->lastsearch;
../core/cmd_search.c:		free (core->lastsearch);
../core/cmd_search.c:		core->lastsearch = strdup (input);
../core/cmd_search.c:	core->in_search = true;
../core/cmd_search.c:	r_flag_space_push (core->flags, "searches");
../core/cmd_search.c:	const ut64 search_from = r_config_get_i (core->config, "search.from"),
../core/cmd_search.c:			search_to = r_config_get_i (core->config, "search.to");
../core/cmd_search.c:	searchshow = r_config_get_i (core->config, "search.show");
../core/cmd_search.c:	param.mode = r_config_get (core->config, "search.in");
../core/cmd_search.c:	core->search->align = r_config_get_i (core->config, "search.align");
../core/cmd_search.c:	searchflags = r_config_get_i (core->config, "search.flags");
../core/cmd_search.c:	core->search->maxhits = r_config_get_i (core->config, "search.maxhits");
../core/cmd_search.c:	searchprefix = r_config_get (core->config, "search.prefix");
../core/cmd_search.c:	core->search->overlap = r_config_get_i (core->config, "search.overlap");
../core/cmd_search.c:	if (!core->io->va) {
../core/cmd_search.c:		RAddrInterval itv = {0, r_io_size (core->io)};
../core/cmd_search.c:	core->search->bckwrds = false;
../core/cmd_search.c:		bool bin_verbose = r_config_get_i (core->config, "bin.verbose");
../core/cmd_search.c:		r_config_set_i (core->config, "bin.verbose", false);
../core/cmd_search.c:		r_config_set_i (core->config, "bin.verbose", bin_verbose);
../core/cmd_search.c:		if (core->offset) {
../core/cmd_search.c:			RAddrInterval itv = {0, core->offset};
../core/cmd_search.c:		ut64 addr, n = input[param_offset - 1] ? r_num_math (core->num, input + param_offset) : 1;
../core/cmd_search.c:		if (!r_core_prevop_addr (core, core->offset, n, &addr)) {
../core/cmd_search.c:					ut64 refptr = r_num_math (core->num, input + 2);
../core/cmd_search.c:					ut64 curseek = core->offset;
../core/cmd_search.c:								r_num_math (core->num, input + 2), 0);
../core/cmd_search.c:						r_core_cmdf (core, "axt @ 0x%"PFMT64x "\n", r_num_math (core->num, input + 2));
../core/cmd_search.c:						r_core_anal_search (core, from, to, core->offset, 0);
../core/cmd_search.c:						r_core_cmdf (core, "axt @ 0x%"PFMT64x "\n", core->offset);
../core/cmd_search.c:			r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:			r_search_set_distance (core->search, (int)
../core/cmd_search.c:					r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:			r_search_kw_add (core->search,
../core/cmd_search.c:					r_search_pattern_size (core->search, ps);
../core/cmd_search.c:					r_search_pattern (core->search, map->itv.addr, r_itv_end (map->itv));
../core/cmd_search.c:				ut64 vmin = r_num_math (core->num, input + 3);
../core/cmd_search.c:				ut64 vmax = r_num_math (core->num, w);
../core/cmd_search.c:		r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:		r_search_set_distance (core->search, (int)
../core/cmd_search.c:			r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:				n64 = r_num_math (core->num, input + param_offset);
../core/cmd_search.c:				r_search_kw_add (core->search,
../core/cmd_search.c:				n8 = (ut8) r_num_math (core->num, input + param_offset);
../core/cmd_search.c:				r_search_kw_add (core->search,
../core/cmd_search.c:				n16 = (ut16) r_num_math (core->num, input + param_offset);
../core/cmd_search.c:				r_search_kw_add (core->search,
../core/cmd_search.c:					n32 = (ut32) r_num_math (core->num, input + param_offset);
../core/cmd_search.c:					r_search_kw_add (core->search,
../core/cmd_search.c:		r_search_begin (core->search);
../core/cmd_search.c:				r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:				r_search_set_distance (core->search, (int)
../core/cmd_search.c:					r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:					r_search_kw_add (core->search, skw);
../core/cmd_search.c:					r_search_begin (core->search);
../core/cmd_search.c:		r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:		r_search_set_distance (core->search, (int)
../core/cmd_search.c:			r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:				r_search_kw_add (core->search, skw);
../core/cmd_search.c:		r_search_begin (core->search);
../core/cmd_search.c:			r_search_reset (core->search, R_SEARCH_REGEXP);
../core/cmd_search.c:			r_search_set_distance (core->search, (int)
../core/cmd_search.c:				r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:			r_search_kw_add (core->search, kw);
../core/cmd_search.c:			r_search_begin (core->search);
../core/cmd_search.c:		if (core->io && core->io->debug) {
../core/cmd_search.c:			r_debug_map_sync (core->dbg);
../core/cmd_search.c:			r_search_reset (core->search, R_SEARCH_DELTAKEY);
../core/cmd_search.c:			r_search_kw_add (core->search,
../core/cmd_search.c:			r_search_begin (core->search);
../core/cmd_search.c:						max = r_num_math (core->num, pmax);
../core/cmd_search.c:					min = r_num_math (core->num, pmin);
../core/cmd_search.c:		if (core->offset) {
../core/cmd_search.c:			RAddrInterval itv = {core->offset, -core->offset};
../core/cmd_search.c:				offset = r_num_math (core->num, args[1]);
../core/cmd_search.c:				len = r_num_math (core->num, args[2]);
../core/cmd_search.c:			r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:			r_search_set_distance (core->search, (int)r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:				r_search_kw_add (core->search, kw);
../core/cmd_search.c:				r_search_begin (core->search);
../core/cmd_search.c:			r_search_reset (core->search, R_SEARCH_KEYWORD);
../core/cmd_search.c:			r_search_set_distance (core->search, (int)r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:				r_search_kw_add (core->search, kw);
../core/cmd_search.c:				r_search_begin (core->search);
../core/cmd_search.c:			int i, len, chunksize = r_config_get_i (core->config, "search.chunk");
../core/cmd_search.c:				chunksize = core->assembler->bits / 8;
../core/cmd_search.c:			core->in_search = false;
../core/cmd_search.c:				if (core->num->value == 0) {
../core/cmd_search.c:			max = r_num_math (core->num, p + 1);
../core/cmd_search.c:		min = r_num_math (core->num, input + 2);
../core/cmd_search.c:		if (!r_search_set_string_limits (core->search, min, max)) {
../core/cmd_search.c:		r_search_reset (core->search, R_SEARCH_STRING);
../core/cmd_search.c:		r_search_set_distance (core->search, (int)
../core/cmd_search.c:			r_config_get_i (core->config, "search.distance"));
../core/cmd_search.c:	r_config_set_i (core->config, "search.kwidx", search->n_kws);
../core/cmd_search.c:	core->num->value = search->nhits;
../core/cmd_search.c:	core->in_search = false;
../core/cmd_search.c:	r_flag_space_pop (core->flags);
../core/cmd_search_rop.c:	regs = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:		r_reg_arena_pop (core->dbg->reg);
../core/cmd_search_rop.c:		r_reg_set_value (core->dbg->reg, reg_item, nr);
../core/cmd_search_rop.c:		r_reg_arena_push (core->dbg->reg);
../core/cmd_search_rop.c:	const bool romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_search_rop.c:	const bool stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:		out = sdb_querys (core->anal->esil->stats, NULL, 0, "*");
../core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:			value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:			diff_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:			r_reg_set_value (core->dbg->reg, item_dst, diff_dst);
../core/cmd_search_rop.c:	const bool romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_search_rop.c:	const bool stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:		out = sdb_querys (core->anal->esil->stats, NULL, 0, "*");
../core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:			value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:			diff_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:				value_src = r_reg_get_value (core->dbg->reg, item_src);
../core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:				diff_src = r_reg_get_value (core->dbg->reg, item_src);
../core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:				r_reg_set_value (core->dbg->reg, item_src, diff_src);
../core/cmd_search_rop.c:	const bool romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_search_rop.c:	const bool stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:		out = sdb_querys (core->anal->esil->stats, NULL, 0, "*");
../core/cmd_search_rop.c:				value_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:				diff_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:					value_src2 = r_reg_get_value (core->dbg->reg, item_src2);
../core/cmd_search_rop.c:					r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:					diff_src2 = r_reg_get_value (core->dbg->reg, item_src2);
../core/cmd_search_rop.c:						value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:						r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:	const bool romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_search_rop.c:	const bool stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../core/cmd_search_rop.c:		char *out = sdb_querys (core->anal->esil->stats, NULL, 0, "*");
../core/cmd_search_rop.c:				value_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:				diff_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:					value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:					r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:					diff_dst = r_reg_get_value (core->dbg->reg, item_dst);
../core/cmd_search_rop.c:					r_reg_arena_swap (core->dbg->reg, false);
../core/cmd_search_rop.c:	const bool romem = r_config_get_i (core->config, "esil.romem");
../core/cmd_search_rop.c:	const bool stats = r_config_get_i (core->config, "esil.stats");
../core/cmd_search_rop.c:		char *out = sdb_querys (core->anal->esil->stats, NULL, 0, "*");
../core/cmd_section.c:	"S-.","","remove section at core->offset (can be changed with @)",
../core/cmd_section.c:	ls_foreach (core->io->sections, iter, s) {
../core/cmd_section.c:		r_io_read_at (core->io, s->paddr, buf, s->size);
../core/cmd_section.c:	ut64 o = core->offset;
../core/cmd_section.c:	if (core->io->va || core->io->debug) {
../core/cmd_section.c:		s = r_io_section_vget (core->io, o);
../core/cmd_section.c:	ls_foreach (core->io->sections, iter, s) {
../core/cmd_section.c:			r_io_read_at (core->io, s->paddr, buf, s->size);
../core/cmd_section.c:			id = (ut32)r_num_math (core->num, input + 2);
../core/cmd_section.c:			if (!r_io_section_reapply_bin (core->io, id, mode)) {
../core/cmd_section.c:			id = (ut32)r_num_math (core->num, input + 2);
../core/cmd_section.c:			if (!r_io_section_reapply (core->io, id, mode)) {
../core/cmd_section.c:			ut64 n = r_num_math (core->num, input + 1);
../core/cmd_section.c:			const char *n = r_io_section_get_archbits (core->io, core->offset, &b);
../core/cmd_section.c:			r_io_section_set_archbits (core->io, core->offset, NULL, 0);
../core/cmd_section.c:				ut64 offset = core->offset;
../core/cmd_section.c:					offset = r_num_math (core->num, r_str_word_get0 (ptr, 2));
../core/cmd_section.c:				bits = r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_section.c:				if (r_io_section_set_archbits (core->io, offset, arch, bits)) {
../core/cmd_section.c:					core->section = NULL;
../core/cmd_section.c:					r_core_seek (core, core->offset, 0);
../core/cmd_section.c:				vaddr = r_num_math (core->num, p + 1);
../core/cmd_section.c:				vaddr = core->offset;
../core/cmd_section.c:			s = r_io_section_vget (core->io, vaddr);
../core/cmd_section.c:				update_section_flag_at_with_oldname (s, core->flags, s->vaddr, oldname);
../core/cmd_section.c:				eprintf ("No section found in  0x%08"PFMT64x"\n", core->offset);
../core/cmd_section.c:		ut64 o = core->offset;
../core/cmd_section.c:		if (core->io->va || core->io->debug) {
../core/cmd_section.c:			s = r_io_section_vget (core->io, core->offset); 
../core/cmd_section.c:			o = s ? core->offset - s->vaddr + s->paddr : core->offset;
../core/cmd_section.c:		ls_foreach (core->io->sections, iter, s) {
../core/cmd_section.c:				r_io_write_at (core->io, s->vaddr, (const ut8*)buf, sz);
../core/cmd_section.c:			r_io_section_init (core->io);
../core/cmd_section.c:			RIOSection *s = r_io_section_vget (core->io, core->offset);
../core/cmd_section.c:			r_io_section_rm (core->io, s->id);
../core/cmd_section.c:			r_io_section_rm (core->io, atoi (input + 1));
../core/cmd_section.c:				r_io_section_rm (core->io, atoi (input + 1));
../core/cmd_section.c:				bin_id = r_num_math (core->num, r_str_word_get0 (ptr, 6));
../core/cmd_section.c:				vsize = r_num_math (core->num, r_str_word_get0 (ptr, 3));
../core/cmd_section.c:				size = r_num_math (core->num, r_str_word_get0 (ptr, 2));
../core/cmd_section.c:				vaddr = r_num_math (core->num, r_str_word_get0 (ptr, 1));
../core/cmd_section.c:				paddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));
../core/cmd_section.c:				sprintf (vname, "area%d", (int)ls_length (core->io->sections));
../core/cmd_section.c:			RIOSection *sec = r_io_section_add (core->io, paddr, vaddr, size, vsize, rwx, name, bin_id, fd);
../core/cmd_section.c:			r_io_create_mem_for_section (core->io, sec);
../core/cmd_section.c:			ut64 o = core->offset;
../core/cmd_section.c:			if (core->io->va || core->io->debug) {
../core/cmd_section.c:				s = r_io_section_vget (core->io, o); 
../core/cmd_section.c:			ls_foreach_safe (core->io->sections, iter, iter2, s) {
../core/cmd_section.c:					r_io_section_rm (core->io, s->id);
../core/cmd_section.c:			ut64 o = core->offset;
../core/cmd_section.c:			if (core->io->va || core->io->debug) {
../core/cmd_section.c:				s = r_io_section_vget (core->io, o); 
../core/cmd_section.c:				ls_foreach (core->io->sections, iter, s) {
../core/cmd_section.c:				ls_foreach (core->io->sections, iter, s) {
../core/cmd_section.c:		__section_list (core->io, core->offset, core->print, *input);
../core/cmd_seek.c:	"s.", "hexoff", "Seek honoring a base from core->offset",
../core/cmd_seek.c:	r_config_bump (core->config, "lines.to");
../core/cmd_seek.c:	from = r_config_get_i (core->config, "lines.from");
../core/cmd_seek.c:	to = r_config_get_i (core->config, "lines.to");
../core/cmd_seek.c:	char *off = r_str_newf (fmt, core->offset);
../core/cmd_seek.c:	if (core->print->lines_cache_sz > 0) {
../core/cmd_seek.c:		int curr = r_util_lines_getline (core->print->lines_cache, core->print->lines_cache_sz, core->offset);
../core/cmd_seek.c:	if (numline < 1 || numline > core->print->lines_cache_sz - 1) {
../core/cmd_seek.c:		eprintf ("ERROR: Line must be between 1 and %d\n", core->print->lines_cache_sz - 1);
../core/cmd_seek.c:		r_core_seek (core, core->print->lines_cache[numline - 1], 1);
../core/cmd_seek.c:	int curr = r_util_lines_getline (core->print->lines_cache, core->print->lines_cache_sz, core->offset);
../core/cmd_seek.c:	if (numlines > 0 && curr + numlines >= core->print->lines_cache_sz - 1) {
../core/cmd_seek.c:		eprintf ("ERROR: Line must be < %d\n", core->print->lines_cache_sz - 1);
../core/cmd_seek.c:		r_core_seek (core, core->print->lines_cache[curr + numlines - 1], 1);
../core/cmd_seek.c:	core->print->lines_cache_sz = -1;
../core/cmd_seek.c:	R_FREE (core->print->lines_cache);
../core/cmd_seek.c:	int imax = core->print->lines_cache_sz;
../core/cmd_seek.c:		if (core->print->lines_cache[imid] == core->offset) {
../core/cmd_seek.c:		} else if (core->print->lines_cache[imid] < core->offset) {
../core/cmd_seek.c:	int bsz = core->blocksize;
../core/cmd_seek.c:	free (core->print->lines_cache);
../core/cmd_seek.c:	core->print->lines_cache = R_NEWS0 (ut64, bsz);
../core/cmd_seek.c:	if (!core->print->lines_cache) {
../core/cmd_seek.c:		RIOSection *s = r_io_section_mget_in (core->io, core->offset);
../core/cmd_seek.c:		baddr = s? s->paddr: r_config_get_i (core->config, "bin.baddr");
../core/cmd_seek.c:	baddr = r_config_get_i (core->config, "bin.baddr");
../core/cmd_seek.c:	core->print->lines_cache[0] = start_addr? 0: baddr;
../core/cmd_seek.c:		r_io_read_at (core->io, off, (ut8 *) buf, bsz);
../core/cmd_seek.c:				core->print->lines_cache[line_count] = start_addr? off + i + 1: off + i + 1 + baddr;
../core/cmd_seek.c:					ut64 *tmp = realloc (core->print->lines_cache,
../core/cmd_seek.c:						core->print->lines_cache = tmp;
../core/cmd_seek.c:						R_FREE (core->print->lines_cache);
../core/cmd_seek.c:	if (core->io->debug) {
../core/cmd_seek.c:		off = r_debug_reg_get (core->dbg, input);
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:		RReg *orig = core->dbg->reg;
../core/cmd_seek.c:		core->dbg->reg = core->anal->reg;
../core/cmd_seek.c:		off = r_debug_reg_get (core->dbg, input);
../core/cmd_seek.c:		core->dbg->reg = orig;
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:		r_cons_printf ("0x%"PFMT64x "\n", core->offset);
../core/cmd_seek.c:		off = r_num_math (core->num, dup + 1);
../core/cmd_seek.c:		core->offset = off;
../core/cmd_seek.c:		off = r_num_math (core->num, u_num);
../core/cmd_seek.c:			char *list = sdb_get (core->anal->sdb_meta, "meta.C", 0);
../core/cmd_seek.c:					val = sdb_const_get (core->anal->sdb_meta, key, 0);
../core/cmd_seek.c:					r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:		const char *pfx = r_config_get (core->config, "search.prefix");
../core/cmd_seek.c:		const ut64 saved_from = r_config_get_i (core->config, "search.from"),
../core/cmd_seek.c:				saved_maxhits = r_config_get_i (core->config, "search.maxhits");
../core/cmd_seek.c:		int kwidx = core->search->n_kws; // (int)r_config_get_i (core->config, "search.kwidx")-1;
../core/cmd_seek.c:			r_config_set_i (core->config, "search.from", core->offset + 1);
../core/cmd_seek.c:			r_config_set_i (core->config, "search.maxhits", 1);
../core/cmd_seek.c:			r_config_set_i (core->config, "search.from", saved_from);
../core/cmd_seek.c:			r_config_set_i (core->config, "search.maxhits", saved_maxhits);
../core/cmd_seek.c:			RList *list = r_io_sundo_list (core->io, '!');
../core/cmd_seek.c:					core->flags->space_strict = true;
../core/cmd_seek.c:					RFlagItem *f = r_flag_get_at (core->flags, undo->off, true);
../core/cmd_seek.c:					core->flags->space_strict = false;
../core/cmd_seek.c:			RList *list = r_io_sundo_list (core->io, mode);
../core/cmd_seek.c:					core->flags->space_strict = true;
../core/cmd_seek.c:					RFlagItem *f = r_flag_get_at (core->flags, undo->off, true);
../core/cmd_seek.c:					core->flags->space_strict = false;
../core/cmd_seek.c:				delta = core->blocksize;
../core/cmd_seek.c:				int mult = r_num_math (core->num, input + 2);
../core/cmd_seek.c:			// int delta = (input[1] == '+')? core->blocksize: off;
../core/cmd_seek.c:				r_io_sundo_push (core->io, core->offset,
../core/cmd_seek.c:					r_print_get_cursor (core->print));
../core/cmd_seek.c:			RIOUndos *undo = r_io_sundo_redo (core->io);
../core/cmd_seek.c:			r_io_sundo_reset (core->io);
../core/cmd_seek.c:				RIOUndos *undo = r_io_sundo (core->io, core->offset);
../core/cmd_seek.c:					delta = -core->blocksize;
../core/cmd_seek.c:					int mult = r_num_math (core->num, input + 2);
../core/cmd_seek.c:					r_io_sundo_push (core->io, core->offset,
../core/cmd_seek.c:							r_print_get_cursor (core->print));
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:		r_core_seek_next (core, r_config_get (core->config, "scr.nkey"));
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:		r_core_seek_previous (core, r_config_get (core->config, "scr.nkey"));
../core/cmd_seek.c:		off = core->blocksize;
../core/cmd_seek.c:				off = r_num_math (core->num, p + 1);;
../core/cmd_seek.c:			r_cmd_call (core->rcmd, cmd);
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:			off = core->offset;
../core/cmd_seek.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/cmd_seek.c:			fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_seek.c:			fcn = r_anal_fcn_find_name (core->anal, input + 2);
../core/cmd_seek.c:			fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/cmd_seek.c:		int val = 0, ret, i, n = r_num_math (core->num, input + 1);
../core/cmd_seek.c:			ut64 addr = core->offset;
../core/cmd_seek.c:			if (r_core_prevop_addr (core, core->offset, numinstr, &addr)) {
../core/cmd_seek.c:				ret = core->offset - addr;
../core/cmd_seek.c:				ret = r_anal_op (core->anal, &op,
../core/cmd_seek.c:					core->offset, core->block, core->blocksize);
../core/cmd_seek.c:		core->num->value = val;
../core/cmd_seek.c:		RIOSection *s = r_io_section_vget (core->io, core->offset);
../core/cmd_seek.c:		if (!core->file) {
../core/cmd_seek.c:		RIOSection *s = r_io_section_vget (core->io, core->offset);
../core/cmd_seek.c:			r_core_seek (core, r_io_fd_size (core->io, core->file->fd), 1);
../core/cmd_seek.c:		int sl_arg = r_num_math (core->num, input + 1);
../core/cmd_seek.c:			if (!core->print->lines_cache) {
../core/cmd_seek.c:			if (!core->print->lines_cache) {
../core/cmd_seek.c:			if (!core->print->lines_cache) {
../core/cmd_seek.c:			if (!core->print->lines_cache) {
../core/cmd_seek.c:			eprintf ("%d lines\n", core->print->lines_cache_sz - 1);
../core/cmd_type.c:	const char *isenum = sdb_const_get (core->anal->sdb_types, name, 0);
../core/cmd_type.c:		char *fmt = r_anal_type_format (core->anal, name);
../core/cmd_type.c:		r_anal_noreturn_drop (core->anal, input + 1);
../core/cmd_type.c:			r_anal_noreturn_add (core->anal, NULL,
../core/cmd_type.c:					r_num_math (core->num, input + 1));
../core/cmd_type.c:			r_anal_noreturn_add (core->anal, input + 1,
../core/cmd_type.c:					r_num_math (core->num, input + 1));
../core/cmd_type.c:			r_anal_noreturn_add (core->anal, NULL,
../core/cmd_type.c:					r_num_math (core->num, input + 1));
../core/cmd_type.c:		r_anal_noreturn_list (core->anal, 1);
../core/cmd_type.c:		r_anal_noreturn_list (core->anal, 0);
../core/cmd_type.c:	if (!core || !core->anal || !parsed) {
../core/cmd_type.c:			sdb_query_lines (core->anal->sdb_types, parsed);
../core/cmd_type.c:		r_anal_type_del (core->anal, k);
../core/cmd_type.c:		char *fmt = r_anal_type_format (core->anal, v);
../core/cmd_type.c:		sdb_foreach (core->anal->sdb_types, typelist, core);
../core/cmd_type.c:		SdbList *ls = sdb_foreach_list (core->anal->sdb_types, true);
../core/cmd_type.c:			sdb_foreach (core->anal->sdb_types, stdprintifunion, core);
../core/cmd_type.c:			? sdb_querys (core->anal->sdb_types, NULL, -1, input + 2)
../core/cmd_type.c:			: sdb_querys (core->anal->sdb_types, NULL, -1, "*");
../core/cmd_type.c:			sdb_foreach (core->anal->sdb_types, stdprintifstruct, core);
../core/cmd_type.c:			isenum = sdb_const_get (core->anal->sdb_types, s, 0);
../core/cmd_type.c:				const char *res = sdb_const_get (core->anal->sdb_types, s, 0);
../core/cmd_type.c:			SdbList *l = sdb_foreach_list (core->anal->sdb_types, true);
../core/cmd_type.c:			isenum = sdb_const_get (core->anal->sdb_types, s, 0);
../core/cmd_type.c:				const char *q = sdb_fmt (0, "%s.0x%x", s, (ut32)r_num_math (core->num, p));
../core/cmd_type.c:				const char *res = sdb_const_get (core->anal->sdb_types, q, 0);
../core/cmd_type.c:						out = r_parse_c_string (core->anal, tmp);
../core/cmd_type.c:					char *out = r_parse_c_file (core->anal, filename);
../core/cmd_type.c:					//r_anal_type_loadfile (core->anal, filename);
../core/cmd_type.c:					sdb_merge (core->anal->sdb_types, db_tmp);
../core/cmd_type.c:			//r_anal_str_to_type (core->anal, string);
../core/cmd_type.c:			char *out = r_parse_c_string (core->anal, tmp);
../core/cmd_type.c:				RList *typeoffs = r_anal_type_get_by_offset (core->anal, toff);
../core/cmd_type.c:					addr = r_num_math (core->num, ptr);
../core/cmd_type.c:				addr = core->offset;
../core/cmd_type.c:			(void)r_io_read_at (core->io, core->offset, code, sizeof (code));
../core/cmd_type.c:			r_asm_set_pc (core->assembler, addr);
../core/cmd_type.c:			int ret = r_asm_disassemble (core->assembler, &asmop, code, core->blocksize);
../core/cmd_type.c:			ret = r_anal_op (core->anal, &op, core->offset, code, core->blocksize);
../core/cmd_type.c:					RList* otypes = r_anal_type_get_by_offset (core->anal, offimm);
../core/cmd_type.c:							r_anal_type_link_offset (core->anal, type, addr);
../core/cmd_type.c:							r_anal_hint_set_offset (core->anal, addr, otype);
../core/cmd_type.c:					addr = r_num_math (core->num, ptr);
../core/cmd_type.c:				addr = core->offset;
../core/cmd_type.c:			char *tmp = sdb_get (core->anal->sdb_types, type, 0);
../core/cmd_type.c:				r_anal_type_link (core->anal, type, addr);
../core/cmd_type.c:			SdbList *sdb_list = sdb_foreach_list (core->anal->sdb_types, true);
../core/cmd_type.c:				sdb_foreach (core->anal->sdb_types, sdbdeletelink, core);
../core/cmd_type.c:				ut64 addr = r_num_math (core->num, ptr);
../core/cmd_type.c:				r_anal_type_unlink (core->anal, addr);
../core/cmd_type.c:			sdb_foreach (core->anal->sdb_types, linklist, core);
../core/cmd_type.c:			sdb_foreach (core->anal->sdb_types, linklist_readable, core);
../core/cmd_type.c:			ut64 addr = core->offset;
../core/cmd_type.c:				addr = r_num_math (core->num, ptr);
../core/cmd_type.c:			char *fmt = r_anal_type_format (core->anal, type);
../core/cmd_type.c:			sdb_reset (core->anal->sdb_types);
../core/cmd_type.c:				const char *type = sdb_const_get (core->anal->sdb_types, name, 0);
../core/cmd_type.c:				r_anal_type_del (core->anal, name);
../core/cmd_type.c:					SdbList *l = sdb_foreach_list (core->anal->sdb_types, true);
../core/cmd_type.c:							r_anal_type_del (core->anal, kv->key);
../core/cmd_type.c:		sdb_foreach (core->anal->sdb_types, stdprintiffunc, core);
../core/cmd_write.c:			if (len < core->blocksize) {
../core/cmd_write.c:				buf[len-1] |= core->block[len-1] & 0xf;
../core/cmd_write.c:		r_core_write_at (core, core->offset, buf, len);
../core/cmd_write.c:		if (r_config_get_i (core->config, "cfg.wseek")) {
../core/cmd_write.c:					r_crypto_update (cry, (const ut8*)core->block, core->blocksize);
../core/cmd_write.c:						r_io_write_at (core->io, core->offset, result, result_size);
../core/cmd_write.c:	r_core_read_at (core, core->offset, (ut8*)&orig, sizeof (orig));
../core/cmd_write.c:	r_core_write_at (core, core->offset, (const ut8*)&ret, sizeof (ret));
../core/cmd_write.c:	case 1: v8 = (ut8*)core->block; *v8 += num; break;
../core/cmd_write.c:	case 2: v16 = (ut16*)core->block; *v16 += num; break;
../core/cmd_write.c:	case 4: v32 = (ut32*)core->block; *v32 += num; break;
../core/cmd_write.c:	case 8: v64 = (ut64*)core->block; *v64 += num; break;
../core/cmd_write.c:        r_core_write_at (core, core->offset, core->block, size);
../core/cmd_write.c:				? r_num_math (core->num, input + 3)
../core/cmd_write.c:				: core->blocksize;
../core/cmd_write.c:					ut64 addr = core->offset;
../core/cmd_write.c:				? r_num_math (core->num, input + 3)
../core/cmd_write.c:				: core->blocksize;
../core/cmd_write.c:			core->num->value = r_debruijn_offset (len, r_config_get_i (core->config, "cfg.bigendian"));
../core/cmd_write.c:			r_cons_printf ("%"PFMT64d"\n", core->num->value);
../core/cmd_write.c:	int wseek = r_config_get_i (core->config, "cfg.wseek");
../core/cmd_write.c:	bool be = r_config_get_i (core->config, "cfg.bigendian");
../core/cmd_write.c:		off = r_num_math (core->num, input+2);
../core/cmd_write.c:	if (core->file) {
../core/cmd_write.c:		r_io_use_fd (core->io, core->file->fd);
../core/cmd_write.c:	ut64 res = r_io_seek (core->io, core->offset, R_IO_SEEK_SET);
../core/cmd_write.c:		r_io_write (core->io, buf, 1);
../core/cmd_write.c:		r_io_write (core->io, buf, 2);
../core/cmd_write.c:		r_io_write (core->io, buf, 4);
../core/cmd_write.c:		r_io_write (core->io, buf, 8);
../core/cmd_write.c:	int wseek = r_config_get_i (core->config, "cfg.wseek");
../core/cmd_write.c:			r_io_write_at (core->io, core->offset,
../core/cmd_write.c:		u_size = r_num_math (core->num, p);
../core/cmd_write.c:			u_offset = r_num_math (core->num, p);
../core/cmd_write.c:		r_io_use_fd (core->io, core->file->fd);
../core/cmd_write.c:		r_io_write_at (core->io, core->offset, buf + u_offset, u_size);
../core/cmd_write.c:	if (core && core->io && core->io->p_cache && core->print && core->print->cb_printf) {
../core/cmd_write.c:				fd = (int)r_num_math (core->num, input + 1);
../core/cmd_write.c:				desc = r_io_desc_get (core->io, fd);
../core/cmd_write.c:				desc = core->io->desc;
../core/cmd_write.c:				fd = (int)r_num_math (core->num, input + 1);
../core/cmd_write.c:				desc = r_io_desc_get (core->io, fd);
../core/cmd_write.c:				desc = core->io->desc;
../core/cmd_write.c:					core->print->cb_printf ("e io.va = false\n");
../core/cmd_write.c:						core->print->cb_printf ("wx %02x", cache->data[0]);
../core/cmd_write.c:							core->print->cb_printf ("%02x", cache->data[i]);
../core/cmd_write.c:						core->print->cb_printf (" @ 0x%08"PFMT64x" \n", cache->from);
../core/cmd_write.c:						core->print->cb_printf ("0x%08"PFMT64x": %02x", cache->from, cache->odata[0]);
../core/cmd_write.c:							core->print->cb_printf ("%02x", cache->odata[i]);
../core/cmd_write.c:						core->print->cb_printf (" -> %02x", cache->data[0]);
../core/cmd_write.c:							core->print->cb_printf ("%02x", cache->data[i]);
../core/cmd_write.c:						core->print->cb_printf ("\n");
../core/cmd_write.c:	wseek = r_config_get_i (core->config, "cfg.wseek");
../core/cmd_write.c:			cmd_write_bits (core, 1, r_num_math (core->num, input + 2));
../core/cmd_write.c:			cmd_write_bits (core, 0, r_num_math (core->num, input + 2));
../core/cmd_write.c:			ut64 len = r_num_math (core->num, input+1);
../core/cmd_write.c:					r_io_write_at (core->io, core->offset, buf, len);
../core/cmd_write.c:			} else num = r_num_math (core->num, input+2);
../core/cmd_write.c:			r_core_write_at (core, core->offset, buf, len);
../core/cmd_write.c:				len = *input ? r_num_math (core->num, input+3) : 0;
../core/cmd_write.c:					const ut64 cur_off = core->offset;
../core/cmd_write.c:					cmd_suc = r_core_extend_at (core, core->offset, len);
../core/cmd_write.c:					core->offset = cur_off;
../core/cmd_write.c:				addr = r_num_math (core->num, input);
../core/cmd_write.c:				len = *input ? r_num_math (core->num, input) : 0;
../core/cmd_write.c:					ut64 cur_off = core->offset;
../core/cmd_write.c:					core->offset = addr;
../core/cmd_write.c:					ut64 cur_off = core->offset;
../core/cmd_write.c:					core->offset = cur_off;
../core/cmd_write.c:				addr = r_num_math (core->num, input+3);
../core/cmd_write.c:					//ut64 cur_off = core->offset;
../core/cmd_write.c:					core->offset = addr;
../core/cmd_write.c:				addr = p && *p ? r_num_math (core->num, p) : 0;
../core/cmd_write.c:				dist = p && *p ? r_num_math (core->num, p) : 0;
../core/cmd_write.c:				b_size = p && *p ? r_num_math (core->num, p) : 0;
../core/cmd_write.c:		off = r_num_math (core->num, input+1);
../core/cmd_write.c:				r_core_write_at (core, core->offset, buf, len);
../core/cmd_write.c:				r_asm_set_pc (core->assembler, core->offset);
../core/cmd_write.c:				len = r_asm_modify (core->assembler, core->block, input[2],
../core/cmd_write.c:					r_num_math (core->num, input+4));
../core/cmd_write.c:					r_core_write_at (core, core->offset, core->block, len);
../core/cmd_write.c:			r_io_cache_commit (core->io, 0, UT64_MAX);
../core/cmd_write.c:			r_io_cache_reset (core->io, true);
../core/cmd_write.c:			memset (core->block, 0xff, core->blocksize);
../core/cmd_write.c:				//r_io_cache_reset (core->io, true);
../core/cmd_write.c:				from = r_num_math (core->num, input+3);
../core/cmd_write.c:					to = r_num_math (core->num, input+3);
../core/cmd_write.c:					to = from + core->blocksize;
../core/cmd_write.c:				r_io_cache_commit (core->io, from, to);
../core/cmd_write.c:				eprintf ("Invalidate write cache at 0x%08"PFMT64x"\n", core->offset);
../core/cmd_write.c:				r_io_cache_commit (core->io, core->offset, core->offset+1);
../core/cmd_write.c:				r_io_cache_reset (core->io, true);
../core/cmd_write.c:					from = r_num_math (core->num, input+3);
../core/cmd_write.c:					to = r_num_math (core->num, input+3);
../core/cmd_write.c:					from = r_num_math (core->num, input+3);
../core/cmd_write.c:					to = from + core->blocksize;
../core/cmd_write.c:				r_io_cache_invalidate (core->io, from, to);
../core/cmd_write.c:				eprintf ("Invalidate write cache at 0x%08"PFMT64x"\n", core->offset);
../core/cmd_write.c:				r_io_cache_invalidate (core->io, core->offset, core->offset+core->blocksize);
../core/cmd_write.c:			memset (core->block, 0xff, core->blocksize);
../core/cmd_write.c:			r_io_cache_list (core->io, 1);
../core/cmd_write.c:			r_io_cache_list (core->io, 2);
../core/cmd_write.c:			//if (!r_config_get_i (core->config, "io.cache"))
../core/cmd_write.c:			r_io_cache_list (core->io, 0);
../core/cmd_write.c:		r_core_write_at (core, core->offset, (const ut8*)str, len);
../core/cmd_write.c:		r_io_use_desc (core->io, core->file->desc);
../core/cmd_write.c:		r_io_write_at (core->io, core->offset, (const ut8*)str, len);
../core/cmd_write.c:		r_core_write_at (core, core->offset, (const ut8*)str + 1, len);
../core/cmd_write.c:			core->num->value = len;
../core/cmd_write.c:			core->num->value = 0;
../core/cmd_write.c:		r_io_use_desc (core->io, core->file->desc);
../core/cmd_write.c:				st64 sz = r_io_size (core->io);
../core/cmd_write.c:							sz = r_num_math (core->num, space);
../core/cmd_write.c:							addr = core->offset;
../core/cmd_write.c:						r_io_read_at (core->io, addr, buf, sz);
../core/cmd_write.c:			st64 sz = core->blocksize;
../core/cmd_write.c:			ut64 poff = core->offset;
../core/cmd_write.c:					RIOSection *s = r_io_section_vget (core->io, poff);
../core/cmd_write.c:					const char* prefix = r_config_get (core->config, "cfg.prefixdump");
../core/cmd_write.c:				const char* prefix = r_config_get (core->config, "cfg.prefixdump");
../core/cmd_write.c:				const char* prefix = r_config_get (core->config, "cfg.prefixdump");
../core/cmd_write.c:					sz = r_io_fd_size (core->io, core->file->fd) - core->offset;
../core/cmd_write.c:					sz = (st64) r_num_math (core->num, tmp + 1);
../core/cmd_write.c:					sz = r_io_fd_size (core->io, core->file->fd);
../core/cmd_write.c:					if (sz != -1 && core->offset <= sz) {
../core/cmd_write.c:						sz -= core->offset;
../core/cmd_write.c:						if (!r_core_dump (core, filename, core->offset, (ut64)sz, append)) {
../core/cmd_write.c:					sz = core->blocksize;
../core/cmd_write.c:					if (!r_file_dump (filename, core->block, sz, append)) {
../core/cmd_write.c:			r_io_use_fd (core->io, core->file->fd);
../core/cmd_write.c:			r_io_write_at (core->io, core->offset, (const ut8*)str, len);
../core/cmd_write.c:							r_io_write_at (core->io, core->offset, out, len);
../core/cmd_write.c:							core->num->value = len;
../core/cmd_write.c:							core->num->value = 0;
../core/cmd_write.c:					r_io_use_fd (core->io, core->file->fd);
../core/cmd_write.c:					if (r_io_write_at (core->io, core->offset, buf, size) > 0) {
../core/cmd_write.c:						core->num->value = size;
../core/cmd_write.c:					core->num->value = len;
../core/cmd_write.c:					core->num->value = 0;
../core/cmd_write.c:			r_asm_set_pc (core->assembler, core->offset);
../core/cmd_write.c:			acode = r_asm_massemble (core->assembler, file);
../core/cmd_write.c:					if (r_config_get_i (core->config, "scr.prompt"))
../core/cmd_write.c:					r_core_write_at (core, core->offset, acode->buf, acode->len);
../core/cmd_write.c:				r_asm_set_pc (core->assembler, core->offset);
../core/cmd_write.c:				acode = r_asm_assemble_file (core->assembler, file);
../core/cmd_write.c:						if (r_config_get_i (core->config, "scr.prompt"))
../core/cmd_write.c:						r_core_write_at (core, core->offset, acode->buf, acode->len);
../core/cmd_write.c:				r_mem_copyloop (core->block, buf, core->blocksize, len);
../core/cmd_write.c:				r_core_write_at (core, core->offset, core->block, core->blocksize);
../core/cmd_write.c:				WSEEK (core, core->blocksize);
../core/cmd_write.c:			r_io_set_write_mask (core->io, 0, 0);
../core/cmd_write.c:				r_io_use_fd (core->io, core->file->fd);
../core/cmd_write.c:				r_io_set_write_mask (core->io, (const ut8*)str, size);
../core/cmd_write.c:				ut64 addr = r_num_math (core->num, input+2);
../core/cmd_write.c:				ut64 len = r_num_math (core->num, arg+1);
../core/cmd_write.c:				r_io_read_at (core->io, addr, data, len);
../core/cmd_write.c:				r_io_write_at (core->io, core->offset, data, len);
../core/cmd_write.c:				r_core_write_at (core, core->offset, &ulen, 1);
../core/cmd_write.c:				r_core_write_at (core, core->offset+1, (const ut8*)str+1, len);
../core/cmd_write.c:		if (core->oobi) {
../core/cmd_write.c:			r_io_use_fd (core->io, core->file->fd);
../core/cmd_write.c:			r_io_write (core->io, core->oobi, core->oobi_len);
../core/cmd_write.c:			WSEEK (core, core->oobi_len);
../core/cmd_zign.c:	int maxsz = r_config_get_i (core->config, "zign.maxsz");
../core/cmd_zign.c:	int len = R_MIN (core->io->addrbytes * fcnlen, maxsz);
../core/cmd_zign.c:	if (!r_io_is_valid_offset (core->io, fcn->addr, 0)) {
../core/cmd_zign.c:	(void)r_io_read_at (core->io, fcn->addr, buf, len);
../core/cmd_zign.c:	retval = r_sign_add_anal (core->anal, name, len, buf, fcn->addr);
../core/cmd_zign.c:	return r_sign_add_graph (core->anal, name, graph);
../core/cmd_zign.c:	RList *refs = r_sign_fcn_refs (core->anal, fcn);
../core/cmd_zign.c:	bool retval = r_sign_add_refs (core->anal, name, refs);
../core/cmd_zign.c:	int curspace = core->anal->zign_spaces.space_idx;
../core/cmd_zign.c:			zigname = r_str_newf ("%s.", core->anal->zign_spaces.spaces[curspace]);
../core/cmd_zign.c:	r_sign_add_offset (core->anal, zigname, fcn->addr);
../core/cmd_zign.c:	return r_sign_add_graph (core->anal, name, graph);
../core/cmd_zign.c:		retval = r_sign_add_bytes (core->anal, name, size, bytes, mask);
../core/cmd_zign.c:		retval = r_sign_add_anal (core->anal, name, size, bytes, 0);
../core/cmd_zign.c:	offset = r_num_get (core->num, offstr);
../core/cmd_zign.c:	return r_sign_add_offset (core->anal, name, offset);
../core/cmd_zign.c:	bool retval = r_sign_add_refs (core->anal, name, refs);
../core/cmd_zign.c:			r_list_foreach (core->anal->fcns, iter, fcni) {
../core/cmd_zign.c:				if ((!fcnname && core->offset == fcni->addr) ||
../core/cmd_zign.c:			r_list_foreach (core->anal->fcns, iter, fcni) {
../core/cmd_zign.c:			return r_sign_load (core->anal, input + 1);
../core/cmd_zign.c:			return r_sign_save (core->anal, input + 2);
../core/cmd_zign.c:			return r_sign_load_gz (core->anal, input + 2);
../core/cmd_zign.c:	RSpaces *zs = &core->anal->zign_spaces;
../core/cmd_zign.c:		r_sign_flirt_dump (core->anal, input + 2);
../core/cmd_zign.c:		r_sign_flirt_scan (core->anal, input + 2);
../core/cmd_zign.c:	const char *zign_prefix = r_config_get (core->config, "zign.prefix");
../core/cmd_zign.c:		r_flag_set (core->flags, name, addr, size);
../core/cmd_zign.c:	ut8 *buf = malloc (core->blocksize);
../core/cmd_zign.c:	int minsz = r_config_get_i (core->config, "zign.minsz");
../core/cmd_zign.c:	ss->search->align = r_config_get_i (core->config, "search.align");
../core/cmd_zign.c:	r_sign_search_init (core->anal, ss, minsz, searchHitCB, ctx);
../core/cmd_zign.c:	for (at = from; at < to; at += core->blocksize) {
../core/cmd_zign.c:		rlen = R_MIN (core->blocksize, to - at);
../core/cmd_zign.c:		if (!r_io_is_valid_offset (core->io, at, 0)) {
../core/cmd_zign.c:		(void)r_io_read_at (core->io, at, buf, rlen);
../core/cmd_zign.c:		if (r_sign_search_update (core->anal, ss, &at, buf, rlen) == -1) {
../core/cmd_zign.c:	const char *zign_prefix = r_config_get (core->config, "zign.prefix");
../core/cmd_zign.c:	int mincc = r_config_get_i (core->config, "zign.mincc");
../core/cmd_zign.c:	const char *mode = r_config_get (core->config, "search.in");
../core/cmd_zign.c:	bool useBytes = r_config_get_i (core->config, "zign.bytes");
../core/cmd_zign.c:	bool useGraph = r_config_get_i (core->config, "zign.graph");
../core/cmd_zign.c:	bool useOffset = r_config_get_i (core->config, "zign.offset");
../core/cmd_zign.c:	bool useRefs = r_config_get_i (core->config, "zign.refs");
../core/cmd_zign.c:		if (!r_flag_space_push (core->flags, zign_prefix)) {
../core/cmd_zign.c:		r_list_foreach (core->anal->fcns, iter, fcni) {
../core/cmd_zign.c:				r_sign_match_graph (core->anal, fcni, mincc, fcnMatchCB, &graph_match_ctx);
../core/cmd_zign.c:				r_sign_match_offset (core->anal, fcni, fcnMatchCB, &offset_match_ctx);
../core/cmd_zign.c:				r_sign_match_refs (core->anal, fcni, fcnMatchCB, &refs_match_ctx);
../core/cmd_zign.c:		if (!r_flag_space_pop (core->flags)) {
../core/cmd_zign.c:	ut64 at = core->offset;
../core/cmd_zign.c:	const char *zign_prefix = r_config_get (core->config, "zign.prefix");
../core/cmd_zign.c:	int minsz = r_config_get_i (core->config, "zign.minsz");
../core/cmd_zign.c:	int mincc = r_config_get_i (core->config, "zign.mincc");
../core/cmd_zign.c:	bool useBytes = r_config_get_i (core->config, "zign.bytes");
../core/cmd_zign.c:	bool useGraph = r_config_get_i (core->config, "zign.graph");
../core/cmd_zign.c:	bool useOffset = r_config_get_i (core->config, "zign.offset");
../core/cmd_zign.c:	bool useRefs = r_config_get_i (core->config, "zign.refs");
../core/cmd_zign.c:		if (!r_flag_space_push (core->flags, zign_prefix)) {
../core/cmd_zign.c:		eprintf ("[+] searching 0x%08"PFMT64x" - 0x%08"PFMT64x"\n", at, at + core->blocksize);
../core/cmd_zign.c:		r_sign_search_init (core->anal, ss, minsz, searchHitCB, &bytes_search_ctx);
../core/cmd_zign.c:		if (r_sign_search_update (core->anal, ss, &at, core->block, core->blocksize) == -1) {
../core/cmd_zign.c:		r_list_foreach (core->anal->fcns, iter, fcni) {
../core/cmd_zign.c:			if (fcni->addr == core->offset) {
../core/cmd_zign.c:					r_sign_match_graph (core->anal, fcni, mincc, fcnMatchCB, &graph_match_ctx);
../core/cmd_zign.c:					r_sign_match_offset (core->anal, fcni, fcnMatchCB, &offset_match_ctx);
../core/cmd_zign.c:					r_sign_match_refs (core->anal, fcni, fcnMatchCB, &refs_match_ctx);
../core/cmd_zign.c:		if (!r_flag_space_pop (core->flags)) {
../core/cmd_zign.c:	r_flag_space_push (core->flags, "sign");
../core/cmd_zign.c:	r_flag_list (core->flags, *input, input[0] ? input + 1: "");
../core/cmd_zign.c:	r_flag_space_pop (core->flags);
../core/cmd_zign.c:		r_sign_list (core->anal, input[0]);
../core/cmd_zign.c:		r_sign_delete (core->anal, input + 1);
../core/core.c:#define DB core->sdb
../core/core.c:	if (!core || !core->cons || !core->cons->line) {
../core/core.c:	r_line_free_autocomplete (core->cons->line);
../core/core.c:	const char *cmd = r_config_get (core->config, "cmd.fcn.new");
../core/core.c:		ut64 oaddr = core->offset;
../core/core.c:	const char *cmd = r_config_get (core->config, "cmd.fcn.delete");
../core/core.c:		ut64 oaddr = core->offset;
../core/core.c:	const char *cmd = r_config_get (core->config, "cmd.fcn.rename");
../core/core.c:		ut64 oaddr = core->offset;
../core/core.c:	const char *cmdbp = r_config_get (core->config, "cmd.bp");
../core/core.c:	if (!core->asmqjmps) {
../core/core.c:	if (core->is_asmqjmps_letter) {
../core/core.c:		if (pos < core->asmqjmps_count) {
../core/core.c:			return core->asmqjmps[pos + 1];
../core/core.c:		if (pos <= core->asmqjmps_count) {
../core/core.c:			return core->asmqjmps[pos];
../core/core.c:	if (!core->asmqjmps) {
../core/core.c:	if (core->is_asmqjmps_letter) {
../core/core.c:		if (core->asmqjmps_count >= R_CORE_ASMQJMPS_MAX_LETTERS) {
../core/core.c:		if (core->asmqjmps_count >= core->asmqjmps_size - 2) {
../core/core.c:			core->asmqjmps = realloc (core->asmqjmps, core->asmqjmps_size * 2 * sizeof (ut64));
../core/core.c:			if (!core->asmqjmps) return NULL;
../core/core.c:			core->asmqjmps_size *= 2;
../core/core.c:	if (core->asmqjmps_count < core->asmqjmps_size - 1) {
../core/core.c:		for (i = 0; i < core->asmqjmps_count + 1; i++) {
../core/core.c:			if (core->asmqjmps[i] == addr) {
../core/core.c:			i = ++core->asmqjmps_count;
../core/core.c:			core->asmqjmps[i] = addr;
../core/core.c:	if (core->is_asmqjmps_letter) {
../core/core.c:		r_config_set (core->config, "asm.arch", arch);
../core/core.c:		r_config_set_i (core->config, "asm.bits", bits);
../core/core.c:	RFlagItem *item = r_flag_get_i (core->flags, addr);
../core/core.c:	RFlagItem *item = r_flag_get_at (core->flags, addr, true);
../core/core.c:	r_anal_build_range_on_hints (core->anal);
../core/core.c:	return r_config_get_i (core->config, k);
../core/core.c:	if (!r_config_get_i (core->config, "asm.cmtpatch")) {
../core/core.c:	if ((sec = r_io_section_get (core->io, maddr))) {
../core/core.c:	r_meta_add (core->anal, R_META_TYPE_COMMENT, vaddr, vaddr, comment);
../core/core.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/core.c:		if (core->num->nc.curr_tok=='+') {
../core/core.c:			ut64 off = core->num->nc.number_value.n;
../core/core.c:				off = core->offset;
../core/core.c:			RAnalFunction *fcn = r_anal_get_fcn_at (core->anal, off, 0);
../core/core.c:				ut64 dst = r_anal_fcn_label_get (core->anal, fcn, str + 1);
../core/core.c:					core->num->nc.curr_tok = '-';
../core/core.c:		int refsz = core->assembler->bits / 8;
../core/core.c:				q = r_num_calc_index (core->num, NULL);
../core/core.c:						n = r_num_math (core->num, o);
../core/core.c:						r_num_calc_index (core->num, q);
../core/core.c:		(void)r_io_read_at (core->io, n, buf, R_MIN (sizeof (buf), refsz));
../core/core.c:			return r_read_ble64 (buf, core->print->big_endian);
../core/core.c:			return r_read_ble32 (buf, core->print->big_endian);
../core/core.c:			return r_read_ble16 (buf, core->print->big_endian);
../core/core.c:		r_anal_op (core->anal, &op, core->offset, core->block, core->blocksize);
../core/core.c:			return r_debug_reg_get (core->dbg, str + 2);
../core/core.c:			out = sdb_querys (core->sdb, NULL, 0, bptr);
../core/core.c:					ret = r_num_math (core->num, out);
../core/core.c:				ut64 ret = r_config_get_i (core->config, bptr);
../core/core.c:		case 'P': return (core->dbg->pid > 0)? core->dbg->pid: 0;
../core/core.c:				RFlagItem *fi = r_flag_get_i (core->flags, core->offset);
../core/core.c:				ls_foreach (core->io->sections, iter, s) {
../core/core.c:		case 'b': return core->blocksize;
../core/core.c:			if (core->file) {
../core/core.c:				return r_io_fd_size (core->io, core->file->fd);
../core/core.c:			return r_config_get_i (core->config, "asm.bits") / 8;
../core/core.c:			if ((s = r_io_section_vget (core->io, core->offset))) {
../core/core.c:				r_list_foreach (core->dbg->maps, iter, map) {
../core/core.c:					if (core->offset >= map->addr && core->offset < map->addr_end) {
../core/core.c:		case '?': return core->num->value;
../core/core.c:		case '$': return core->offset;
../core/core.c:				s = r_io_section_vget (core->io, core->offset);
../core/core.c:				return s ? core->offset - s->vaddr + s->paddr : core->offset;
../core/core.c:			fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/core.c:				case 'j': return bbJump (fcn, core->offset); // jump
../core/core.c:				case 'f': return bbFail (fcn, core->offset); // fail
../core/core.c:				case 'b': return bbBegin (fcn, core->offset);
../core/core.c:				case 's': return bbSize (fcn, core->offset);
../core/core.c:			RAnalFunction *fcn = r_anal_fcn_find_name (core->anal, str);
../core/core.c:			ut64 addr = r_anal_fcn_label_get (core->anal, core->offset, str);
../core/core.c:			if ((flag = r_flag_get (core->flags, str))) {
../core/core.c:			struct r_reg_item_t *r = r_reg_get (core->dbg->reg, str, -1);
../core/core.c:					const char *alias = r_reg_get_name (core->dbg->reg, role);
../core/core.c:					r = r_reg_get (core->dbg->reg, alias, -1);
../core/core.c:						ret = r_reg_get_value (core->dbg->reg, r);
../core/core.c:				ret = r_reg_get_value (core->dbg->reg, r);
../core/core.c:			r_list_foreach (core->flags->flags, iter, flag) {
../core/core.c:			SdbList *sls = sdb_foreach_list (core->print->formats, false);
../core/core.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/core.c:				vars = r_anal_var_list (core->anal, fcn, R_ANAL_VAR_KIND_BPV);
../core/core.c:				vars = r_anal_var_list (core->anal, fcn, R_ANAL_VAR_KIND_ARG);
../core/core.c:			SdbList *l = sdb_foreach_list (core->anal->sdb_types, true);
../core/core.c:			if (core->anal->zign_path && core->anal->zign_path[0]) {
../core/core.c:				char *zignpath = r_file_abspath (core->anal->zign_path);
../core/core.c:				r_list_foreach (core->rcmd->macro.macros, iter, item) {
../core/core.c:			RFlag *flag = core->flags;
../core/core.c:			RSpaces zs = core->anal->zign_spaces;
../core/core.c:			SdbList *ccs = sdb_foreach_list (core->anal->sdb_cc, true);
../core/core.c:			r_list_foreach (core->flags->flags, iter, flag) {
../core/core.c:			char **keys = r_cmd_alias_keys(core->rcmd, &count);
../core/core.c:			r_list_foreach (core->config->nodes, iter, bt) {
../core/core.c:			int i, j, cfg_newtab = r_config_get_i (core->config, "cfg.newtab");
../core/core.c:				RCmdDescriptor *desc = &core->root_cmd_descriptor;
../core/core.c:	ut64 prevaddr = core->offset;
../core/core.c:	if (core->anal && core->anal->sdb) {
../core/core.c:		sdb_ns_set (DB, "anal", core->anal->sdb);
../core/core.c:	if (core->bin && core->bin->sdb) {
../core/core.c:		sdb_ns_set (DB, "bin", core->bin->sdb);
../core/core.c:	o = r_bin_get_object (core->bin);
../core/core.c:	//sdb_ns_set (core->sdb, "flags", core->flags->sdb);
../core/core.c:	//sdb_ns_set (core->sdb, "bin", core->bin->sdb);
../core/core.c:	if (core->assembler && core->assembler->syscall && core->assembler->syscall->db) {
../core/core.c:		core->assembler->syscall->db->refs++;
../core/core.c:		sdb_ns_set (DB, "syscall", core->assembler->syscall->db);
../core/core.c:	if (core->dbg->sgnls) {
../core/core.c:		core->dbg->sgnls->refs++;
../core/core.c:		sdb_ns_set (d, "signals", core->dbg->sgnls);
../core/core.c:	isenum = sdb_const_get (core->anal->sdb_types, name, 0);
../core/core.c:		return sdb_get (core->anal->sdb_types, q, 0);
../core/core.c:	isenum = sdb_const_get (core->anal->sdb_types, name, 0);
../core/core.c:			res = sdb_const_get (core->anal->sdb_types, q, 0);
../core/core.c:		return r_core_anal_hasrefs_to_depth(core, value, r_config_get_i (core->config, "hex.depth"));
../core/core.c:	RFlagItem *fi = r_flag_get_i (core->flags, value);
../core/core.c:	RFlagItem *fi = r_flag_get_i (core->flags, value);
../core/core.c:	fcn = r_anal_get_fcn_in (core->anal, value, 0);
../core/core.c:		RDebugMap *map = r_debug_map_get (core->dbg, value);
../core/core.c:	sect = value? r_io_section_vget (core->io, value): NULL;
../core/core.c:			r_io_read_at (core->io, value, buf, sizeof (buf));
../core/core.c:			r_asm_set_pc (core->assembler, value);
../core/core.c:			r_asm_disassemble (core->assembler, &op, buf, sizeof (buf));
../core/core.c:				r_list_foreach (core->dbg->maps, iter, map) {
../core/core.c:			r_io_read_at (core->io, value, buf, sizeof (buf));
../core/core.c:			ut64 n = (core->assembler->bits == 64)? *n64: *n32;
../core/core.c:		const char *c = r_config_get_i (core->config, "scr.color")? core->cons->pal.ai_ascii: "";
../core/core.c:		if (r_io_read_at (core->io, value, buf, sizeof (buf))) {
../core/core.c:		r_io_read_at (core->io, value, buf, sizeof (buf));
../core/core.c:		ut64 n = (core->assembler->bits == 64)? *n64: *n32;
../core/core.c:		return r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);
../core/core.c:	if (!(core->print->flags & R_PRINT_FLAGS_COLOR)) {
../core/core.c:	if (!r_config_get_i (core->config, "scr.color")) {
../core/core.c:		return core->cons->pal.ai_exec; //Color_RED;
../core/core.c:		return core->cons->pal.ai_write; //Color_BLUE;
../core/core.c:		return core->cons->pal.ai_read; //Color_GREEN;
../core/core.c:		return core->cons->pal.ai_seq; //Color_MAGENTA;
../core/core.c:		return core->cons->pal.ai_ascii; //Color_YELLOW;
../core/core.c:	if (core->cfglog) {
../core/core.c:	core->blocksize = R_CORE_BLOCKSIZE;
../core/core.c:	core->block = (ut8*)calloc (R_CORE_BLOCKSIZE + 1, 1);
../core/core.c:	if (!core->block) {
../core/core.c:	core->lock = r_th_lock_new (true);
../core/core.c:	core->cmd_depth = R_CORE_CMD_DEPTH + 1;
../core/core.c:	core->sdb = sdb_new (NULL, "r2kv.sdb", 0); // XXX: path must be in home?
../core/core.c:	core->lastsearch = NULL;
../core/core.c:	core->cmdfilter = NULL;
../core/core.c:	core->switch_file_view = 0;
../core/core.c:	core->cmdremote = 0;
../core/core.c:	core->incomment = false;
../core/core.c:	core->config = NULL;
../core/core.c:	core->http_up = false;
../core/core.c:	ZERO_FILL (core->root_cmd_descriptor);
../core/core.c:	core->print = r_print_new ();
../core/core.c:	core->print->user = core;
../core/core.c:	core->print->num = core->num;
../core/core.c:	core->print->get_enumname = getenumname;
../core/core.c:	core->print->get_bitfield = getbitfield;
../core/core.c:	core->print->offname = r_core_print_offname;
../core/core.c:	core->print->cb_printf = r_cons_printf;
../core/core.c:	core->print->cb_color = r_cons_rainbow_get;
../core/core.c:	core->print->write = mywrite;
../core/core.c:	core->print->disasm = __disasm;
../core/core.c:	core->print->colorfor = (RPrintColorFor)r_core_anal_optype_colorfor;
../core/core.c:	core->print->hasrefs = (RPrintColorFor)r_core_anal_hasrefs;
../core/core.c:	core->print->get_comments = (RPrintCommentCallback) r_core_anal_get_comments;
../core/core.c:	core->print->use_comments = false;
../core/core.c:	core->rtr_n = 0;
../core/core.c:	core->blocksize_max = R_CORE_BLOCKSIZE_MAX;
../core/core.c:	core->tasks = r_list_new ();
../core/core.c:	core->watchers = r_list_new ();
../core/core.c:	core->watchers->free = (RListFree)r_core_cmpwatch_free;
../core/core.c:	core->scriptstack = r_list_new ();
../core/core.c:	core->scriptstack->free = (RListFree)free;
../core/core.c:	core->log = r_core_log_new ();
../core/core.c:	core->times = R_NEW0 (RCoreTimes);
../core/core.c:	core->vmode = false;
../core/core.c:	core->section = NULL;
../core/core.c:	core->oobi = NULL;
../core/core.c:	core->oobi_len = 0;
../core/core.c:	core->printidx = 0;
../core/core.c:	core->lastcmd = NULL;
../core/core.c:	core->cmdqueue = NULL;
../core/core.c:	core->cmdrepeat = true;
../core/core.c:	core->yank_buf = r_buf_new();
../core/core.c:	core->num = r_num_new (&num_callback, &str_callback, core);
../core/core.c:	core->curasmstep = 0;
../core/core.c:	core->egg = r_egg_new ();
../core/core.c:	r_egg_setup (core->egg, R_SYS_ARCH, R_SYS_BITS, 0, R_SYS_OS);
../core/core.c:	core->cons = r_cons_new ();
../core/core.c:	if (core->cons->refcnt == 1) {
../core/core.c:		core->cons = r_cons_singleton ();
../core/core.c:		if (core->cons->line) {
../core/core.c:			core->cons->line->user = core;
../core/core.c:			core->cons->line->editor_cb = \
../core/core.c:		core->cons->user_fgets = NULL;
../core/core.c:		core->cons->user_fgets = (void *)r_core_fgets;
../core/core.c:	core->print->cons = core->cons;
../core/core.c:	r_cons_bind (&core->print->consbind);
../core/core.c:	core->old_num = core->cons->num;
../core/core.c:	core->cons->num = core->num;
../core/core.c:	core->lang = r_lang_new ();
../core/core.c:	core->lang->cmd_str = (char *(*)(void *, const char *))r_core_cmd_str;
../core/core.c:	core->lang->cmdf = (int (*)(void *, const char *, ...))r_core_cmdf;
../core/core.c:	core->cons->editor = (RConsEditorCallback)r_core_editor;
../core/core.c:	core->cons->user = (void*)core;
../core/core.c:	core->lang->cb_printf = r_cons_printf;
../core/core.c:	r_lang_define (core->lang, "RCore", "core", core);
../core/core.c:	r_lang_set_user_ptr (core->lang, core);
../core/core.c:	core->assembler = r_asm_new ();
../core/core.c:	core->assembler->num = core->num;
../core/core.c:	r_asm_set_user_ptr (core->assembler, core);
../core/core.c:	core->anal = r_anal_new ();
../core/core.c:	core->anal->log = r_core_anal_log;
../core/core.c:	core->anal->meta_spaces.cb_printf = r_cons_printf;
../core/core.c:	core->anal->cb.on_fcn_new = on_fcn_new;
../core/core.c:	core->anal->cb.on_fcn_delete = on_fcn_delete;
../core/core.c:	core->anal->cb.on_fcn_rename = on_fcn_rename;
../core/core.c:	core->assembler->syscall = core->anal->syscall; // BIND syscall anal/asm
../core/core.c:	r_anal_set_user_ptr (core->anal, core);
../core/core.c:	core->anal->cb_printf = (void *) r_cons_printf;
../core/core.c:	core->parser = r_parse_new ();
../core/core.c:	core->parser->anal = core->anal;
../core/core.c:	core->parser->varlist = r_anal_var_list;
../core/core.c:	r_parse_set_user_ptr (core->parser, core);
../core/core.c:	core->bin = r_bin_new ();
../core/core.c:	core->bin->cb_printf = (PrintfCallback) r_cons_printf;
../core/core.c:	r_bin_set_user_ptr (core->bin, core);
../core/core.c:	core->io = r_io_new ();
../core/core.c:	core->io->ff = 1;
../core/core.c:	core->io->user = (void *)core;
../core/core.c:	core->io->cb_core_cmd = core_cmd_callback;
../core/core.c:	core->io->cb_core_cmdstr = core_cmdstr_callback;
../core/core.c:	core->io->cb_core_post_write = core_post_write_callback;
../core/core.c:	core->search = r_search_new (R_SEARCH_KEYWORD);
../core/core.c:	r_io_undo_enable (core->io, 1, 0); // TODO: configurable via eval
../core/core.c:	core->fs = r_fs_new ();
../core/core.c:	core->flags = r_flag_new ();
../core/core.c:	core->flags->cb_printf = r_cons_printf;
../core/core.c:	core->graph = r_agraph_new (r_cons_canvas_new (1, 1));
../core/core.c:	core->graph->need_reload_nodes = false;
../core/core.c:	core->asmqjmps_size = R_CORE_ASMQJMPS_NUM;
../core/core.c:	if (sizeof (ut64) * core->asmqjmps_size < core->asmqjmps_size) {
../core/core.c:		core->asmqjmps_size = 0;
../core/core.c:		core->asmqjmps = NULL;
../core/core.c:		core->asmqjmps = R_NEWS (ut64, core->asmqjmps_size);
../core/core.c:	r_bin_bind (core->bin, &(core->assembler->binb));
../core/core.c:	r_bin_bind (core->bin, &(core->anal->binb));
../core/core.c:	r_bin_bind (core->bin, &(core->anal->binb));
../core/core.c:	r_io_bind (core->io, &(core->search->iob));
../core/core.c:	r_io_bind (core->io, &(core->print->iob));
../core/core.c:	r_io_bind (core->io, &(core->anal->iob));
../core/core.c:	r_io_bind (core->io, &(core->fs->iob));
../core/core.c:	r_core_bind (core, &(core->fs->cob));
../core/core.c:	r_io_bind (core->io, &(core->bin->iob));
../core/core.c:	r_flag_bind (core->flags, &(core->anal->flb));
../core/core.c:	r_anal_bind (core->anal, &(core->parser->analb));
../core/core.c:	r_core_bind (core, &(core->anal->coreb));
../core/core.c:	core->file = NULL;
../core/core.c:	core->files = r_list_newf ((RListFree)r_core_file_free);
../core/core.c:	core->offset = 0LL;
../core/core.c:	core->dbg = r_debug_new (true);
../core/core.c:	r_core_bind (core, &core->dbg->corebind);
../core/core.c:	core->dbg->anal = core->anal; // XXX: dupped instance.. can cause lost pointerz
../core/core.c:	//r_debug_use (core->dbg, "native");
../core/core.c://	r_reg_arena_push (core->dbg->reg); // create a 2 level register state stack
../core/core.c://	core->dbg->anal->reg = core->anal->reg; // XXX: dupped instance.. can cause lost pointerz
../core/core.c:	core->io->cb_printf = r_cons_printf;
../core/core.c:	core->dbg->cb_printf = r_cons_printf;
../core/core.c:	core->dbg->bp->cb_printf = r_cons_printf;
../core/core.c:	r_debug_io_bind (core->dbg, core->io);
../core/core.c:	r_asm_use (core->assembler, R_SYS_ARCH);
../core/core.c:	r_anal_use (core->anal, R_SYS_ARCH);
../core/core.c:		r_config_set_i (core->config, "asm.bits", 64);
../core/core.c:			r_config_set_i (core->config, "asm.bits", 32);
../core/core.c:	r_config_set (core->config, "asm.arch", R_SYS_ARCH);
../core/core.c:	r_bp_use (core->dbg->bp, R_SYS_ARCH, core->anal->bits);
../core/core.c:	if (bsize == core->blocksize) {
../core/core.c:	if (bsize > core->blocksize_max) {
../core/core.c:	} else if (core->blocksize_max && bsize>core->blocksize_max) {
../core/core.c:			bsize, core->blocksize_max);
../core/core.c:		bsize = core->blocksize_max;
../core/core.c:	bump = realloc (core->block, bsize + 1);
../core/core.c:		core->block = bump;
../core/core.c:		core->blocksize = bsize;
../core/core.c:		memset (core->block, 0xff, core->blocksize);
../core/core.c:	ut64 seek = core->offset;
../core/core.c:	diff = core->offset%align;
../core/core.c:	r_asm_set_pc (core->assembler, addr);
../core/core.c:	ret = r_asm_disassemble (core->assembler, &op, buf, sizeof (buf));
../core/core.c:	r_anal_op (core->anal, op, addr, buf, sizeof (buf));
../core/core.c:			r_config_get (core->config, "rap.loop"));
../core/core.c:				if (r_config_get_i (core->config, "rap.loop")) {
../core/core.c:					ut64 baddr = r_config_get_i (core->config, "bin.laddr");
../core/core.c:						r_io_map_add (core->io, file->fd, perm, 0, 0, r_io_fd_size (core->io, file->fd), true);
../core/core.c:						if (core->file) {
../core/core.c:							pipefd = core->file->fd;
../core/core.c:				ptr = (ut8 *)malloc (i + core->blocksize + 5);
../core/core.c:					if (i > core->blocksize) {
../core/core.c:					if (i + 128 < core->blocksize) {
../core/core.c:					memcpy (ptr + 5, core->block, i); //core->blocksize);
../core/core.c:				int ret = r_core_write_at (core, core->offset, ptr, x);
../core/core.c:					if (core->file) {
../core/core.c:						x = r_io_fd_size (core->io, core->file->fd);
../core/core.c:					x = core->offset;
../core/core.c:	int ret, len = core->blocksize;
../core/core.c:			if (!r_io_read_at (core->io, from, buf, len)) {
../core/core.c:	const char *editor = r_config_get (core->config, "cfg.editor");
../core/core.c:R_API RCons *r_core_get_cons (RCore *core) { return core->cons; }
../core/core.c:R_API RConfig *r_core_get_config (RCore *core) { return core->config; }
../core/core.c:R_API RBin *r_core_get_bin (RCore *core) { return core->bin; }
../core/core.c:	num = r_syscall_get_num (core->anal->syscall, name);
../core/core.c:	r_egg_reset (core->egg);
../core/core.c:	r_egg_load (core->egg, code, 0);
../core/core.c:	if (!r_egg_compile (core->egg)) {
../core/core.c:	if (!r_egg_assemble (core->egg)) {
../core/core.c:	if ((b = r_egg_get_bin (core->egg))) {
../core/core.c:	int i, match, align = core->search->align, hitctr = 0;
../core/core.c:	bool vinfun = r_config_get_i (core->config, "anal.vinfun");
../core/core.c:	bool vinfunr = r_config_get_i (core->config, "anal.vinfunrange");
../core/core.c:		bool res = r_io_read_at (core->io, from, buf, sizeof (buf));
../core/core.c:					if (r_anal_get_fcn_in_bounds (core->anal, addr, R_ANAL_FCN_TYPE_NULL)) {
../core/core.c:					if (r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL)) {
../core/disasm.c:	if (ds->core->io->pava) {
../core/disasm.c:		ut64 at = r_io_section_get_vaddr (ds->core->io, addr);
../core/disasm.c:	if (core && f && cmt && cmt_size > 0 && f->bits && f->bits != core->assembler->bits) {
../core/disasm.c:		const char *asm_arch = r_config_get (core->config, "asm.arch");
../core/disasm.c:	s = r_io_section_vget (core->io, addr);
../core/disasm.c:		r_list_foreach (core->dbg->maps, iter, map) {
../core/disasm.c:	ds->pal_comment = core->cons->pal.comment;
../core/disasm.c:	#define P(x) (core->cons && core->cons->pal.x)? core->cons->pal.x
../core/disasm.c:	ds->offless = r_config_get_i (core->config, "asm.offless");
../core/disasm.c:	ds->use_esil = r_config_get_i (core->config, "asm.esil");
../core/disasm.c:	ds->show_flgoff = r_config_get_i (core->config, "asm.flgoff");
../core/disasm.c:	ds->show_nodup = r_config_get_i (core->config, "asm.nodup");
../core/disasm.c:	ds->show_color = r_config_get_i (core->config, "scr.color");
../core/disasm.c:	ds->show_color_bytes = r_config_get_i (core->config, "scr.color.bytes"); // maybe rename to asm.color.bytes
../core/disasm.c:	ds->colorop = r_config_get_i (core->config, "scr.color.ops"); // XXX confusing name // asm.color.inst (mnemonic + operands) ?
../core/disasm.c:	ds->show_utf8 = r_config_get_i (core->config, "scr.utf8");
../core/disasm.c:	ds->acase = r_config_get_i (core->config, "asm.ucase");
../core/disasm.c:	ds->capitalize = r_config_get_i (core->config, "asm.capitalize");
../core/disasm.c:	ds->atabs = r_config_get_i (core->config, "asm.tabs");
../core/disasm.c:	ds->atabsonce = r_config_get_i (core->config, "asm.tabsonce");
../core/disasm.c:	ds->atabsoff = r_config_get_i (core->config, "asm.tabsoff");
../core/disasm.c:	ds->midflags = r_config_get_i (core->config, "asm.midflags");
../core/disasm.c:	ds->midcursor = r_config_get_i (core->config, "asm.midcursor");
../core/disasm.c:	ds->decode = r_config_get_i (core->config, "asm.decode");
../core/disasm.c:	ds->pseudo = r_config_get_i (core->config, "asm.pseudo");
../core/disasm.c:	ds->filter = r_config_get_i (core->config, "asm.filter");
../core/disasm.c:	ds->interactive = r_config_get_i (core->config, "scr.interactive");
../core/disasm.c:	ds->varsub = r_config_get_i (core->config, "asm.varsub");
../core/disasm.c:	core->parser->relsub = r_config_get_i (core->config, "asm.relsub");
../core/disasm.c:	core->parser->localvar_only = r_config_get_i (core->config, "asm.varsub_only");
../core/disasm.c:	ds->show_vars = r_config_get_i (core->config, "asm.vars");
../core/disasm.c:	ds->show_varsum = r_config_get_i (core->config, "asm.varsum");
../core/disasm.c:	ds->show_varxs = r_config_get_i (core->config, "asm.varxs");
../core/disasm.c:	ds->maxrefs = r_config_get_i (core->config, "asm.maxrefs");
../core/disasm.c:	ds->show_lines = r_config_get_i (core->config, "asm.lines");
../core/disasm.c:	ds->linesright = r_config_get_i (core->config, "asm.linesright");
../core/disasm.c:	ds->show_indent = r_config_get_i (core->config, "asm.indent");
../core/disasm.c:	ds->indent_space = r_config_get_i (core->config, "asm.indentspace");
../core/disasm.c:	ds->tracespace = r_config_get_i (core->config, "asm.tracespace");
../core/disasm.c:	ds->cyclespace = r_config_get_i (core->config, "asm.cyclespace");
../core/disasm.c:	ds->show_dwarf = r_config_get_i (core->config, "asm.dwarf");
../core/disasm.c:	ds->dwarfFile = r_config_get_i (ds->core->config, "asm.dwarf.file");
../core/disasm.c:	ds->dwarfAbspath = r_config_get_i (ds->core->config, "asm.dwarf.abspath");
../core/disasm.c:	ds->show_lines_call = r_config_get_i (core->config, "asm.lines.call");
../core/disasm.c:	ds->show_lines_ret = r_config_get_i (core->config, "asm.lines.ret");
../core/disasm.c:	ds->show_size = r_config_get_i (core->config, "asm.size");
../core/disasm.c:	ds->show_trace = r_config_get_i (core->config, "asm.trace");
../core/disasm.c:	ds->linesout = r_config_get_i (core->config, "asm.linesout");
../core/disasm.c:	ds->adistrick = r_config_get_i (core->config, "asm.middle"); // TODO: find better name
../core/disasm.c:	ds->asm_demangle = r_config_get_i (core->config, "asm.demangle");
../core/disasm.c:	ds->asm_describe = r_config_get_i (core->config, "asm.describe");
../core/disasm.c:	ds->show_offset = r_config_get_i (core->config, "asm.offset");
../core/disasm.c:	ds->show_offdec = r_config_get_i (core->config, "asm.decoff");
../core/disasm.c:	ds->show_bbline = r_config_get_i (core->config, "asm.bbline");
../core/disasm.c:	ds->show_section = r_config_get_i (core->config, "asm.section");
../core/disasm.c:	ds->show_section_col = r_config_get_i (core->config, "asm.section.col");
../core/disasm.c:	ds->show_symbols = r_config_get_i (core->config, "asm.symbol");
../core/disasm.c:	ds->show_symbols_col = r_config_get_i (core->config, "asm.symbol.col");
../core/disasm.c:	ds->show_emu = r_config_get_i (core->config, "asm.emu");
../core/disasm.c:	ds->show_emu_str = r_config_get_i (core->config, "asm.emustr");
../core/disasm.c:	ds->show_emu_write = r_config_get_i (core->config, "asm.emuwrite");
../core/disasm.c:	ds->show_offseg = r_config_get_i (core->config, "asm.segoff");
../core/disasm.c:	ds->show_flags = r_config_get_i (core->config, "asm.flags");
../core/disasm.c:	ds->show_bytes = r_config_get_i (core->config, "asm.bytes");
../core/disasm.c:	ds->show_reloff = r_config_get_i (core->config, "asm.reloff");
../core/disasm.c:	ds->show_reloff_flags = r_config_get_i (core->config, "asm.reloff.flags");
../core/disasm.c:	ds->show_fcnlines = r_config_get_i (core->config, "asm.fcnlines");
../core/disasm.c:	ds->show_comments = r_config_get_i (core->config, "asm.comments");
../core/disasm.c:	ds->show_jmphints = r_config_get_i (core->config, "asm.jmphints");
../core/disasm.c:	ds->show_leahints = r_config_get_i (core->config, "asm.leahints");
../core/disasm.c:	ds->show_slow = r_config_get_i (core->config, "asm.slow");
../core/disasm.c:	ds->show_calls = r_config_get_i (core->config, "asm.calls");
../core/disasm.c:	ds->show_family = r_config_get_i (core->config, "asm.family");
../core/disasm.c:	ds->cmtcol = r_config_get_i (core->config, "asm.cmtcol");
../core/disasm.c:	ds->show_cmtflgrefs = r_config_get_i (core->config, "asm.cmtflgrefs");
../core/disasm.c:	ds->show_cycles = r_config_get_i (core->config, "asm.cycles");
../core/disasm.c:	ds->show_stackptr = r_config_get_i (core->config, "asm.stackptr");
../core/disasm.c:	ds->show_xrefs = r_config_get_i (core->config, "asm.xrefs");
../core/disasm.c:	ds->show_cmtrefs = r_config_get_i (core->config, "asm.cmtrefs");
../core/disasm.c:	ds->cmtfold = r_config_get_i (core->config, "asm.cmtfold");
../core/disasm.c:	ds->show_cmtoff = r_config_get (core->config, "asm.cmtoff");
../core/disasm.c:	ds->show_functions = r_config_get_i (core->config, "asm.functions");
../core/disasm.c:	ds->show_fcncalls = r_config_get_i (core->config, "asm.fcncalls");
../core/disasm.c:	ds->nbytes = r_config_get_i (core->config, "asm.nbytes");
../core/disasm.c:	ds->show_asciidot = r_config_get_i (core->config, "asm.asciidot");
../core/disasm.c:	const char *strenc_str = r_config_get (core->config, "asm.strenc");
../core/disasm.c:	core->print->bytespace = r_config_get_i (core->config, "asm.bytespace");
../core/disasm.c:	ds->flagspace_ports = r_flag_space_get (core->flags, "ports");
../core/disasm.c:	ds->lbytes = r_config_get_i (core->config, "asm.lbytes");
../core/disasm.c:	ds->show_comment_right_default = r_config_get_i (core->config, "asm.cmtright");
../core/disasm.c:	ds->show_flag_in_bytes = r_config_get_i (core->config, "asm.flagsinbytes");
../core/disasm.c:	ds->show_hints = r_config_get_i (core->config, "asm.hints");
../core/disasm.c:	ds->show_marks = r_config_get_i (core->config, "asm.marks");
../core/disasm.c:	ds->show_noisy_comments = r_config_get_i (core->config, "asm.noisy");
../core/disasm.c:	ds->showpayloads = r_config_get_i (ds->core->config, "asm.payloads");
../core/disasm.c:	ds->showrelocs = r_config_get_i (core->config, "bin.relocs");
../core/disasm.c:	if (r_config_get_i (core->config, "asm.lineswide")) {
../core/disasm.c:	if (core->cons->vline) {
../core/disasm.c:	if (core->print->cur_enabled) {
../core/disasm.c:		if (core->print->cur < 0) {
../core/disasm.c:			core->print->cur = 0;
../core/disasm.c:		ds->cursor = core->print->cur;
../core/disasm.c:	if (r_config_get_i (core->config, "asm.lineswide")) {
../core/disasm.c:	if (core->cons->vline) {
../core/disasm.c:	RAnal *anal = ds->core->anal;
../core/disasm.c:	RAnal *anal = ds->core->anal;
../core/disasm.c:	RAnal *anal = core->anal;
../core/disasm.c:	char *hlstr = r_meta_get_string (ds->core->anal, R_META_TYPE_HIGHLIGHT, ds->at);
../core/disasm.c:	r_cons_strcat (r_print_color_op_type (core->print, ds->analop.type));
../core/disasm.c:		scol1 = r_print_colorize_opcode (ds->core->print, s1, ds->color_reg, ds->color_num, partial_reset);
../core/disasm.c:		scol2 = r_print_colorize_opcode (ds->core->print, s2, ds->color_reg, ds->color_num, partial_reset);
../core/disasm.c:	return r_print_colorize_opcode (ds->core->print, source, ds->color_reg, ds->color_num, partial_reset);
../core/disasm.c:	core->parser->hint = ds->hint;
../core/disasm.c:	core->parser->relsub = r_config_get_i (core->config, "asm.relsub");
../core/disasm.c:	core->parser->relsub_addr = 0;
../core/disasm.c:		RAnalFunction *f = r_anal_get_fcn_in (core->anal, at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:		core->parser->varlist = r_anal_var_list_dynamic;
../core/disasm.c:		r_parse_varsub (core->parser, f, at, ds->analop.size,
../core/disasm.c:		if (core->parser->relsub) {
../core/disasm.c:			RList *list = r_anal_refs_get (core->anal, at);
../core/disasm.c:					core->parser->relsub_addr = ref->addr;
../core/disasm.c:		char *tmpopstr = r_anal_op_to_string (core->anal, &ds->analop);
../core/disasm.c:			int ofs = core->parser->flagspace;
../core/disasm.c:				core->parser->notin_flagspace = -1;
../core/disasm.c:				core->parser->flagspace = fs;
../core/disasm.c:					core->parser->notin_flagspace = fs;
../core/disasm.c:					core->parser->flagspace = fs;
../core/disasm.c:					core->parser->notin_flagspace = -1;
../core/disasm.c:					core->parser->flagspace = -1;
../core/disasm.c:				if (core->parser->relsub_addr == 0) {
../core/disasm.c:					const int be = core->assembler->big_endian;
../core/disasm.c:					r_io_read_i (core->io, ds->analop.ptr, &killme, ds->analop.refptr, be);
../core/disasm.c:					core->parser->relsub_addr = (int)killme;
../core/disasm.c:			r_parse_filter (core->parser, core->flags, asm_str,
../core/disasm.c:				ds->str, sizeof (ds->str), core->print->big_endian);
../core/disasm.c:			core->parser->flagspace = ofs;
../core/disasm.c:		char *wcdata = r_meta_get_string (ds->core->anal, R_META_TYPE_HIGHLIGHT, ds->at);
../core/disasm.c:	hint = r_anal_hint_get (core->anal, at);
../core/disasm.c:		r_config_set (core->config, "asm.arch", hint_arch);
../core/disasm.c:		r_config_set (core->config, "asm.syntax", hint_syntax);
../core/disasm.c:				hint_arch = strdup (r_config_get (core->config, "asm.arch"));
../core/disasm.c:			r_config_set (core->config, "asm.arch", hint->arch);
../core/disasm.c:				hint_syntax = strdup (r_config_get (core->config, "asm.syntax"));
../core/disasm.c:			r_config_set (core->config, "asm.syntax", hint->syntax);
../core/disasm.c:			ds_set_pre (ds, ds->core->cons->vline[LINE_VERT]);
../core/disasm.c:			ds_set_pre (ds, core->cons->vline[LINE_VERT]);
../core/disasm.c:	list = r_anal_xrefs_get_from (ds->core->anal, ds->at);
../core/disasm.c:		cmt = r_meta_get_string (ds->core->anal, R_META_TYPE_COMMENT, ref->addr);
../core/disasm.c:		flagi = r_flag_get_i (ds->core->flags, ref->addr);
../core/disasm.c:		flagat = r_flag_get_at (ds->core->flags, ref->addr, false);
../core/disasm.c:			r_anal_op (ds->core->anal, &aop, ref->at, buf, sizeof (buf));
../core/disasm.c:				RAnalFunction * fcn = r_anal_get_fcn_at (ds->core->anal,
../core/disasm.c:	bool demangle = r_config_get_i (core->config, "bin.demangle");
../core/disasm.c:	const char *lang = demangle ? r_config_get (core->config, "bin.lang") : NULL;
../core/disasm.c:	xrefs = r_anal_xref_get (core->anal, ds->at);
../core/disasm.c:			RAnalFunction *fun = r_anal_get_fcn_in (core->anal, refi->addr, -1);
../core/disasm.c:				RFlagItem *f = r_flag_get_at (core->flags, refi->addr, true);
../core/disasm.c:				tmp = r_bin_demangle (core->bin->cur, lang, name, refi->addr);
../core/disasm.c:	if (ds->midcursor && core->print->cur != -1) {
../core/disasm.c:		ut64 cur = core->offset + core->print->cur;
../core/disasm.c:		RFlagItem *fi = r_flag_get_i (core->flags, ds->at + i);
../core/disasm.c:	int q = core->print->cur_enabled &&
../core/disasm.c:	p = r_bp_get_at (core->dbg->bp, ds->at);
../core/disasm.c:	demangle = r_config_get_i (core->config, "bin.demangle");
../core/disasm.c:	call = r_config_get_i (core->config, "asm.calls");
../core/disasm.c:	lang = demangle ? r_config_get (core->config, "bin.lang") : NULL;
../core/disasm.c:	f = r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:		fcn_name = r_bin_demangle (core->bin->cur, lang, f->name, f->addr);
../core/disasm.c:	sign = r_anal_fcn_to_string (core->anal, f);
../core/disasm.c:			core->cons->vline[LINE_CROSS]); // |-
../core/disasm.c:		RFlagItem *item = r_flag_get_i (core->flags, f->addr);
../core/disasm.c:		ds_set_pre (ds, core->cons->vline[CORNER_TL]);
../core/disasm.c:	ds_set_pre (ds, core->cons->vline[LINE_VERT]);
../core/disasm.c:	ds->stackptr = core->anal->stackptr;
../core/disasm.c:		RList *bp_vars = r_anal_var_list (core->anal, f, 'b');
../core/disasm.c:		RList *rg_vars = r_anal_var_list (core->anal, f, 'r');
../core/disasm.c:		RList *sp_vars = r_anal_var_list (core->anal, f, 's');
../core/disasm.c:		RList *args = r_anal_var_list (core->anal, f, 'b');
../core/disasm.c:		RList *regs = r_anal_var_list (core->anal, f, 'r');
../core/disasm.c:		RList *sp_vars = r_anal_var_list (core->anal, f, 's');
../core/disasm.c:			RAnal *anal = ds->core->anal;
../core/disasm.c:	f = r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:				ds_set_pre (ds, core->cons->vline[CORNER_BL]);
../core/disasm.c:				ds_set_pre (ds, core->cons->vline[LINE_VERT]);
../core/disasm.c:			ds_set_pre (ds, core->cons->vline[CORNER_BL]);
../core/disasm.c:			ds_set_pre (ds, core->cons->vline[LINE_VERT]);
../core/disasm.c:	f = r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:	//RAnalFunction *f = r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:	item = r_flag_get_i (core->flags, ds->at);
../core/disasm.c:	ds->comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, ds->at);
../core/disasm.c:		if (ds->ocols + maxclen < core->cons->columns) {
../core/disasm.c:		if (mycols + linelen + 10 > core->cons->columns) {
../core/disasm.c:	f = r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:	flaglist = r_flag_get_list (core->flags, ds->at);
../core/disasm.c:			const char *lang = r_config_get (core->config, "bin.lang");
../core/disasm.c:			char *name = r_bin_demangle (core->bin->cur, lang, flag->realname, flag->offset);
../core/disasm.c:	Sdb *s = core->anal->sdb_meta;
../core/disasm.c:	ret = r_asm_disassemble (core->assembler, &ds->asmop, buf, len);
../core/disasm.c:			ds->addr = core->assembler->pc;
../core/disasm.c:		r_parse_parse (core->parser, ds->opstr
../core/disasm.c:			item = r_flag_get_i (ds->core->flags, ds->analop.jump);
../core/disasm.c:			RFlagItem *fi = r_flag_get_at (core->flags, ds->at, false);
../core/disasm.c:	r_print_set_screenbounds (core->print, at);
../core/disasm.c:			RAnalFunction *f = r_anal_get_fcn_at (core->anal, at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:				f = r_anal_get_fcn_in (core->anal, at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:					fi = r_flag_get_i (core->flags, at);
../core/disasm.c:						delta = at - core->offset;
../core/disasm.c:			tp = r_debug_trace_get (ds->core->dbg, ds->at);
../core/disasm.c:		r_print_offset (core->print, at, (at == ds->dest) || show_trace,
../core/disasm.c:		tp = r_debug_trace_get (ds->core->dbg, ds->at);
../core/disasm.c:			tp = r_debug_trace_get (ds->core->dbg, ds->at);
../core/disasm.c:		ds->middle = r_anal_reflines_middle (ds->core->anal,
../core/disasm.c:			ds->core->anal->reflines, ds->at, ds->analop.size);
../core/disasm.c:	ut64 n = r_read_ble (buf, core->print->big_endian, size * 8);
../core/disasm.c:		int q = core->print->cur_enabled &&
../core/disasm.c:		if (r_str_startswith (r_config_get (core->config, "asm.arch"), "arm")) {
../core/disasm.c:			ut64 bits = r_config_get_i (core->config, "asm.bits");
../core/disasm.c:		const RList *flags = r_flag_get_list (core->flags, n);
../core/disasm.c:	Sdb *s = core->anal->sdb_meta;
../core/disasm.c:					core->print->flags &= ~R_PRINT_FLAGS_HEADER;
../core/disasm.c:						r_print_hexdump (core->print, ds->at, buf+idx, hexlen-delta, 16, 1, 1);
../core/disasm.c:					core->inc = 16; // ds->oplen; //
../core/disasm.c:					core->print->flags |= R_PRINT_FLAGS_HEADER;
../core/disasm.c:					r_print_format (core->print, ds->at, buf+idx, len-idx, mi->str, R_PRINT_MUSTSEE, NULL, NULL);
../core/disasm.c:	const int addrbytes = core->io->addrbytes;
../core/disasm.c:			if (core->anal->reg) {
../core/disasm.c:				const char *pc = core->anal->reg->name[R_REG_NAME_PC];
../core/disasm.c:						item = r_flag_get_i (core->flags, off);
../core/disasm.c:		if (src && src->reg && core->anal->reg && *(core->anal->reg->name)) {
../core/disasm.c:			const char *pc = core->anal->reg->name[R_REG_NAME_PC];
../core/disasm.c:				int memref = core->assembler->bits/8;
../core/disasm.c:				item = r_flag_get_i (core->flags, off);
../core/disasm.c:	int oldFlags = core->print->flags;
../core/disasm.c:		core->print->flags &= ~R_PRINT_FLAGS_COLOR;
../core/disasm.c:		flagstr = r_flag_get_liststr (core->flags, ds->at);
../core/disasm.c:	core->print->flags = oldFlags;
../core/disasm.c:		f = r_anal_get_fcn_in (core->anal, ds->at, 0);
../core/disasm.c:	label = r_anal_fcn_label_at (core->anal, f, ds->at);
../core/disasm.c:		if (core->bin->cur->o->imports && core->bin->cur->o->relocs) {
../core/disasm.c:			r_list_foreach (core->bin->cur->o->relocs, iter, rel) {
../core/disasm.c:			RSyscall *sc = ds->core->anal->syscall;
../core/disasm.c:		f = r_anal_get_fcn_in (core->anal, ds->analop.jump, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:			label = r_anal_fcn_label_at (core->anal, f, ds->analop.jump);
../core/disasm.c:				RAnalFunction *f2 = r_anal_get_fcn_in (core->anal, ds->at, 0);
../core/disasm.c:	if (core->vmode) {
../core/disasm.c:				if (core->is_asmqjmps_letter) {
../core/disasm.c:				if (core->is_asmqjmps_letter) {
../core/disasm.c:			cols = ds->interactive ? ds->core->cons->columns : 1024;
../core/disasm.c:		ds->sl = r_bin_addr2text (ds->core->bin, ds->at, dwarfFile);
../core/disasm.c:		//r_anal_op (core->anal, &ds->analop, ds->at, core->block+i, core->blocksize-i);
../core/disasm.c:			int mod = ds->asmop.payload % ds->core->assembler->dataalign;
../core/disasm.c:	char *anal_flag = r_meta_get_string (ds->core->anal, R_META_TYPE_STRING, refaddr);
../core/disasm.c:	list = r_anal_refs_get (core->anal, ds->at);
../core/disasm.c:			if ((f = r_flag_get_i (core->flags, ref->addr))) {
../core/disasm.c:		const char *arch = r_config_get (core->config, "asm.arch");
../core/disasm.c:			f = r_flag_get_i (core->flags, p);
../core/disasm.c:		r_io_read_at (core->io, refaddr, (ut8*)msg, len - 1);
../core/disasm.c:			ut64 num = r_read_ble (msg, core->print->big_endian, refptr * 8);
../core/disasm.c:				f = r_flag_get_i (core->flags, refaddr);
../core/disasm.c:					r_io_read_at (ds->core->io, ds->analop.ptr,
../core/disasm.c:					f = r_flag_get_i (core->flags, n);
../core/disasm.c:						r_io_read_at (core->io, n, (ut8*)msg2, len - 1);
../core/disasm.c:						kind = r_anal_data_kind (core->anal, refaddr, (const ut8*)msg2, len - 1);
../core/disasm.c:						if (core->print->flags & R_PRINT_FLAGS_SECSUB) {
../core/disasm.c:							RIOSection *s = r_io_section_vget (core->io, n);
../core/disasm.c:		f = r_flag_get_i (core->flags, refaddr);
../core/disasm.c:					RAnalVar *v = r_anal_var_get (core->anal, ds->at, 'v', 1, (int)refaddr);
../core/disasm.c:			kind = r_anal_data_kind (core->anal, refaddr, (const ut8*)msg, len - 1);
../core/disasm.c:	list = r_bin_get_relocs (core->bin);
../core/disasm.c:	const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/disasm.c:	ds->esil_old_pc = r_reg_getv (core->anal->reg, pc);
../core/disasm.c:		ds->esil_old_pc = core->offset;
../core/disasm.c:	if (!core->anal->esil) {
../core/disasm.c:		int iotrap = r_config_get_i (core->config, "esil.iotrap");
../core/disasm.c:		int esd = r_config_get_i (core->config, "esil.stack.depth");
../core/disasm.c:		if (!(core->anal->esil = r_anal_esil_new (esd, iotrap))) {
../core/disasm.c:		r_anal_esil_setup (core->anal->esil, core->anal, 0, 0, 1);
../core/disasm.c:	core->anal->esil->user = ds;
../core/disasm.c:	R_FREE (core->anal->last_disasm_reg);
../core/disasm.c:	if (core->anal->gp) {
../core/disasm.c:		r_reg_setv (core->anal->reg, "gp", core->anal->gp);
../core/disasm.c:	ds->esil_regstate = r_reg_arena_peek (core->anal->reg);
../core/disasm.c:		core->anal->last_disasm_reg = r_reg_arena_peek (core->anal->reg);
../core/disasm.c:		const char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/disasm.c:		r_reg_arena_poke (core->anal->reg, ds->esil_regstate);
../core/disasm.c:		r_reg_setv (core->anal->reg, pc, ds->esil_old_pc);
../core/disasm.c:	if (core && core->anal && core->anal->esil) {
../core/disasm.c:		core->anal->esil->user = NULL;
../core/disasm.c:	const char *emuskipmeta = r_config_get (core->config, "asm.emuskip");
../core/disasm.c:	Sdb *s = core->anal->sdb_meta;
../core/disasm.c:	RAnalEsil *esil = core->anal->esil;
../core/disasm.c:	RConfigHold *hc = r_config_hold_new (core->config);
../core/disasm.c:		esil = core->anal->esil;
../core/disasm.c:	esil = core->anal->esil;
../core/disasm.c:	pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);
../core/disasm.c:	r_reg_setv (core->anal->reg, pc, at + ds->analop.size);
../core/disasm.c:	r_config_set (core->config, "io.cache", "true");
../core/disasm.c:						pcv = r_reg_getv (core->anal->reg, pc);
../core/disasm.c:			fcn = r_anal_get_fcn_at (core->anal, pcv, 0);
../core/disasm.c:				RFlagItem *item = r_flag_get_i (core->flags, pcv);
../core/disasm.c:				char * key = resolve_fcn_name (core->anal, fcn_name);
../core/disasm.c:					const char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);
../core/disasm.c:					const char *fcn_type = r_anal_type_func_ret (core->anal, key);
../core/disasm.c:					nargs = r_anal_type_func_args_count (core->anal, key);
../core/disasm.c:					cc = r_anal_type_func_cc (core->anal, key);
../core/disasm.c:					ut64 spv = r_reg_getv (core->anal->reg, sp);
../core/disasm.c:					ut64 s_width = (core->anal->bits == 64)? 8: 4;
../core/disasm.c:						get_fcn_args_info (core->anal, key, i, cc, &arg_name,
../core/disasm.c:								get_fcn_args_info (core->anal, key, j, cc,
../core/disasm.c:							arg_addr = r_reg_getv (core->anal->reg, cc_source);
../core/disasm.c:						ut64 v = r_debug_arg_get (core->dbg, R_ANAL_CC_TYPE_STDCALL, i);
../core/disasm.c:	int emu = r_config_get_i (ds->core->config, "asm.emu");
../core/disasm.c:	int emuwrite = r_config_get_i (ds->core->config, "asm.emuwrite");
../core/disasm.c:	RAnal *anal = ds->core->anal;
../core/disasm.c:		desc = r_asm_describe (core->assembler, locase);
../core/disasm.c:	const int addrbytes = core->io->addrbytes;
../core/disasm.c:		r_reg_arena_push (core->anal->reg);
../core/disasm.c:	if (core->anal->cur && core->anal->cur->reset_counter) {
../core/disasm.c:		core->anal->cur->reset_counter (core->anal, addr);
../core/disasm.c:	core->inc = 0;
../core/disasm.c:	if (!core->keep_asmqjmps) { // hack
../core/disasm.c:		core->asmqjmps_count = 0;
../core/disasm.c:		core->asmqjmps_size = R_CORE_ASMQJMPS_NUM;
../core/disasm.c:		core->asmqjmps = realloc (core->asmqjmps, core->asmqjmps_size * sizeof (ut64));
../core/disasm.c:		if (core->asmqjmps) {
../core/disasm.c:				core->asmqjmps[i] = UT64_MAX;
../core/disasm.c:	r_asm_set_pc (core->assembler, p2v (ds, ds->addr + idx));
../core/disasm.c:	core->cons->vline = r_config_get_i (core->config, "scr.utf8") ? (r_config_get_i (core->config, "scr.utf8.curvy") ? r_vline_uc : r_vline_u) : r_vline_a;
../core/disasm.c:	if (core->print->cur_enabled) {
../core/disasm.c:		if (r_anal_op (core->anal, &ds->analop, core->offset + core->print->cur,
../core/disasm.c:			buf + core->print->cur, (int)(len - core->print->cur))) {
../core/disasm.c:		const char *pc = core->anal->reg->name[R_REG_NAME_PC];
../core/disasm.c:		RFlagItem *item = r_flag_get (core->flags, pc);
../core/disasm.c:		len = ds->l = core->blocksize;
../core/disasm.c:	ds->stackptr = core->anal->stackptr;
../core/disasm.c:	r_anal_build_range_on_hints (core->anal);
../core/disasm.c:		r_asm_set_pc (core->assembler, ds->at);
../core/disasm.c:		f = r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:					COLOR (ds, color_fline), core->cons->vline[CORNER_TL],
../core/disasm.c:				//r_cons_printf ("%s%s%s\n", COLOR (ds, color_fline), core->cons->vline[RDWN_CORNER], COLOR_RESET (ds));
../core/disasm.c:				r_io_read_at (core->io, ds->addr, buf, len);
../core/disasm.c:				r_io_read_at (core->io, ds->addr, buf, len);
../core/disasm.c:		const char *link_type = sdb_const_get (core->anal->sdb_types, link_key, 0);
../core/disasm.c:			char *fmt = r_anal_type_format (core->anal, link_type);
../core/disasm.c:				inc += r_anal_type_get_size (core->anal, link_type) / 8;
../core/disasm.c:		// TODO: store previous oplen in core->dec
../core/disasm.c:		if (!core->inc) {
../core/disasm.c:			core->inc = ds->oplen;
../core/disasm.c:			r_anal_op (core->anal, &ds->analop, ds->at, buf + addrbytes * idx, (int)(len - addrbytes * idx));
../core/disasm.c:			r_print_set_rowoff (core->print, ds->lines, ds->at - addr);
../core/disasm.c:		f = r_anal_get_fcn_in (core->anal, ds->addr, 0);
../core/disasm.c:			if (core->assembler->syntax != R_ASM_SYNTAX_INTEL) {
../core/disasm.c:				int os = core->assembler->syntax;
../core/disasm.c:				r_asm_set_syntax (core->assembler, R_ASM_SYNTAX_INTEL);
../core/disasm.c:				r_asm_disassemble (core->assembler, &ao, buf + addrbytes * idx, len - addrbytes * idx + 5);
../core/disasm.c:				r_asm_set_syntax (core->assembler, os);
../core/disasm.c:		inc += ds->asmop.payload + (ds->asmop.payload % ds->core->assembler->dataalign);
../core/disasm.c:	r_print_set_rowoff (core->print, ds->lines, ds->at - addr);
../core/disasm.c:	r_print_set_rowoff (core->print, ds->lines + 1, UT32_MAX);
../core/disasm.c:	r_reg_arena_pop (core->anal->reg);
../core/disasm.c:	const ut64 old_offset = core->offset;
../core/disasm.c:	const int addrbytes = core->io->addrbytes;
../core/disasm.c:	r_reg_arena_push (core->anal->reg);
../core/disasm.c:		nb_bytes = core->blocksize;
../core/disasm.c:			if (r_core_prevop_addr (core, core->offset, nb_opcodes, &core->offset)) {
../core/disasm.c:				nbytes = old_offset - core->offset;
../core/disasm.c:				// core->offset is modified by r_core_prevop_addr
../core/disasm.c:				core->offset = old_offset;
../core/disasm.c:				r_core_asm_bwdis_len (core, &nbytes, &core->offset, nb_opcodes);
../core/disasm.c:			if (nbytes > core->blocksize) {
../core/disasm.c:			r_core_read_at (core, core->offset, core->block, nbytes);
../core/disasm.c:			core->offset -= nb_bytes;
../core/disasm.c:			if (nb_bytes > core->blocksize) {
../core/disasm.c:				ut64 obsz = core->blocksize;
../core/disasm.c:				if (core->blocksize == nb_bytes) {
../core/disasm.c:					r_core_read_at (core, core->offset, core->block, nb_bytes);
../core/disasm.c:					memset (core->block, 0xff, nb_bytes);
../core/disasm.c:				r_core_read_at (core, core->offset, core->block, nb_bytes);
../core/disasm.c:			if (nb_bytes > core->blocksize) {
../core/disasm.c:				r_core_read_at (core, core->offset, core->block, nb_bytes);
../core/disasm.c:	if (core->anal->cur && core->anal->cur->reset_counter) {
../core/disasm.c:		core->anal->cur->reset_counter (core->anal, core->offset);
../core/disasm.c:	if (ds->len > core->blocksize) {
../core/disasm.c:		if (core->fixedblock) {
../core/disasm.c:			nb_bytes = ds->len = core->blocksize;
../core/disasm.c:	r_anal_build_range_on_hints (core->anal);
../core/disasm.c:		ds->at = core->offset +i;
../core/disasm.c:		r_asm_set_pc (core->assembler, ds->at);
../core/disasm.c:		r_anal_get_fcn_in (core->anal, ds->at, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:		ret = r_asm_disassemble (core->assembler, &ds->asmop,
../core/disasm.c:			core->block + addrbytes * i, core->blocksize - addrbytes * i);
../core/disasm.c:			r_anal_op (core->anal, &ds->analop, ds->at, core->block + addrbytes * i, core->blocksize - addrbytes * i);
../core/disasm.c:		//r_conf = s_printf ("0x%08"PFMT64x"  ", core->offset+i);
../core/disasm.c:					r_anal_op (core->anal, &ds->analop, ds->at, core->block+i, core->blocksize-i);
../core/disasm.c:				tmpopstr = r_anal_op_to_string (core->anal, &ds->analop);
../core/disasm.c:					r_anal_op (core->anal, &ds->analop,
../core/disasm.c:						ds->at, core->block + i,
../core/disasm.c:						core->blocksize - i);
../core/disasm.c:				int ofs = core->parser->flagspace;
../core/disasm.c:					core->parser->notin_flagspace = -1;
../core/disasm.c:					core->parser->flagspace = fs;
../core/disasm.c:						core->parser->notin_flagspace = fs;
../core/disasm.c:						core->parser->flagspace = fs;
../core/disasm.c:						core->parser->notin_flagspace = -1;
../core/disasm.c:						core->parser->flagspace = -1;
../core/disasm.c:				core->parser->hint = ds->hint;
../core/disasm.c:				r_parse_filter (core->parser, core->flags, ds->asmop.buf_asm, ds->str,
../core/disasm.c:						sizeof (ds->str), core->print->big_endian);
../core/disasm.c:				core->parser->flagspace = ofs;
../core/disasm.c:				core->parser->flagspace = ofs; // ???
../core/disasm.c:				opcolor = r_print_color_op_type (core->print, ds->analop.type);
../core/disasm.c:	core->offset = old_offset;
../core/disasm.c:	r_reg_arena_pop (core->anal->reg);
../core/disasm.c:	ut64 old_offset = core->offset;
../core/disasm.c:			if (r_core_prevop_addr (core, core->offset, nb_opcodes, &addr)) {
../core/disasm.c:	core->offset = addr;
../core/disasm.c:	if (core->anal && core->anal->cur && core->anal->cur->reset_counter) {
../core/disasm.c:		core->anal->cur->reset_counter (core->anal, addr);
../core/disasm.c:		r_asm_set_pc (core->assembler, at);
../core/disasm.c:		ret = r_asm_disassemble (core->assembler, &asmop, buf + i, nb_bytes - i);
../core/disasm.c:		r_anal_op (core->anal, &ds->analop, at, buf + i, nb_bytes - i);
../core/disasm.c:			r_parse_parse (core->parser, asmop.buf_asm, asmop.buf_asm);
../core/disasm.c:		f = r_anal_get_fcn_in (core->anal, at, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);
../core/disasm.c:			core->parser->varlist = r_anal_var_list_dynamic;
../core/disasm.c:			r_parse_varsub (core->parser, f, at, ds->analop.size,
../core/disasm.c:		r_parse_filter (core->parser, core->flags, asmop.buf_asm, str,
../core/disasm.c:			sizeof (str), core->print->big_endian);
../core/disasm.c:			const RList *flags = r_flag_get_list (core->flags, at);
../core/disasm.c:			char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, at);
../core/disasm.c:			RList *xrefs = r_anal_xref_get (core->anal, at);
../core/disasm.c:		i += oplen + asmop.payload + (ds->asmop.payload % ds->core->assembler->dataalign); // bytes
../core/disasm.c:		k += oplen + asmop.payload + (ds->asmop.payload % ds->core->assembler->dataalign); // delta from addr
../core/disasm.c:	core->offset = old_offset;
../core/disasm.c:	const bool scr_color = r_config_get_i (core->config, "scr.color");
../core/disasm.c:	ut8 *buf = core->block;
../core/disasm.c:	if (l > core->blocksize || addr != core->offset) {
../core/disasm.c:		r_asm_set_pc (core->assembler, ds->vat);
../core/disasm.c:		ret = r_asm_disassemble (core->assembler, &asmop, buf + i, l - i);
../core/disasm.c:				r_parse_filter (core->parser, core->flags, asmop.buf_asm,
../core/disasm.c:						str, sizeof (str), core->print->big_endian);
../core/disasm.c:					r_anal_op (core->anal, &aop, addr, buf+i, l-i);
../core/disasm.c:					buf_asm = r_print_colorize_opcode (core->print, str,
../core/disasm.c:							core->cons->pal.reg, core->cons->pal.num, false);
../core/disasm.c:							r_print_color_op_type (core->print, aop.type),
../core/disasm.c:	if (buf != core->block) {
../core/disasm.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/disasm.c:	if (core->anal->cur && core->anal->cur->reset_counter) {
../core/disasm.c:		core->anal->cur->reset_counter (core->anal, addr);
../core/disasm.c:	ds->stackptr = core->anal->stackptr;
../core/disasm.c:		//ret = r_asm_disassemble (core->assembler, &ds->asmop, buf+idx, bb->size);
../core/disasm.c:	core->inc = 0;
../core/disasm.c:	core->cons->vline = r_config_get_i (core->config, "scr.utf8") ? (r_config_get_i (core->config, "scr.utf8.curvy") ? r_vline_uc : r_vline_u) : r_vline_a;
../core/disasm.c:	if (core->io && core->io->debug) {
../core/disasm.c:		r_debug_map_sync (core->dbg);
../core/disasm.c:			r_asm_set_pc (core->assembler, ds->at);
../core/disasm.c:			// TODO: store previous oplen in core->dec
../core/disasm.c:			if (!core->inc) {
../core/disasm.c:				core->inc = ds->oplen;
../core/disasm.c:				r_anal_op (core->anal, &ds->analop,
../core/disasm.c:			if (core->assembler->syntax != R_ASM_SYNTAX_INTEL) {
../core/disasm.c:				int os = core->assembler->syntax;
../core/disasm.c:				r_asm_set_syntax (core->assembler,
../core/disasm.c:				r_asm_disassemble (core->assembler, &ao,
../core/disasm.c:				r_asm_set_syntax (core->assembler, os);
../core/disasm.c:	int show_offset = r_config_get_i (core->config, "asm.offset");
../core/disasm.c:	int show_bytes = r_config_get_i (core->config, "asm.bytes");
../core/disasm.c:	int decode = r_config_get_i (core->config, "asm.decode");
../core/disasm.c:	int filter = r_config_get_i (core->config, "asm.filter");
../core/disasm.c:	int show_color = r_config_get_i (core->config, "scr.color");
../core/disasm.c:	bool asm_ucase = r_config_get_i (core->config, "asm.ucase");
../core/disasm.c:	int esil = r_config_get_i (core->config, "asm.esil");
../core/disasm.c:	int flags = r_config_get_i (core->config, "asm.flags");
../core/disasm.c:	bool asm_offless = r_config_get_i (core->config, "asm.offless");
../core/disasm.c:	ut64 old_offset = core->offset;
../core/disasm.c:	const int addrbytes = core->io->addrbytes;
../core/disasm.c:			core->offset -= nb_bytes;
../core/disasm.c:			r_core_read_at (core, core->offset, core->block, nb_bytes);
../core/disasm.c:			if (r_core_prevop_addr (core, core->offset, nb_opcodes, &start)) {
../core/disasm.c:				nb_bytes = core->offset - start;
../core/disasm.c:				r_core_asm_bwdis_len (core, &nb_bytes, &core->offset,
../core/disasm.c:			nb_bytes *= core->io->addrbytes;
../core/disasm.c:			if (nb_bytes > core->blocksize) {
../core/disasm.c:			r_core_read_at (core, core->offset, core->block, nb_bytes);
../core/disasm.c:			nb_bytes = core->blocksize;
../core/disasm.c:	if (core->anal && core->anal->cur && core->anal->cur->reset_counter) {
../core/disasm.c:		core->anal->cur->reset_counter (core->anal, core->offset);
../core/disasm.c:	if (core->fixedblock) {
../core/disasm.c:		len = core->blocksize;
../core/disasm.c:		if (len > core->blocksize) {
../core/disasm.c:	int midflags = r_config_get_i (core->config, "asm.midflags");
../core/disasm.c:		RAnalMetaItem *meta = r_meta_find (core->anal, core->offset + i,
../core/disasm.c:		r_asm_set_pc (core->assembler, core->offset + i);
../core/disasm.c:		ret = r_asm_disassemble (core->assembler, &asmop, core->block + addrbytes * i,
../core/disasm.c:			core->blocksize - addrbytes * i);
../core/disasm.c:				.at = core->offset + i,
../core/disasm.c:			char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, core->offset + i);
../core/disasm.c:				r_cons_printf ("0x%08"PFMT64x " %s\n", core->offset + i, comment);
../core/disasm.c:				item = r_flag_get_i (core->flags, core->offset + i);
../core/disasm.c:						r_cons_printf ("0x%08"PFMT64x "  ", core->offset + i);
../core/disasm.c:		ut64 at = core->offset + i;
../core/disasm.c:			const int show_offseg = (core->print->flags & R_PRINT_FLAGS_SEGOFF) != 0;
../core/disasm.c:			const int show_offdec = (core->print->flags & R_PRINT_FLAGS_ADDRDEC) != 0;
../core/disasm.c:			r_print_offset (core->print, at, 0, show_offseg, show_offdec, 0, NULL);
../core/disasm.c:		// r_cons_printf ("0x%08"PFMT64x"  ", core->offset+i);
../core/disasm.c:				r_cons_printf ("%18s%02x  ", "", core->block[i]);
../core/disasm.c:				r_anal_op (core->anal, &analop, core->offset + i,
../core/disasm.c:					core->block + addrbytes * i, core->blocksize - addrbytes * i);
../core/disasm.c:				tmpopstr = r_anal_op_to_string (core->anal, &analop);
../core/disasm.c:					core->parser->hint = r_anal_hint_get (core->anal, at);
../core/disasm.c:					r_parse_filter (core->parser, core->flags,
../core/disasm.c:						asm_str, opstr, sizeof (opstr) - 1, core->print->big_endian);
../core/disasm.c:					r_anal_op (core->anal, &aop, core->offset + i,
../core/disasm.c:						core->block + addrbytes * i, core->blocksize - addrbytes * i);
../core/disasm.c:					asm_str = r_print_colorize_opcode (core->print, asm_str, color_reg, color_num, false);
../core/disasm.c:						r_print_color_op_type (core->print, aop.type),
../core/disasm.c:		r_core_seek (core, core->offset + i, 1);
../core/file.c:	int isdebug = r_config_get_i (core->config, "cfg.debug");
../core/file.c:	ut64 laddr = r_config_get_i (core->config, "bin.laddr");
../core/file.c:	RCoreFile *ofile = core->file;
../core/file.c:	RBinFile *bf = ofile ? r_bin_file_find_by_fd (core->bin, ofile->fd)
../core/file.c:	RIODesc *odesc = core->io ? r_io_desc_get (core->io, ofile->fd) : NULL;
../core/file.c:	ut64 origoff = core->offset;
../core/file.c:	if (!core->file) {
../core/file.c:		r_debug_kill (core->dbg, core->dbg->pid, core->dbg->tid, 9); // KILL
../core/file.c:			if (r_bin_file_delete (core->bin, ofile->fd)) {
../core/file.c:		//	core->file = file;
../core/file.c:			ut64 baddr = r_config_get_i (core->config, "bin.baddr");
../core/file.c:		if (core->bin->cur && core->io && r_io_desc_get (core->io, file->fd) && !loadbin) {
../core/file.c:			core->bin->cur = NULL;
../core/file.c:		if (core->file) {
../core/file.c:			newpid = r_io_fd_get_pid (core->io, core->file->fd);
../core/file.c:			newtid = r_io_fd_get_tid (core->io, core->file->fd);
../core/file.c:			core->dbg->main_pid = newpid;
../core/file.c:			r_debug_select (core->dbg, newpid, newtid);
../core/file.c:			core->dbg->reason.type = R_DEBUG_REASON_NONE;
../core/file.c:		r_debug_select (core->dbg, newpid, newtid);
../core/file.c:	if (core->file) {
../core/file.c:		r_io_use_fd (core->io, core->file->fd);
../core/file.c:		core->switch_file_view = 1;
../core/file.c:		ut64 gp = r_num_math (core->num, "loc._gp");
../core/file.c:			r_config_set_i (core->config, "anal.gp", gp);
../core/file.c:	r_io_bind (core->io, &(core->anal->iob));
../core/file.c:EDITOR r_sys_setenv ("EDITOR", r_config_get (core->config, "cfg.editor"));
../core/file.c:	RIODesc *desc = core->file ? r_io_desc_get (core->io, core->file->fd) : NULL;
../core/file.c:		char *s = r_hex_bin2strdup (core->block, core->blocksize);
../core/file.c:	r_sys_setenv ("RABIN2_PDBSERVER", r_config_get (core->config, "pdb.server"));
../core/file.c:				if (r_file_dump (f, core->block, core->blocksize, 0)) {
../core/file.c:	r_sys_setenv ("RABIN2_LANG", r_config_get (core->config, "bin.lang"));
../core/file.c:	r_sys_setenv ("RABIN2_DEMANGLE", r_config_get (core->config, "bin.demangle"));
../core/file.c:	r_sys_setenv ("R2_OFFSET", sdb_fmt (0, "%"PFMT64d, core->offset));
../core/file.c:	r_sys_setenv ("R2_XOFFSET", sdb_fmt (0, "0x%08"PFMT64x, core->offset));
../core/file.c:	r_sys_setenv ("R2_ENDIAN", core->assembler->big_endian? "big": "little");
../core/file.c:	r_sys_setenv ("R2_BSIZE", sdb_fmt (0, "%d", core->blocksize));
../core/file.c:	r_sys_setenv ("R2_ARCH", r_config_get (core->config, "asm.arch"));
../core/file.c:	r_sys_setenv ("R2_BITS", sdb_fmt (0, "%d", r_config_get_i (core->config, "asm.bits")));
../core/file.c:	r_sys_setenv ("R2_COLOR", r_config_get_i (core->config, "scr.color")? "1": "0");
../core/file.c:	r_sys_setenv ("R2_DEBUG", r_config_get_i (core->config, "cfg.debug")? "1": "0");
../core/file.c:	r_sys_setenv ("R2_IOVA", r_config_get_i (core->config, "io.va")? "1": "0");
../core/file.c:	r_debug_map_sync (core->dbg); // update process memory maps
../core/file.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/file.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/file.c:	if (!core || !core->bin || !core->bin->cur) {
../core/file.c:	RBinFile *bf = core->bin->cur;
../core/file.c:	if (!core || !core->files || !cf) {
../core/file.c:	return r_list_delete_data (core->files, cf);
../core/file.c:		RIO *io = cf->core->io;
../core/file.c:	r_list_foreach (core->files, iter, file) {
../core/file.c:	r_list_foreach (core->files, iter, f) {
../core/file.c:		desc = r_io_desc_get (core->io, f->fd);
../core/file.c:				core->io->desc->fd == f->fd ? "true": "false",
../core/file.c:				r_list_foreach (core->bin->binfiles, it, bf) {
../core/file.c:				r_list_foreach (core->bin->binfiles, it, bf) {
../core/file.c:					RList* maps = r_io_map_get_for_fd (core->io, f->fd);
../core/file.c:				core->io->desc->fd == f->fd ? '*': '-',
../core/file.c:	RBin *bin = core->bin;
../core/file.c:			r_io_use_fd (core->io, bf->fd);
../core/file.c:			core->switch_file_view = 1;
../core/file.c:	RCoreFile *cur_cf = core->file, *cf = NULL;
../core/file.c:	RBin *bin = core->bin;
../core/file.c:		desc = r_io_desc_get (core->io, fd);
../core/file.c:				core->io->desc == desc ? '*': '-',
../core/file.c:		r_list_free (core->files);
../core/file.c:		core->files = NULL;
../core/file.c:		core->file = NULL;
../core/file.c:	r_list_foreach (core->files, iter, file) {
../core/file.c:			if (file == core->file) {
../core/file.c:				core->file = NULL; // deref
../core/file.c:	return r_io_fd_close (core->io, fd);
../core/file.c:	r_list_foreach (core->files, iter, cf) {
../core/file.c:	r_list_foreach (core->files, iter, cf) {
../core/file.c:		desc = r_io_desc_get (core->io, cf->fd);
../core/file.c:		r_io_use_fd (core->io, fd);
../core/file.c:		core->file = cf;
../core/file.c:	if (core && core->file) {
../core/file.c:		return core->file->fd;
../core/fortune.c:	const char *types = (char *)r_config_get (core->config, "cfg.fortunes.type");
../core/fortune.c:	const char *types = (char *)r_config_get (core->config, "cfg.fortunes.type");
../core/fortune.c:		if (r_config_get_i (core->config, "cfg.fortunes.clippy")) {
../core/fortune.c:		if (r_config_get_i (core->config, "cfg.fortunes.tts")) {
../core/graph.c:	RConfigHold *hc = r_config_hold_new (core->config);
../core/graph.c:	const bool o_comments = r_config_get_i (core->config, "graph.comments");
../core/graph.c:	const bool o_cmtright = r_config_get_i (core->config, "graph.cmtright");
../core/graph.c:	int o_cursor = core->print->cur_enabled;
../core/graph.c:	r_config_set_i (core->config, "asm.fcnlines", false);
../core/graph.c:	r_config_set_i (core->config, "asm.lines", false);
../core/graph.c:	r_config_set_i (core->config, "asm.cmtcol", 0);
../core/graph.c:	r_config_set_i (core->config, "asm.marks", false);
../core/graph.c:	r_config_set_i (core->config, "asm.cmtright", (opts & BODY_SUMMARY) || o_cmtright);
../core/graph.c:	r_config_set_i (core->config, "asm.comments", (opts & BODY_SUMMARY) || o_comments);
../core/graph.c:	core->print->cur_enabled = false;
../core/graph.c:		r_config_set_i (core->config, "asm.offset", true);
../core/graph.c:		r_config_set_i (core->config, "asm.bytes", true);
../core/graph.c:		r_config_set_i (core->config, "asm.bytes", false);
../core/graph.c:		r_config_set_i (core->config, "asm.offset", false);
../core/graph.c:	bool html = r_config_get_i (core->config, "scr.html");
../core/graph.c:	r_config_set_i (core->config, "scr.html", 0);
../core/graph.c:	r_config_set_i (core->config, "scr.html", html);
../core/graph.c:	core->print->cur_enabled = o_cursor;
../core/graph.c:		core->anal->gp = saved_gp;
../core/graph.c:			r_reg_arena_poke (core->anal->reg, b->parent_reg_arena);
../core/graph.c:			ut64 gp = r_reg_getv (core->anal->reg, "gp");
../core/graph.c:				core->anal->gp = gp;
../core/graph.c:			r_reg_arena_poke (core->anal->reg, saved_arena);
../core/graph.c:		core->anal->stackptr = b->parent_stackptr;
../core/graph.c:				if (emu && core->anal->last_disasm_reg != NULL && !jumpbb->parent_reg_arena) {
../core/graph.c:					jumpbb->parent_reg_arena = r_reg_arena_dup (core->anal->reg, core->anal->last_disasm_reg);
../core/graph.c:					jumpbb->parent_stackptr = core->anal->stackptr + b->stackptr;
../core/graph.c:				if (emu && core->anal->last_disasm_reg != NULL && !failbb->parent_reg_arena) {
../core/graph.c:					failbb->parent_reg_arena = r_reg_arena_dup (core->anal->reg, core->anal->last_disasm_reg);
../core/graph.c:					failbb->parent_stackptr = core->anal->stackptr + b->stackptr;
../core/graph.c:	bool emu = r_config_get_i (core->config, "asm.emu");
../core/graph.c:	ut64 saved_gp = core->anal->gp;
../core/graph.c:	int saved_stackptr = core->anal->stackptr;
../core/graph.c:	core->keep_asmqjmps = false;
../core/graph.c:		saved_arena = r_reg_arena_peek (core->anal->reg);
../core/graph.c:	shortcuts = r_config_get_i (core->config, "graph.nodejmps");
../core/graph.c:		core->keep_asmqjmps = true;
../core/graph.c:		core->anal->gp = saved_gp;
../core/graph.c:			r_reg_arena_poke (core->anal->reg, saved_arena);
../core/graph.c:	core->anal->stackptr = saved_stackptr;
../core/graph.c:	bool emu = r_config_get_i (core->config, "asm.emu");
../core/graph.c:	ut64 saved_gp = core->anal->gp;
../core/graph.c:	int saved_stackptr = core->anal->stackptr;
../core/graph.c:	core->keep_asmqjmps = false;
../core/graph.c:		saved_arena = r_reg_arena_peek (core->anal->reg);
../core/graph.c:	core->keep_asmqjmps = false;
../core/graph.c:		shortcuts = r_config_get_i (core->config, "graph.nodejmps");
../core/graph.c:		core->keep_asmqjmps = true;
../core/graph.c:		core->anal->gp = saved_gp;
../core/graph.c:			r_reg_arena_poke (core->anal->reg, saved_arena);
../core/graph.c:	core->anal->stackptr = saved_stackptr;
../core/graph.c:	RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/graph.c:		RAnalBlock *bb = r_anal_bb_from_offset (core->anal, ref->addr);
../core/graph.c:		ut64 off = r_core_anal_get_bbaddr (core, core->offset);
../core/graph.c:		g->can->color = r_config_get_i (core->config, "scr.color");
../core/graph.c:		const char *cmdv = r_config_get (core->config, "cmd.gprompt");
../core/graph.c:	if (g->is_instep && core->io->debug) {
../core/graph.c:		const char *pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);
../core/graph.c:		RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);
../core/graph.c:		ut64 addr = r_reg_get_value (core->dbg->reg, r);
../core/graph.c:		f = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/graph.c:	int alt = r_config_get_i (core->config, "graph.scroll");
../core/graph.c:	g->movspeed = DEFAULT_SPEED; // r_config_get_i (g->core->config, "graph.scroll");
../core/graph.c:			r_io_sundo_push (core->io, core->offset, 0);
../core/graph.c:	ut64 off = r_core_anal_get_bbaddr (core, core->offset);
../core/graph.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/graph.c:		if (core->print->cur_enabled) {
../core/graph.c:			r_core_cmdf (core, "dcu 0x%08"PFMT64x, core->offset + core->print->cur);
../core/graph.c:			core->print->cur_enabled = 0;
../core/graph.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/graph.c:		if (core->print->cur_enabled) {
../core/graph.c:			core->print->cur_enabled = 0;
../core/graph.c:	int o_asmqjmps_letter = core->is_asmqjmps_letter;
../core/graph.c:	int o_scrinteractive = r_config_get_i (core->config, "scr.interactive");
../core/graph.c:	int o_vmode = core->vmode;
../core/graph.c:	RConfigHold *hc = r_config_hold_new (core->config);
../core/graph.c:	can->linemode = r_config_get_i (core->config, "graph.linemode");
../core/graph.c:	can->color = r_config_get_i (core->config, "scr.color");
../core/graph.c:		fcn = _fcn? _fcn: r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/graph.c:		g->layout = r_config_get_i (core->config, "graph.layout");
../core/graph.c:	r_config_set_i (core->config, "scr.interactive", false);
../core/graph.c:	g->movspeed = r_config_get_i (core->config, "graph.scroll");
../core/graph.c:	bool asm_comments = r_config_get_i (core->config, "asm.comments");
../core/graph.c:	r_config_set (core->config, "asm.comments",
../core/graph.c:		r_str_bool (r_config_get_i (core->config, "graph.comments")));
../core/graph.c:	core->is_asmqjmps_letter = true;
../core/graph.c:	core->vmode = true;
../core/graph.c:	core->cons->event_data = grd;
../core/graph.c:	core->cons->event_resize = (RConsEvent) agraph_refresh;
../core/graph.c:		invscroll = r_config_get_i (core->config, "graph.invscroll");
../core/graph.c:		wheel = r_config_get_i (core->config, "scr.wheel");
../core/graph.c:		if (core->cons->mouse_event) {
../core/graph.c:			movspeed = r_config_get_i (core->config, "scr.wheelspeed");
../core/graph.c:			const char *cmd = r_config_get (core->config, "cmd.gprompt");
../core/graph.c:			core->cons->line->contents = strdup (cmd);
../core/graph.c:			core->cons->line->contents = NULL;
../core/graph.c:			r_config_set (core->config, "cmd.gprompt", buf);
../core/graph.c:			key_s = r_config_get (core->config, "key.s");
../core/graph.c:			ut64 old_off = core->offset;
../core/graph.c:			ut64 off = r_core_anal_get_bbaddr (core, core->offset);
../core/graph.c:			r_config_toggle (core->config, "graph.refs");
../core/graph.c:			RIOUndos *undo = r_io_sundo (core->io, core->offset);
../core/graph.c:			RIOUndos *undo = r_io_sundo_redo (core->io);
../core/graph.c:				g->layout = r_config_get_i (core->config, "graph.layout");
../core/graph.c:			if (r_config_get_i (core->config, "scr.randpal")) {
../core/graph.c:			g->color_box = core->cons->pal.graph_box;
../core/graph.c:			g->color_box2 = core->cons->pal.graph_box2;
../core/graph.c:			g->color_box3 = core->cons->pal.graph_box3;
../core/graph.c:			g->color_true = core->cons->pal.graph_true;
../core/graph.c:			g->color_false = core->cons->pal.graph_false;
../core/graph.c:				r_config_toggle (core->config, "graph.comments");
../core/graph.c:			r_config_toggle (core->config, "scr.color");
../core/graph.c:			r_core_seek_next (core, r_config_get (core->config, "scr.nkey"));
../core/graph.c:			r_core_seek_previous (core, r_config_get (core->config, "scr.nkey"));
../core/graph.c:			r_config_set_i (core->config, "scr.interactive", true);
../core/graph.c:			r_config_set_i (core->config, "scr.interactive", false);
../core/graph.c:			cmd = r_config_get (core->config, "key.f1");
../core/graph.c:			cmd = r_config_get (core->config, "key.f2");
../core/graph.c:			cmd = r_config_get (core->config, "key.f3");
../core/graph.c:			cmd = r_config_get (core->config, "key.f4");
../core/graph.c:			cmd = r_config_get (core->config, "key.f5");
../core/graph.c:			cmd = r_config_get (core->config, "key.f6");
../core/graph.c:			cmd = r_config_get (core->config, "key.f7");
../core/graph.c:			cmd = r_config_get (core->config, "key.f8");
../core/graph.c:			cmd = r_config_get (core->config, "key.f9");
../core/graph.c:			cmd = r_config_get (core->config, "key.f10");
../core/graph.c:			cmd = r_config_get (core->config, "key.f11");
../core/graph.c:			cmd = r_config_get (core->config, "key.f12");
../core/graph.c:	r_config_set (core->config, "asm.comments", r_str_bool (asm_comments));
../core/graph.c:	core->cons->event_data = NULL;
../core/graph.c:	core->cons->event_resize = NULL;
../core/graph.c:	core->vmode = o_vmode;
../core/graph.c:	core->is_asmqjmps_letter = o_asmqjmps_letter;
../core/graph.c:	core->keep_asmqjmps = false;
../core/graph.c:		r_config_set_i (core->config, "scr.interactive", o_scrinteractive);
../core/hack.c:	const int bits = core->assembler->bits;
../core/hack.c:	const ut8 *b = core->block;
../core/hack.c:	const ut8 *b = core->block;
../core/hack.c:	const char *asmarch = r_config_get (core->config, "asm.arch");
../core/hack.c:		if (!r_anal_op (core->anal, &analop, core->offset, core->block, core->blocksize)) {
../core/help.c:	r_cons_cmd_help (help, core->print->flags & R_PRINT_FLAGS_COLOR);
Binary file ../core/libr_core.dll matches
../core/libs.c:		r_ ## x ## _add (core->y, hand);\
../core/libs.c:		r_ ## x ## _add (core->y, instance);\
../core/libs.c:#define DF(x, y, z) r_lib_add_handler (core->lib, R_LIB_TYPE_ ## x, y, &__lib_ ## z ## _cb, &__lib_ ## z ## _dt, core);
../core/libs.c:	core->lib = r_lib_new ("radare_plugin");
../core/libs.c:	core->times->loadlibs_init_time = r_sys_now () - prev;
../core/libs.c:	if (!r_config_get_i (core->config, "cfg.plugins")) {
../core/libs.c:		core->times->loadlibs_time = 0;
../core/libs.c:		r_lib_opendir (core->lib, path);
../core/libs.c:		r_lib_opendir (core->lib, r_config_get (core->config, "dir.plugins"));
../core/libs.c:			r_lib_opendir (core->lib, p);
../core/libs.c:		r_lib_opendir (core->lib, homeplugindir);
../core/libs.c:		r_lib_opendir (core->lib, "plugins");
../core/libs.c:		r_lib_opendir (core->lib, "share/radare2/"R2_VERSION "/plugins");
../core/libs.c:		r_lib_opendir (core->lib, R2_LIBDIR "/radare2/"R2_VERSION);
../core/libs.c:		r_lib_opendir (core->lib, R2_LIBDIR "/radare2-extras/"R2_VERSION);
../core/libs.c:		r_lib_opendir (core->lib, R2_LIBDIR "/radare2-bindings/"R2_VERSION);
../core/libs.c:	core->times->loadlibs_time = r_sys_now () - prev;
../core/linux_heap_glibc.c:	r_debug_map_sync (core->dbg);
../core/linux_heap_glibc.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/linux_heap_glibc.c:	r_bin_load (core->bin, path, 0, 0, 0, -1, false);
../core/linux_heap_glibc.c:	syms = r_bin_get_symbols (core->bin);
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:	r_debug_map_sync (core->dbg);
../core/linux_heap_glibc.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:	GHT chunk = core->offset;
../core/linux_heap_glibc.c:		r_print_hexdump (core->print, chunk + SZ * 2, (ut8 *)data, size, SZ * 8, SZ, 1);
../core/linux_heap_glibc.c:	g->can->color = r_config_get_i (core->config, "scr.color");
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:		num_bin = r_num_math (core->num, input + j) - 1;
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:		num_bin = r_num_math (core->num, input + 1) - 1;
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:	RConfigHold *hc = r_config_hold_new (core->config);
../core/linux_heap_glibc.c:	can->linemode = r_config_get_i (core->config, "graph.linemode");
../core/linux_heap_glibc.c:	can->color = r_config_get_i (core->config, "scr.color");
../core/linux_heap_glibc.c:	core->cons->use_utf8 = r_config_get_i (core->config, "scr.utf8");
../core/linux_heap_glibc.c:	g->layout = r_config_get_i (core->config, "graph.layout");
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->config || !core->dbg->maps) {
../core/linux_heap_glibc.c:	RConfigHold *hc = r_config_hold_new (core->config);
../core/linux_heap_glibc.c:	can->linemode = r_config_get_i (core->config, "graph.linemode");
../core/linux_heap_glibc.c:	can->color = r_config_get_i (core->config, "scr.color");
../core/linux_heap_glibc.c:	core->cons->use_utf8 = r_config_get_i (core->config, "scr.utf8");
../core/linux_heap_glibc.c:	g->layout = r_config_get_i (core->config, "graph.layout");
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../core/linux_heap_glibc.c:	GHT malloc_state = core->offset, h_info;
../core/linux_heap_jemalloc.c:	r_bin_load (core->bin, path, 0, 0, 0, -1, false);
../core/linux_heap_jemalloc.c:	syms = r_bin_get_symbols (core->bin);
../core/linux_heap_jemalloc.c:	if (!core || !core->dbg || !core->dbg->maps){
../core/linux_heap_jemalloc.c:	r_debug_map_sync (core->dbg);
../core/linux_heap_jemalloc.c:	r_list_foreach (core->dbg->maps, iter, map) {
../core/linux_heap_jemalloc.c:			arena = r_num_math (core->num, input);
../core/linux_heap_jemalloc.c:		arena = r_num_math (core->num, input);
../core/linux_heap_jemalloc.c:			chunk = r_num_math (core->num, input);
../core/log.c:	int count = 0, i, idx, id = core->log->first;
../core/log.c:	RStrpool *sp = core->log->sp;
../core/log.c:	r_strpool_append (core->log->sp, msg);
../core/log.c:	core->log->last++;
../core/log.c:	if (core->cmdlog && *core->cmdlog) {
../core/log.c:		r_core_cmd0 (core, core->cmdlog);
../core/log.c:		if (n + 1 >= core->log->last) {
../core/log.c:			core->log->first = core->log->last;
../core/log.c:			r_strpool_empty (core->log->sp);
../core/log.c:		if (n < core->log->first) {
../core/log.c:		idx = n - core->log->first;
../core/log.c:		core->log->first += idx + 1;
../core/log.c:		char *msg = r_strpool_get_i (core->log->sp, idx);
../core/log.c:		// if (idx >= core->log->last) {
../core/log.c:			core->log->first = core->log->last;
../core/log.c:			r_strpool_empty (core->log->sp);
../core/log.c:			r_strpool_slice (core->log->sp, idx);
../core/log.c:		core->log->first = core->log->last;
../core/log.c:		r_strpool_empty (core->log->sp);
../core/p/core_anal.c:	bool vars = r_config_get_i (core->config, "anal.vars");
../core/p/core_anal.c:	fi = r_flag_get_at (core->flags, addr, false);
../core/p/core_anal.c:			if (!analyzeFunction (core, core->offset)) {
../core/p/core_java.c:	return core? core->anal: NULL;
../core/p/core_java.c:		r_list_foreach (core->bin->plugins, iter, tmp) {
../core/p/core_java.c:		//if (cp) r_bin_update_items (core->bin, cp);
../core/p/core_java.c:	ut64 c_file_sz = r_io_size (core->io);
../core/p/core_java.c:		r_io_resize(core->io, c_file_sz + (int) n_sz - (int) c_sz);
../core/p/core_java.c:		res = r_io_use_fd (core->io, core->file->fd);
../core/p/core_java.c:		n_file_sz = r_io_size (core->io);
../core/p/core_java.c:			res = n_file_sz == r_io_read_at (core->io, obj->loadaddr,
../core/p/core_java.c:	ut64 addr = 0LL; //cur_offset = core->offset, addr = 0;
../core/p/core_java.c:		res = r_io_use_fd (core->io, core->file->fd);
../core/p/core_java.c:		buf_size = r_io_size (core->io);
../core/p/core_java.c:		r_io_read_at (core->io, addr, buf, buf_size);
../core/p/core_java.c:	r_list_foreach (core->anal->fcns, fn_iter, fcn) {
../core/p/core_java.c:		 cur_fsz = r_io_fd_size (core->io, r_core_file_cur (core)->fd);
../core/p/core_java.c:	ut32 cur_fsz =  r_io_fd_size (core->io, r_core_file_cur (core)->fd);
../core/p/core_java.c:		ut64 cur_offset = core->offset;
../core/p/core_java.c:		if (cur_offset != core->offset) r_core_seek (core, cur_offset-2, 1);
../core/p/core_java.c:	ut64 value = input_value ? r_num_math (core->num, input_value) : 0;
../core/p/core_java.c:	ut64 value = input_value ? r_num_math (core->num, input_value) : 0;
../core/p/core_java.c:	//ut64 cur_offset = core->offset;
../core/p/core_java.c:	/*if (cur_offset != core->offset) {
../core/panels.c:		"[0x%08"PFMT64x "]", core->offset);
../core/panels.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/panels.c:		if (core->print->cur_enabled) {
../core/panels.c:			r_core_cmdf (core, "dcu 0x%08"PFMT64x, core->offset + core->print->cur);
../core/panels.c:			core->print->cur_enabled = 0;
../core/panels.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/panels.c:		if (core->print->cur_enabled) {
../core/panels.c:			core->print->cur_enabled = 0;
../core/panels.c:	can->linemode = r_config_get_i (core->config, "graph.linemode");
../core/panels.c:	can->color = r_config_get_i (core->config, "scr.color");
../core/panels.c:		r_config_set_i (core->config, "scr.color", can->color);
../core/panels.c:	asm_comments = r_config_get_i (core->config, "asm.comments");
../core/panels.c:	have_utf8 = r_config_get_i (core->config, "scr.utf8");
../core/panels.c:	r_config_set_i (core->config, "asm.comments", 0);
../core/panels.c:	asm_bytes = r_config_get_i (core->config, "asm.bytes");
../core/panels.c:	r_config_set_i (core->config, "asm.bytes", 0);
../core/panels.c:	r_config_set_i (core->config, "scr.utf8", 0);
../core/panels.c:	core->cons->event_data = core;
../core/panels.c:	core->cons->event_resize =\
../core/panels.c:	wheel = r_config_get_i (core->config, "scr.wheel");
../core/panels.c:		if (r_config_get_i (core->config, "cfg.debug")) {
../core/panels.c:			// r_core_seek (core, r_num_math (core->num, "entry0"), 1);
../core/panels.c:					addPanelFrame ("Registers", "dr=", core->offset);
../core/panels.c:				addPanelFrame ("Hexdump", "px 512", core->offset);
../core/panels.c:				addPanelFrame ("Disassembly", "pd 128", core->offset);
../core/panels.c:				addPanelFrame ("Functions", "afl", core->offset);
../core/panels.c:				addPanelFrame ("Comments", "CC", core->offset);
../core/panels.c:				addPanelFrame ("Entropy", "p=e", core->offset);
../core/panels.c:				addPanelFrame ("DRX", "drx", core->offset);
../core/panels.c:				r_core_visual_asm (core, core->offset);
../core/panels.c:				core->vmode = false;
../core/panels.c:				core->vmode = true;
../core/panels.c:		if (r_config_get_i (core->config, "cfg.debug")) {
../core/panels.c:		if (r_config_get_i (core->config, "cfg.debug")) {
../core/panels.c:		core->vmode = false;
../core/panels.c:		core->vmode = true;
../core/panels.c:		// r_config_toggle (core->config, "scr.color");
../core/panels.c:		if (r_config_get_i (core->config, "scr.randpal")) {
../core/panels.c:		if (r_config_get_i (core->config, "graph.web")) {
../core/panels.c:			RAnalFunction *fun = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/panels.c:			ocolor = r_config_get_i (core->config, "scr.color");
../core/panels.c:			r_config_set_i (core->config, "scr.color", ocolor);
../core/panels.c:		r_config_set_i (core->config, "hex.cols", r_config_get_i (core->config, "hex.cols") + 1);
../core/panels.c:		r_config_set_i (core->config, "hex.cols", r_config_get_i (core->config, "hex.cols") - 1);
../core/panels.c:		cmd = r_config_get (core->config, "key.f1");
../core/panels.c:		cmd = r_config_get (core->config, "key.f2");
../core/panels.c:		cmd = r_config_get (core->config, "key.f3");
../core/panels.c:		cmd = r_config_get (core->config, "key.f4");
../core/panels.c:		cmd = r_config_get (core->config, "key.f5");
../core/panels.c:		cmd = r_config_get (core->config, "key.f6");
../core/panels.c:		cmd = r_config_get (core->config, "key.f7");
../core/panels.c:		cmd = r_config_get (core->config, "key.f8");
../core/panels.c:		cmd = r_config_get (core->config, "key.f9");
../core/panels.c:		cmd = r_config_get (core->config, "key.f10");
../core/panels.c:		cmd = r_config_get (core->config, "key.f11");
../core/panels.c:		cmd = r_config_get (core->config, "key.f12");
../core/panels.c:	r_config_set_i (core->config, "scr.color", can->color);
../core/panels.c:	r_config_set_i (core->config, "asm.comments", asm_comments);
../core/panels.c:	r_config_set_i (core->config, "asm.bytes", asm_bytes);
../core/panels.c:	r_config_set_i (core->config, "scr.utf8", have_utf8);
../core/patch.c:				*noff = r_num_math (core->num, q+2);
../core/patch.c:	r_egg_load (core->egg, s, 0);
../core/patch.c:	(void)r_egg_compile (core->egg);
../core/patch.c:	(void)r_egg_assemble (core->egg);
../core/patch.c:	b = r_egg_get_bin (core->egg);
../core/patch.c:		*noff = r_num_math (core->num, off);
../core/project.c:		prjfile = r_file_abspath (r_config_get (core->config, "dir.projects"));
../core/project.c:	char *prjdir = r_file_abspath (r_config_get (core->config, "dir.projects"));
../core/project.c:	char *foo, *path = r_file_abspath (r_config_get (core->config, "dir.projects"));
../core/project.c:	Sdb *rop_db = sdb_ns (core->sdb, "rop", false);
../core/project.c:		ls_foreach (core->sdb->ns, it, ns){
../core/project.c:				ls_delete (core->sdb->ns, it);
../core/project.c:	sdb_ns_set (core->sdb, "rop", rop_db);
../core/project.c:	// eprintf ("OPENING (%s) from %s\n", prj, r_config_get (core->config, "file.path"));
../core/project.c:	const char *file_path = r_config_get (core->config, "file.path");
../core/project.c:		file_path = r_config_get (core->config, "file.lastpath");
../core/project.c:	if (!strcmp (prjfile, r_config_get (core->config, "prj.name"))) {
../core/project.c:		if (r_config_get_i (core->config, "scr.interactive")) {
../core/project.c:		r_io_close_all (core->io);
../core/project.c:		r_anal_purge (core->anal);
../core/project.c:		r_flag_unset_all (core->flags);
../core/project.c:		r_bin_file_delete_all (core->bin);
../core/project.c:		r_io_desc_init (core->io);
../core/project.c:	if (filepath[0] && close_current_session && r_config_get_i (core->config, "file.info")) {
../core/project.c:		mapaddr = r_config_get_i (core->config, "file.offset");
../core/project.c:		newbin = r_config_get (core->config, "file.path");
../core/project.c:			newbin = r_config_get (core->config, "file.lastpath");
../core/project.c:		if ((maps = r_io_map_get_for_fd (core->io, id))) {
../core/project.c:		tmp = core->flags->space_idx;
../core/project.c:		core->flags->space_idx = -1;
../core/project.c:		r_flag_list (core->flags, true, NULL);
../core/project.c:		core->flags->space_idx = tmp;
../core/project.c:	r_config_set (core->config, "file.path", "");
../core/project.c:	r_config_set (core->config, "file.lastpath", "");
../core/project.c:		r_config_list (core->config, NULL, true);
../core/project.c:	if (opts & R_CORE_PRJ_IO_MAPS && core->io && core->io->files) {
../core/project.c:		r_id_storage_foreach (core->io->files, (RIDStorageForeachCb)store_files_and_maps, core);
../core/project.c:		// __section_list_for_projects (core->io, core->print);
../core/project.c:		r_meta_list (core->anal, R_META_TYPE_ANY, 1);
../core/project.c:			"s 0x%08"PFMT64x "\n", core->offset);
../core/project.c:	if (r_config_get_i (core->config, "scr.null")) {
../core/project.c:		r_config_set_i (core->config, "scr.null", false);
../core/project.c:	r_anal_project_save (core->anal, prjDir);
../core/project.c:	Sdb *rop_db = sdb_ns (core->sdb, "rop", false);
../core/project.c:	const char *oldPrjNameC = r_config_get (core->config, "prj.name");
../core/project.c:	r_config_set (core->config, "prj.name", prjName);
../core/project.c:	if (r_config_get_i (core->config, "prj.files")) {
../core/project.c:	if (r_config_get_i (core->config, "prj.git")) {
../core/project.c:	if (r_config_get_i (core->config, "prj.zip")) {
../core/project.c:		r_config_set_i (core->config, "scr.null", true);
../core/project.c:		r_config_set (core->config, "prj.name", oldPrjName);
../core/project.c:	const char *prjdir = r_config_get (core->config, "dir.projects");
../core/project.c:#define DB core->anal->sdb_xrefs
../core/project.c:	const char *prjdir = r_config_get (core->config, "dir.projects");
../core/project.c:	if (!sdb_ns_unset (core->anal->sdb, NULL, DB)) {
../core/project.c:	sdb_ns_set (core->anal->sdb, "xrefs", DB);
../core/project.c:	const bool cfg_fortunes = r_config_get_i (core->config, "cfg.fortunes");
../core/project.c:	const bool scr_interactive = r_config_get_i (core->config, "scr.interactive");
../core/project.c:	const bool scr_prompt = r_config_get_i (core->config, "scr.prompt");
../core/project.c:	r_config_set_i (core->config, "cfg.fortunes", cfg_fortunes);
../core/project.c:	r_config_set_i (core->config, "scr.interactive", scr_interactive);
../core/project.c:	r_config_set_i (core->config, "scr.prompt", scr_prompt);
../core/project.c:	r_config_bump (core->config, "asm.arch");
../core/pseudo.c:	RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/pseudo.c:	RConfigHold *hc = r_config_hold_new (core->config);
../core/pseudo.c:		eprintf ("Cannot find function in 0x%08"PFMT64x"\n", core->offset);
../core/pseudo.c:	r_config_set_i (core->config, "scr.color", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.pseudo", 1);
../core/pseudo.c:	r_config_set_i (core->config, "asm.decode", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.filter", 1);
../core/pseudo.c:	r_config_set_i (core->config, "asm.lines", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.bytes", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.offset", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.flags", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.emu", 1);
../core/pseudo.c:	r_config_set_i (core->config, "asm.emustr", 1);
../core/pseudo.c:	r_config_set_i (core->config, "asm.emuwrite", 1);
../core/pseudo.c:	r_config_set_i (core->config, "asm.fcnlines", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.comments", 1);
../core/pseudo.c:	r_config_set_i (core->config, "asm.functions", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.tabs", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.section", 0);
../core/pseudo.c:	r_config_set_i (core->config, "asm.cmtcol", 30);
../core/pseudo.c:	r_config_set_i (core->config, "io.cache", 1);
../core/pseudo.c:		bool html = r_config_get_i (core->config, "scr.html");
../core/pseudo.c:		r_config_set_i (core->config, "scr.html", 0);
../core/pseudo.c:		r_config_set_i (core->config, "scr.html", html);
../core/pseudo.c:			bb = r_anal_bb_from_offset (core->anal, addr);
../core/pseudo.c:				RAnalFunction *curfcn = r_anal_get_fcn_in (core->anal, jump, R_ANAL_FCN_TYPE_NULL);
../core/pseudo.c:						bb = r_anal_bb_from_offset (core->anal, fail);
../core/pseudo.c:					bb = r_anal_bb_from_offset (core->anal, jump);
../core/pseudo.c:				bb = r_anal_bb_from_offset (core->anal, addr);
../core/rtr.c:#define rtr_n core->rtr_n
../core/rtr.c:#define rtr_host core->rtr_host
../core/rtr.c:	bool http_log_enabled = r_config_get_i (core->config, "http.log");
../core/rtr.c:		const char *http_log_file = r_config_get (core->config, "http.logfile");
../core/rtr.c:	if (core && core->vmode) {
../core/rtr.c:		r_cons_enable_mouse (x? r_config_get_i (core->config, "scr.wheel"): false);
../core/rtr.c:	const char *me = r_config_get (core->config, "cfg.user");
../core/rtr.c:			r_config_set (core->config, "cfg.user", buf+6);
../core/rtr.c:			me = r_config_get (core->config, "cfg.user");
../core/rtr.c:#define COLORFLAGS (core->print->flags & R_PRINT_FLAGS_COLOR)
../core/rtr.c:			core->config, "http.port");
../core/rtr.c:	int dt = r_config_get_i (core->config, "http.dietime");
../core/rtr.c:	int iport, timeout = r_config_get_i (core->config, "http.timeout");
../core/rtr.c:	const char *host = r_config_get (core->config, "http.bind");
../core/rtr.c:	const char *root = r_config_get (core->config, "http.root");
../core/rtr.c:	const char *homeroot = r_config_get (core->config, "http.homeroot");
../core/rtr.c:	const char *port = r_config_get (core->config, "http.port");
../core/rtr.c:	const char *allow = r_config_get (core->config, "http.allow");
../core/rtr.c:	const char *httpui = r_config_get (core->config, "http.ui");
../core/rtr.c:		if (core->file && (!path || !*path)) {
../core/rtr.c:				r_config_set (core->config, "http.bind", "localhost");
../core/rtr.c:				r_config_set (core->config, "http.bind", "0.0.0.0");
../core/rtr.c:		const char *browser = r_config_get (core->config, "http.browser");
../core/rtr.c:	origcfg = core->config;
../core/rtr.c:	newcfg = r_config_clone (core->config);
../core/rtr.c:	core->config = newcfg;
../core/rtr.c:	r_config_set (core->config, "asm.cmtright", "false");
../core/rtr.c:	r_config_set (core->config, "scr.html", "true");
../core/rtr.c:	r_config_set (core->config, "scr.color", "false");
../core/rtr.c:	r_config_set (core->config, "asm.bytes", "false");
../core/rtr.c:	r_config_set (core->config, "scr.interactive", "false");
../core/rtr.c:	if (r_config_get_i (core->config, "http.sandbox")) {
../core/rtr.c:		//(void)r_config_get_i (core->config, "cfg.sandbox");
../core/rtr.c:		r_config_set (core->config, "cfg.sandbox", "true");
../core/rtr.c:	core->http_up = true;
../core/rtr.c:	ut64 newoff, origoff = core->offset;
../core/rtr.c:	int newblksz, origblksz = core->blocksize;
../core/rtr.c:	ut8 *newblk, *origblk = core->block;
../core/rtr.c:	newblk = malloc (core->blocksize);
../core/rtr.c:	memcpy (newblk, core->block, core->blocksize);
../core/rtr.c:	core->block = newblk;
../core/rtr.c:		core->config = origcfg;
../core/rtr.c:		core->http_up = 0; // DAT IS NOT TRUE AT ALL.. but its the way to enable visual
../core/rtr.c:		newoff = core->offset;
../core/rtr.c:		newblk = core->block;
../core/rtr.c:		newblksz = core->blocksize;
../core/rtr.c:		core->offset = origoff;
../core/rtr.c:		core->block = origblk;
../core/rtr.c:		core->blocksize = origblksz;
../core/rtr.c:		origoff = core->offset;
../core/rtr.c:		origblk = core->block;
../core/rtr.c:		origblksz = core->blocksize;
../core/rtr.c:		core->offset = newoff;
../core/rtr.c:		core->block = newblk;
../core/rtr.c:		core->blocksize = newblksz;
../core/rtr.c:		core->http_up = 1;
../core/rtr.c:		core->config = newcfg;
../core/rtr.c:		if (r_config_get_i (core->config, "http.verbose")) {
../core/rtr.c:		if (r_config_get_i (core->config, "http.dirlist")) {
../core/rtr.c:		if (r_config_get_i (core->config, "http.cors")) {
../core/rtr.c:				if (r_config_get_i (core->config, "http.upget")) {
../core/rtr.c:					const char *uproot = r_config_get (core->config, "http.uproot");
../core/rtr.c:				const char *httpcmd = r_config_get (core->config, "http.uri");
../core/rtr.c:				const char *httpref = r_config_get (core->config, "http.referer");
../core/rtr.c:						r_config_set (core->config, "scr.interactive", "false");
../core/rtr.c:				const char *root = r_config_get (core->config, "http.root");
../core/rtr.c:				const char *homeroot = r_config_get (core->config, "http.homeroot");
../core/rtr.c:			if (r_config_get_i (core->config, "http.upload")) {
../core/rtr.c:					ut64 size = r_config_get_i (core->config, "http.maxsize");
../core/rtr.c:							r_config_get (core->config, "http.uproot"),
../core/rtr.c:		int timeout = r_config_get_i (core->config, "http.timeout");
../core/rtr.c:		const char *host = r_config_get (core->config, "http.bind");
../core/rtr.c:		const char *port = r_config_get (core->config, "http.port");
../core/rtr.c:		const char *cors = r_config_get (core->config, "http.cors");
../core/rtr.c:		const char *allow = r_config_get (core->config, "http.allow");
../core/rtr.c:		const char *httpui = r_config_get (core->config, "http.ui");
../core/rtr.c:		core->config = origcfg;
../core/rtr.c:		r_config_set_i (core->config, "http.timeout", timeout);
../core/rtr.c:		r_config_set (core->config, "http.bind", host);
../core/rtr.c:		r_config_set (core->config, "http.port", port);
../core/rtr.c:		r_config_set (core->config, "http.cors", cors);
../core/rtr.c:		r_config_set (core->config, "http.allow", allow);
../core/rtr.c:		r_config_set (core->config, "http.ui", httpui);
../core/rtr.c:	core->http_up = false;
../core/rtr.c:		int p = r_config_get_i (ht->core->config, "http.port");
../core/rtr.c:		r_config_set_i (ht->core->config, "http.port",  p + 1);
../core/rtr.c:		if (p >= r_config_get_i (ht->core->config, "http.maxport")) {
../core/rtr.c:	if (core->http_up) {
../core/rtr.c:		switch (core->dbg->reason.type) {
../core/rtr.c:					 core->dbg->tid);
../core/rtr.c:				 core->dbg->reason.type, core->dbg->reason.tid);
../core/rtr.c:			if (snprintf (out_buf, max_len - 1, "%"PFMT64x, r_debug_get_baddr (core->dbg, NULL)) < 0) {
../core/rtr.c:				snprintf (out_buf, max_len - 1, "QC%x", core->dbg->tid);
../core/rtr.c:					if (!core->dbg->h->threads) {
../core/rtr.c:					if (!(list = core->dbg->h->threads(core->dbg, core->dbg->pid))) {
../core/rtr.c:					return core->dbg->tid;
../core/rtr.c:			r_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, false);
../core/rtr.c:			be = r_config_get_i (core->config, "cfg.bigendian");
../core/rtr.c:				if (!(r = r_reg_get (core->dbg->reg, new_cmd, -1))) {
../core/rtr.c:					reg_val = r_reg_get_value (core->dbg->reg, r);
../core/rtr.c:				r_reg_get_value_big (core->dbg->reg,
../core/rtr.c:					reg_val = r_reg_getv (core->dbg->reg, gdb_reg->name);
../core/rtr.c:					r_reg_get_value_big (core->dbg->reg,
../core/rtr.c:							     r_reg_get (core->dbg->reg, gdb_reg->name, -1),
../core/rtr.c:			RIODesc *desc = core && core->file ? r_io_desc_get (core->io, core->file->fd) : NULL;
../core/rtr.c:		if (r_io_read_at (core->io, m_off, (ut8*) out_buf, ret)) {
../core/rtr.c:	gdbr_set_architecture (g, r_config_get (core->config, "asm.arch"), r_config_get_i (core->config, "asm.bits"));
../core/rtr.c:	core->gdbserver_up = 1;
../core/rtr.c:	core->gdbserver_up = 0;
../core/rtr.c:	if (core->gdbserver_up) {
../core/rtr.c:	timeout = r_config_get_i (core->config, "http.timeout");
../core/rtr.c:			core->num->value = 1;
../core/rtr.c:		core->num->value = 0;
../core/rtr.c:			core->num->value = 1;
../core/rtr.c:		core->num->value = 0;
../core/rtr.c:	ret = core->num->value;
../core/rtr.c:		rtr_host[i].port = r_num_get (core->num, port);
../core/rtr.c:	core->num->value = ret;
../core/rtr.c:		fd = r_num_math (core->num, input);
../core/rtr.c:		fd = r_num_math (core->num, input);
../core/rtr.c:		core->num->value = 1; // fail
../core/rtr.c:	core->num->value = 0; // that's fine
../core/rtr.c:			if (!r_config_get_i (core->config, "scr.prompt") &&
../core/task.c:	r_list_foreach (core->tasks, iter, task) {
../core/task.c:		r_list_foreach_prev (core->tasks, iter, task) {
../core/task.c:		task->id = r_list_length (core->tasks)+1;
../core/task.c:	r_list_foreach_prev (core->tasks, iter, task) {
../core/task.c:	r_list_foreach_prev (core->tasks, iter, task) {
../core/task.c:	//r_th_pipe_push (core->pipe, task->cb, task);
../core/task.c:	if (core->tasks) {
../core/task.c:		r_list_append (core->tasks, task);
../core/task.c:	//r_th_pipe_push (core->pipe, task->cb, task);
../core/task.c:	r_list_append (core->tasks, task);
../core/task.c:		r_list_free (core->tasks);
../core/task.c:		core->tasks = r_list_new ();
../core/task.c:	r_list_foreach (core->tasks, iter, task) {
../core/task.c:			r_list_delete (core->tasks, iter);
../core/task.c:	r_list_foreach (core->tasks, iter, task) {
../core/vasm.c:		r_config_get (a->core->config, "asm.arch"),
../core/vasm.c:		r_config_get_i (a->core->config, "asm.bits"));
../core/vasm.c:		r_asm_set_pc (a->core->assembler, a->off);
../core/vasm.c:		a->acode = r_asm_massemble (a->core->assembler, str);
../core/vasm.c:	r_io_read_at (core->io, off, cva.buf, sizeof (cva.buf));
../core/visual.c:	core->cons->breaked = true;
../core/visual.c:	core->cons->breaked = true;
../core/visual.c:	int atport = r_config_get_i (core->config, "scr.atport");
../core/visual.c:		int port = r_config_get_i (core->config, "http.port");
../core/visual.c:			const char *xterm = r_config_get (core->config, "cmd.xterm");
../core/visual.c:	if (core && core->vmode) {
../core/visual.c:			int wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:	const char *c = r_config_get (core->config, "hud.path");
../core/visual.c:	int use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/visual.c:	ut64 addr = core->offset;
../core/visual.c:	ut64 bsze = core->blocksize;
../core/visual.c:	core->vmode = false;
../core/visual.c:	if (core->print->cur_enabled) {
../core/visual.c:		if (core->print->ocur != -1) {
../core/visual.c:			int newsz = core->print->cur - core->print->ocur;
../core/visual.c:			newaddr = core->offset + core->print->ocur;
../core/visual.c:			newaddr = core->offset + core->print->cur;
../core/visual.c:		if (core->offset != newaddr) {
../core/visual.c:	if (core->print->cur_enabled) {
../core/visual.c:	core->vmode = true;
../core/visual.c:		core->seltab = 0;
../core/visual.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/visual.c:		if (core->print->cur_enabled) {
../core/visual.c:			r_core_cmdf (core, "dcu 0x%08"PFMT64x, core->offset + core->print->cur);
../core/visual.c:			core->print->cur_enabled = 0;
../core/visual.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/visual.c:		if (core->print->cur_enabled) {
../core/visual.c:			core->print->cur_enabled = 0;
../core/visual.c:	if (core->print->ocur == -1) {
../core/visual.c:		oseek = core->offset;
../core/visual.c:		r_core_seek (core, core->offset + core->print->cur, 0);
../core/visual.c:		cmd = r_config_get (core->config, "key.f1");
../core/visual.c:		cmd = r_config_get (core->config, "key.f2");
../core/visual.c:		cmd = r_config_get (core->config, "key.f3");
../core/visual.c:		cmd = r_config_get (core->config, "key.f4");
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				r_core_cmdf (core, "dcu 0x%08"PFMT64x, core->offset + core->print->cur);
../core/visual.c:				core->print->cur_enabled = 0;
../core/visual.c:		cmd = r_config_get (core->config, "key.f5");
../core/visual.c:		cmd = r_config_get (core->config, "key.f6");
../core/visual.c:		cmd = r_config_get (core->config, "key.f7");
../core/visual.c:		cmd = r_config_get (core->config, "key.f8");
../core/visual.c:		cmd = r_config_get (core->config, "key.f9");
../core/visual.c:		cmd = r_config_get (core->config, "key.f10");
../core/visual.c:		cmd = r_config_get (core->config, "key.f11");
../core/visual.c:		cmd = r_config_get (core->config, "key.f12");
../core/visual.c:	int flags = core->print->flags; // wtf
../core/visual.c:	if (core->print->cur_enabled) {
../core/visual.c:	core->print->cur_enabled = cur;
../core/visual.c:	if (core->print->cur == -1) {
../core/visual.c:		core->print->cur = 0;
../core/visual.c:	r_print_set_flags (core->print, flags);
../core/visual.c:	core->print->col = core->print->cur_enabled? 1: 0;
../core/visual.c:	r_config_set (core->config, "diff.from", from);
../core/visual.c:	r_config_set (core->config, "diff.to", to);
../core/visual.c:	int i, len, d = core->print->cur + 1;
../core/visual.c:	ut8 ch = core->block[core->print->cur];
../core/visual.c:			if (core->block[i] == ch) {
../core/visual.c:				q = core->block + i;
../core/visual.c:		q = r_mem_mem (core->block + d, core->blocksize - d,
../core/visual.c:			q = r_mem_mem (core->block, R_MIN (core->blocksize, d),
../core/visual.c:		core->print->cur = (int) (size_t) (q - core->block);
../core/visual.c:		core->print->ocur = -1;
../core/visual.c:	int i, d = core->print->cur_enabled? core->print->cur: 0;
../core/visual.c:	for (i = d + 1; i < core->blocksize; i++) {
../core/visual.c:		switch (core->block[i]) {
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				core->print->cur = i + 1;
../core/visual.c:				core->print->ocur = -1;
../core/visual.c:				r_core_seek (core, core->offset + i + 1, 1);
../core/visual.c:	int i = core->print->cur_enabled? core->print->cur: 0;
../core/visual.c:		if (isSpace (core->block[i])) {
../core/visual.c:		} else if (isSpace (core->block[i - 1])) {
../core/visual.c:		if (isSpace (core->block[i])) {
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				core->print->cur = i + 1;
../core/visual.c:				core->print->ocur = -1;
../core/visual.c:				// r_core_seek (core, core->offset + i + 1, 1);
../core/visual.c:	int len, d = core->print->cur;
../core/visual.c:	p = r_mem_mem (core->block + d, core->blocksize - d,
../core/visual.c:		core->print->cur = (int) (size_t) (p - core->block);
../core/visual.c:			core->print->ocur = core->print->cur + len - 1;
../core/visual.c:			core->print->ocur = -1;
../core/visual.c:		eprintf ("Found in offset 0x%08"PFMT64x" + %d\n", core->offset, core->print->cur);
../core/visual.c:	if (r_config_get_i (core->config, "scr.feedback") < 2) {
../core/visual.c:	if (r_config_get_i (core->config, "scr.feedback") < 1) {
../core/visual.c:	if (core->offset == addr) {
../core/visual.c:	if (addr > core->offset) {
../core/visual.c:		core->printidx = R_ABS ((core->printidx + 1) % NPF);
../core/visual.c:		if (core->printidx) {
../core/visual.c:			core->printidx--;
../core/visual.c:			core->printidx = NPF - 1;
../core/visual.c:	switch (core->printidx) {
../core/visual.c:		core->inc = 16;
../core/visual.c:		core->inc = r_asm_disassemble (core->assembler,
../core/visual.c:			&op, core->block, 32);
../core/visual.c:		core->inc = 256;
../core/visual.c:	int minop = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);
../core/visual.c:	int maxop = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MAX_OP_SIZE);
../core/visual.c:	bb = r_anal_bb_from_offset (core->anal, addr - minop);
../core/visual.c:		ret = r_anal_op (core->anal, &op, base + i,
../core/visual.c:	bb = r_anal_bb_from_offset (core->anal, start_addr);
../core/visual.c:		reset_print_cur (core->print);
../core/visual.c:	ut64 addr = core->offset;
../core/visual.c:	if (core->print->cur_enabled) {
../core/visual.c:		addr += core->print->cur;
../core/visual.c:		xrefs = r_anal_xrefs_get (core->anal, addr);
../core/visual.c:		xrefs = r_anal_refs_get (core->anal, addr);
../core/visual.c:		bool asm_bytes = r_config_get_i (core->config, "asm.bytes");
../core/visual.c:		r_config_set_i (core->config, "asm.bytes", false);
../core/visual.c:					fun = r_anal_get_fcn_in (core->anal, refi->addr, R_ANAL_FCN_TYPE_NULL);
../core/visual.c:						RFlagItem *f = r_flag_get_at (core->flags, refi->addr, true);
../core/visual.c:				char *cmd = strdup (r_config_get (core->config, "scr.highlight"));
../core/visual.c:					(void) r_config_set (core->config, "scr.highlight", ats);
../core/visual.c:				r_config_set (core->config, "scr.highlight", cmd);
../core/visual.c:		r_config_set_i (core->config, "asm.bytes", asm_bytes);
../core/visual.c:	const char *dir = r_config_get (core->config, "dir.projects");
../core/visual.c:	const char *prj = r_config_get (core->config, "prj.name");
../core/visual.c:	ut64 addr = core->offset + (core->print->cur_enabled? core->print->cur: 0);
../core/visual.c:	comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, addr);
../core/visual.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, comment);
../core/visual.c:				r_meta_set_string (core->anal, R_META_TYPE_COMMENT, addr, nc);
../core/visual.c:	RPrint *p = core->print;
../core/visual.c:	RPrint *p = core->print;
../core/visual.c:	if (PIDX == 7 || !strcmp ("prc", r_config_get (core->config, "cmd.visual"))) {
../core/visual.c:		//int cols = r_config_get_i (core->config, "hex.cols") * 3.5;
../core/visual.c:		int cols = r_config_get_i (core->config, "hex.cols") + r_config_get_i (core->config, "hex.pcols");
../core/visual.c:		int w = r_config_get_i (core->config, "hex.cols");
../core/visual.c:		if (core->seltab == 0) {
../core/visual.c:			core->offset += w;
../core/visual.c:	if (PIDX == 2 && core->seltab == 1) {
../core/visual.c:		const int cols = core->dbg->regcols;
../core/visual.c:	if (core->seltab == 0 && core->printidx == R_CORE_VISUAL_MODE_PDDBG) {
../core/visual.c:		int w = r_config_get_i (core->config, "hex.cols");
../core/visual.c:		r_config_set_i (core->config, "stack.delta",
../core/visual.c:			r_config_get_i (core->config, "stack.delta") - w);
../core/visual.c:		if (next_roff + 32 < core->blocksize) {
../core/visual.c:			sz = r_asm_disassemble (core->assembler, &op,
../core/visual.c:				core->block + next_roff, 32);
../core/visual.c:	RPrint *p = core->print;
../core/visual.c:	if (PIDX == 7 || !strcmp ("prc", r_config_get (core->config, "cmd.visual"))) {
../core/visual.c:		int cols = r_config_get_i (core->config, "hex.cols") + r_config_get_i (core->config, "hex.pcols");
../core/visual.c:	if (PIDX == 2 && core->seltab == 1) {
../core/visual.c:		const int cols = core->dbg->regcols;
../core/visual.c:		int w = r_config_get_i (core->config, "hex.cols");
../core/visual.c:		if (core->seltab == 0) {
../core/visual.c:			core->offset -= w;
../core/visual.c:	if (core->seltab == 0 && core->printidx == R_CORE_VISUAL_MODE_PDDBG) {
../core/visual.c:		int w = r_config_get_i (core->config, "hex.cols");
../core/visual.c:		r_config_set_i (core->config, "stack.delta",
../core/visual.c:			r_config_get_i (core->config, "stack.delta") + w);
../core/visual.c:			ut64 prev_addr = prevop_addr (core, core->offset + roff);
../core/visual.c:			if (prev_addr > core->offset) {
../core/visual.c:				prev_sz = r_asm_disassemble (core->assembler, &op,
../core/visual.c:					core->block, 32);
../core/visual.c:		if (core->seltab == 1) {
../core/visual.c:			core->print->cur--;
../core/visual.c:	core->print->cur--;
../core/visual.c:		if (core->seltab == 1) {
../core/visual.c:			core->print->cur++;
../core/visual.c:	core->print->cur++;
../core/visual.c:	RPrint *p = core->print;
../core/visual.c:	int offscreen = (core->cons->rows - 3) * p->cols;
../core/visual.c:	if (!core->print->cur_enabled) {
../core/visual.c:	if (core->print->screen_bounds > 1) {
../core/visual.c:		bool off_is_visible = core->offset < core->print->screen_bounds;
../core/visual.c:		bool cur_is_visible = core->offset + p->cur < core->print->screen_bounds;
../core/visual.c:		bool is_close = core->offset + p->cur < core->print->screen_bounds + 32;
../core/visual.c:			int sz = r_asm_disassemble (core->assembler,
../core/visual.c:				&op, core->block, 32);
../core/visual.c:	} else if (core->print->cur >= offscreen) {
../core/visual.c:		r_core_seek (core, core->offset + p->cols, 1);
../core/visual.c:		if (isDisasmPrint (core->printidx)) {
../core/visual.c:			sz = prevopsz (core, core->offset + p->cur);
../core/visual.c:		core->print->cur = R_MAX (0, core->print->cur - 1);
../core/visual.c:		core->print->col = core->print->col == 1? 2: 1;
../core/visual.c:		core->print->cur = R_MAX (0, core->print->cur - 1);
../core/visual.c:		core->print->cur = core->print->cur + 1;
../core/visual.c:	if (core->print->col == 2) {
../core/visual.c:			r_core_cmdf (core, "\"w %c\" @ $$+%d", ch, core->print->cur);
../core/visual.c:			core->print->cur++;
../core/visual.c:			r_core_cmdf (core, "wx %c%c @ $$+%d", __nib, ch, core->print->cur);
../core/visual.c:			core->print->cur++;
../core/visual.c:			r_core_cmdf (core, "wx %c. @ $$+%d", ch, core->print->cur);
../core/visual.c:		r_core_cmdf (core, "r-1 @ 0x%08"PFMT64x, core->offset + core->print->cur);
../core/visual.c:		r_core_cmdf (core, "r+1 @ 0x%08"PFMT64x, core->offset + core->print->cur);
../core/visual.c:		core->print->cur = R_MAX (0, core->print->cur - 1);
../core/visual.c:		core->print->cur = core->print->cur + 1;
../core/visual.c:	ut64 offset = core->offset;
../core/visual.c:	int i, ret, cols = core->print->cols, delta = 0;
../core/visual.c:		wheelspeed = r_config_get_i (core->config, "scr.wheelspeed");
../core/visual.c:			r_io_sundo_push (core->io, offset, r_print_get_cursor (core->print));
../core/visual.c:			if (core->print->cur_enabled && delta < 100) {
../core/visual.c:				core->print->cur = delta;
../core/visual.c:				core->print->cur = 0;
../core/visual.c:			int wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:				op = r_core_anal_op (core, core->offset + core->print->cur);
../core/visual.c:						if (core->print->cur_enabled) {
../core/visual.c:							if (op->jump < core->offset || op->jump >= core->print->screen_bounds) {
../core/visual.c:								r_io_sundo_push (core->io, offset, r_print_get_cursor (core->print));
../core/visual.c:								core->print->cur = 0;
../core/visual.c:								r_io_sundo_push (core->io, offset, r_print_get_cursor (core->print));
../core/visual.c:								core->print->cur = delta;
../core/visual.c:							r_io_sundo_push (core->io, offset, 0);
../core/visual.c:				core->print->cur = 0;
../core/visual.c:				core->curtab = 0;
../core/visual.c:				core->seltab++;
../core/visual.c:				if (core->seltab > 1) {
../core/visual.c:					core->seltab = 0;
../core/visual.c:				core->curtab = 0;
../core/visual.c:				if (core->printidx == R_CORE_VISUAL_MODE_PDDBG) {
../core/visual.c:					core->print->cur = 0;
../core/visual.c:					core->seltab++;
../core/visual.c:					if (core->seltab > 2) {
../core/visual.c:						core->seltab = 0;
../core/visual.c:					core->seltab = 0;
../core/visual.c:					ut64 f = r_config_get_i (core->config, "diff.from");
../core/visual.c:					ut64 t = r_config_get_i (core->config, "diff.to");
../core/visual.c:						core->print->col = core->print->col == 1? 2: 1;
../core/visual.c:						r_config_set_i (core->config, "diff.from", t);
../core/visual.c:						r_config_set_i (core->config, "diff.to", f);
../core/visual.c:				RAnalHint *hint = r_anal_hint_get (core->anal, core->offset);
../core/visual.c:				// const char *arch = r_config_get_i (core->config, "asm.arch");
../core/visual.c:				int bits = hint? hint->bits : r_config_get_i (core->config, "asm.bits");
../core/visual.c:				// TODO: Honor core->assembler->cur->bitsmask
../core/visual.c:			if (core->file && core->io && !(r_io_desc_get (core->io, core->file->fd)->flags & 2)) {
../core/visual.c:			int wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:				if (core->print->cur_enabled) {
../core/visual.c:					int t = core->offset + core->print->cur;
../core/visual.c:				if (core->print->cur_enabled) {
../core/visual.c:					int t = core->offset - core->print->cur;
../core/visual.c:			#define I core->cons
../core/visual.c:			const char *cmd = r_config_get (core->config, "cmd.vprompt");
../core/visual.c:			(void)r_config_set (core->config, "cmd.vprompt", buf);
../core/visual.c:			#define I core->cons
../core/visual.c:			const char *cmd = r_config_get (core->config, "cmd.cprompt");
../core/visual.c:				core->print->cur_enabled = true;
../core/visual.c:				core->print->cur = 0;
../core/visual.c:				(void)r_config_set (core->config, "cmd.cprompt", "p=e $r-2");
../core/visual.c:				(void)r_config_set (core->config, "cmd.cprompt", buf? buf: "");
../core/visual.c:			int wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:			int oc = core->print->cur_enabled;
../core/visual.c:			ut64 off = oc? core->offset + core->print->cur: core->offset;
../core/visual.c:			core->print->cur_enabled = 0;
../core/visual.c:			core->print->cur_enabled = oc;
../core/visual.c:			int wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:				splitPtr = core->offset;
../core/visual.c:			setcursor (core, !core->print->cur_enabled);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				core->print->cur = (st64) r_num_math (core->num, buf);
../core/visual.c:			r_config_set_i (core->config, "scr.color", color);
../core/visual.c:			if (r_config_get_i (core->config, "asm.esil")) {
../core/visual.c:				int wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:				if (core->print->ocur != -1) {
../core/visual.c:					min = R_MIN (core->print->cur, core->print->ocur);
../core/visual.c:					max = R_MAX (core->print->cur, core->print->ocur);
../core/visual.c:					min = max = core->print->cur;
../core/visual.c:					r_flag_unset_off (core->flags, core->offset + core->print->cur);
../core/visual.c:						r_core_cmdf (core, "f.-%s@0x%"PFMT64x, n + 1, core->offset + min);
../core/visual.c:						r_core_cmdf (core, "f.%s@0x%"PFMT64x, n + 1, core->offset + min);
../core/visual.c:						r_flag_unset_name (core->flags, n + 1);
../core/visual.c:						r_flag_set (core->flags, n,
../core/visual.c:							core->offset + min, range);
../core/visual.c:				if (r_config_get_i (core->config, "scr.interactive")) {
../core/visual.c:			r_core_seek_next (core, r_config_get (core->config, "scr.nkey"));
../core/visual.c:			r_core_seek_previous (core, r_config_get (core->config, "scr.nkey"));
../core/visual.c:				if (core->print->ocur == -1) {
../core/visual.c:					core->print->cur_enabled = true;
../core/visual.c:			if (PIDX == 2 && core->seltab == 1) {
../core/visual.c:					const char *creg = core->dbg->creg;
../core/visual.c:			if (core->file && core->io && !(r_io_desc_get (core->io, core->file->fd)->flags & 2)) {
../core/visual.c:				int cur = core->print->cur;
../core/visual.c:				if (cur >= core->blocksize) {
../core/visual.c:					cur = core->print->cur - 1;
../core/visual.c:					core->blocksize - core->print->cur);
../core/visual.c:			delta = (core->print->ocur != -1)? R_MIN (core->print->cur, core->print->ocur): core->print->cur;
../core/visual.c:			if (core->print->col == 2) {
../core/visual.c:				if (core->print->ocur != -1) {
../core/visual.c:					int bs = R_ABS (core->print->cur - core->print->ocur) + 1;
../core/visual.c:					core->blocksize = bs;
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				r_core_seek (core, core->offset + delta, 0);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:			if (r_config_get_i (core->config, "scr.randpal")) {
../core/visual.c:			if (!r_list_empty (core->fs->roots)) {
../core/visual.c:			if (core->print->ocur != -1) {
../core/visual.c:			if (r_config_get_i (core->config, "graph.web")) {
../core/visual.c:				RAnalFunction *fun = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/visual.c:				int ocolor = r_config_get_i (core->config, "scr.color");
../core/visual.c:				reset_print_cur (core->print);
../core/visual.c:				r_config_set_i (core->config, "scr.color", ocolor);
../core/visual.c:			if (core->io->va) {
../core/visual.c:				ut64 offset = r_io_section_get_paddr_at (core->io, 0LL);
../core/visual.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/visual.c:			int scols = r_config_get_i (core->config, "hex.cols");
../core/visual.c:			if (core->file) {
../core/visual.c:				if (core->io->va) {
../core/visual.c:					RIOSection *sec = r_io_section_get (core->io, 0LL);
../core/visual.c:						offset = r_io_fd_size (core->io, core->file->fd)
../core/visual.c:						- core->blocksize + 2 * scols;
../core/visual.c:						offset = r_io_fd_size (core->io, core->file->fd)
../core/visual.c:						- core->blocksize + 2 * scols;
../core/visual.c:						r_io_fd_size (core->io, core->file->fd)
../core/visual.c:						- core->blocksize + 2 * scols, 1);
../core/visual.c:				r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				if (r_config_get_i (core->config, "scr.wheelnkey")) {
../core/visual.c:					RAnalMetaItem *ami = r_meta_find (core->anal,
../core/visual.c:							core->offset, R_META_TYPE_DATA,
../core/visual.c:							if (isDisasmPrint (core->printidx)) {
../core/visual.c:									f = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/visual.c:									cols = core->offset - f->addr + r_anal_fcn_size (f);
../core/visual.c:									r_asm_set_pc (core->assembler, core->offset);
../core/visual.c:									cols = r_asm_disassemble (core->assembler,
../core/visual.c:											&op, core->block, 32);
../core/visual.c:							r_core_seek (core, core->offset + cols, 1);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				if (core->print->screen_bounds > 1 && core->print->screen_bounds >= core->offset) {
../core/visual.c:					ut64 addr = core->print->screen_bounds;
../core/visual.c:					if (core->print->screen_bounds == core->offset) {
../core/visual.c:						addr += r_asm_disassemble (core->assembler, &op, core->block, 32);
../core/visual.c:					r_core_seek (core, core->offset + obs, 1);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				if (r_config_get_i (core->config, "scr.wheelnkey")) {
../core/visual.c:						if (isDisasmPrint (core->printidx)) {
../core/visual.c:							RAnalFunction *f = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/visual.c:								cols = core->offset - f->addr; // + f->size;
../core/visual.c:								cols = prevopsz (core, core->offset);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				if (core->print->screen_bounds > 1 && core->print->screen_bounds > core->offset) {
../core/visual.c:					int delta = (core->print->screen_bounds - core->offset);
../core/visual.c:					if (core->offset >= delta) {
../core/visual.c:						r_core_seek (core, core->offset - delta, 1);
../core/visual.c:					ut64 at = (core->offset > obs)? core->offset - obs: 0;
../core/visual.c:					if (core->offset > obs) {
../core/visual.c:			if (core->print->cur_enabled &&
../core/visual.c:				(core->printidx == R_CORE_VISUAL_MODE_PD ||
../core/visual.c:				(core->printidx == R_CORE_VISUAL_MODE_PDDBG && core->seltab == 2))) {
../core/visual.c:				int cmtcol = r_config_get_i (core->config, "asm.cmtcol");
../core/visual.c:					r_config_set_i (core->config, "asm.cmtcol", cmtcol - 2);
../core/visual.c:			if ((core->printidx != R_CORE_VISUAL_MODE_PD && core->printidx != R_CORE_VISUAL_MODE_PDDBG) ||
../core/visual.c:				(core->printidx == R_CORE_VISUAL_MODE_PDDBG && core->seltab != 2)) {
../core/visual.c:				int scrcols = r_config_get_i (core->config, "hex.cols");
../core/visual.c:					r_config_set_i (core->config, "hex.cols", scrcols - 2);
../core/visual.c:			if (core->print->cur_enabled &&
../core/visual.c:				(core->printidx == R_CORE_VISUAL_MODE_PD ||
../core/visual.c:				(core->printidx == R_CORE_VISUAL_MODE_PDDBG && core->seltab == 2))) {
../core/visual.c:				int cmtcol = r_config_get_i (core->config, "asm.cmtcol");
../core/visual.c:				r_config_set_i (core->config, "asm.cmtcol", cmtcol + 2);
../core/visual.c:			if ((core->printidx != R_CORE_VISUAL_MODE_PD && core->printidx != R_CORE_VISUAL_MODE_PDDBG) ||
../core/visual.c:				(core->printidx == R_CORE_VISUAL_MODE_PDDBG && core->seltab != 2)) {
../core/visual.c:				int scrcols = r_config_get_i (core->config, "hex.cols");
../core/visual.c:				r_config_set_i (core->config, "hex.cols", scrcols + 2);
../core/visual.c:			key_s = r_config_get (core->config, "key.s");
../core/visual.c:			key_s = r_config_get (core->config, "key.S");
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:					obs = core->blocksize;
../core/visual.c:			if (core->print->ocur == -1) {
../core/visual.c:				r_core_yank (core, core->offset + core->print->cur, 1);
../core/visual.c:				r_core_yank (core, core->offset + ((core->print->ocur < core->print->cur) ?
../core/visual.c:					core->print->ocur: core->print->cur), R_ABS (core->print->cur - core->print->ocur) + 1);
../core/visual.c:			if (!core->yank_buf) {
../core/visual.c:				r_core_yank_paste (core, core->offset + core->print->cur, 0);
../core/visual.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				if (core->seltab == 0 && core->printidx == R_CORE_VISUAL_MODE_PDDBG) {
../core/visual.c:					int w = r_config_get_i (core->config, "hex.cols");
../core/visual.c:					r_config_set_i (core->config, "stack.size",
../core/visual.c:						r_config_get_i (core->config, "stack.size") - w);
../core/visual.c:					if (core->print->ocur == -1) {
../core/visual.c:						sprintf (buf, "wos 01 @ $$+%i!1",core->print->cur);
../core/visual.c:						sprintf (buf, "wos 01 @ $$+%i!%i", core->print->cur < core->print->ocur
../core/visual.c:							? core->print->cur
../core/visual.c:							: core->print->ocur,
../core/visual.c:							R_ABS (core->print->ocur - core->print->cur) + 1);
../core/visual.c:					r_core_block_size (core, core->blocksize - 1);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				if (core->seltab == 0 && core->printidx == R_CORE_VISUAL_MODE_PDDBG) {
../core/visual.c:					int w = r_config_get_i (core->config, "hex.cols");
../core/visual.c:					r_config_set_i (core->config, "stack.size",
../core/visual.c:						r_config_get_i (core->config, "stack.size") + w);
../core/visual.c:					if (core->print->ocur == -1) {
../core/visual.c:						sprintf (buf, "woa 01 @ $$+%i!1", core->print->cur);
../core/visual.c:						sprintf (buf, "woa 01 @ $$+%i!%i", core->print->cur < core->print->ocur
../core/visual.c:							? core->print->cur
../core/visual.c:							: core->print->ocur,
../core/visual.c:							R_ABS (core->print->ocur - core->print->cur) + 1);
../core/visual.c:					r_core_block_size (core, core->blocksize + 1);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:					r_core_block_size (core, core->blocksize - cols);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				r_core_cmdf (core, "dr PC=0x%08"PFMT64x, core->offset + core->print->cur);
../core/visual.c:				r_core_block_size (core, core->blocksize + cols);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				core->print->cur += (st64) r_num_math (core->num, buf);
../core/visual.c:				r_core_seek_align (core, core->blocksize, 1);
../core/visual.c:				r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				core->print->cur -= (st64) r_num_math (core->num, buf);
../core/visual.c:				r_core_seek_align (core, core->blocksize, -1);
../core/visual.c:				r_core_seek_align (core, core->blocksize, -1);
../core/visual.c:				r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/visual.c:			r_io_sundo_push (core->io, core->offset, r_print_get_cursor (core->print));
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				r_config_set_i (core->config, "stack.delta", 0);
../core/visual.c:				r_core_seek (core, core->offset + core->print->cur, 1);
../core/visual.c:				core->print->cur = 0;
../core/visual.c:				ut64 addr = r_debug_reg_get (core->dbg, "PC");
../core/visual.c:					ut64 entry = r_num_get (core->num, "entry0");
../core/visual.c:						RIOSection *s = r_io_section_vget (core->io, core->offset);
../core/visual.c:							RIOMap *map = ls_pop (core->io->maps);
../core/visual.c:								entry = r_config_get_i (core->config, "bin.baddr");
../core/visual.c:							ls_prepend (core->io->maps, map);
../core/visual.c:		case 'n': r_core_seek_delta (core, core->blocksize); break;
../core/visual.c:		case 'N': r_core_seek_delta (core, 0 - (int) core->blocksize); break;
../core/visual.c:				addr = orig = core->offset;
../core/visual.c:				if (core->print->cur_enabled) {
../core/visual.c:					addr += core->print->cur;
../core/visual.c:				if (core->print->cur_enabled) {
../core/visual.c:			ut64 addr = core->print->cur_enabled? core->offset + core->print->cur: core->offset;
../core/visual.c:			RIOUndos *undo = r_io_sundo (core->io, core->offset);
../core/visual.c:				core->print->cur = undo->cursor;
../core/visual.c:			RIOUndos *undo = r_io_sundo_redo (core->io);
../core/visual.c:				reset_print_cur (core->print);
../core/visual.c:			if (core->print->cur_enabled) {
../core/visual.c:				fcn = r_anal_get_fcn_in (core->anal,
../core/visual.c:					core->offset + core->print->cur, R_ANAL_FCN_TYPE_NULL);
../core/visual.c:				fcn = r_anal_get_fcn_in (core->anal,
../core/visual.c:					core->offset, R_ANAL_FCN_TYPE_NULL);
../core/visual.c:				r_config_toggle (core->config, "asm.cmtfold");
../core/visual.c:			if (zoom && core->print->cur) {
../core/visual.c:				ut64 from = r_config_get_i (core->config, "zoom.from");
../core/visual.c:				ut64 to = r_config_get_i (core->config, "zoom.to");
../core/visual.c:				r_core_seek (core, from + ((to - from) / core->blocksize) * core->print->cur, 1);
../core/visual.c:	const char *BEGIN = core->cons->pal.prompt;
../core/visual.c:		oldpc = r_debug_reg_get (core->dbg, "PC");
../core/visual.c:	int pc, hexcols = r_config_get_i (core->config, "hex.cols");
../core/visual.c:		switch (core->printidx) {
../core/visual.c:			r_core_block_size (core, core->cons->rows * hexcols * 3.5);
../core/visual.c:			r_core_block_size (core, core->cons->rows * hexcols * 3.5);
../core/visual.c:			r_core_block_size (core, core->cons->rows * hexcols);
../core/visual.c:			r_core_block_size (core, core->cons->rows * hexcols * 4);
../core/visual.c:			int bsize = core->cons->rows * 5;
../core/visual.c:			if (core->print->screen_bounds > 1) {
../core/visual.c:				int new_sz = core->print->screen_bounds - core->offset + 32;
../core/visual.c:			r_core_block_size (core, hexcols * core->cons->rows * 8);
../core/visual.c:	if (r_config_get_i (core->config, "scr.zoneflags")) {
../core/visual.c:	if (r_config_get_i (core->config, "cfg.debug")) {
../core/visual.c:		ut64 curpc = r_debug_reg_get (core->dbg, "PC");
../core/visual.c:			int follow = (int) (st64) r_config_get_i (core->config, "dbg.follow");
../core/visual.c:				if ((curpc < core->offset) || (curpc > (core->offset + follow))) {
../core/visual.c:	filename = (core->file && core->io) ? r_io_desc_get (core->io, core->file->fd)->name : "";
../core/visual.c:		ut64 addr = core->offset + (core->print->cur_enabled? core->print->cur: 0);
../core/visual.c:		bool oss = core->flags->space_strict;
../core/visual.c:		int osi = core->flags->space_idx;
../core/visual.c:		core->flags->space_strict = true;
../core/visual.c:		core->anal->flb.set_fs (core->flags, "symbols");
../core/visual.c:		if (core->flags->space_idx != -1) {
../core/visual.c:			f = core->anal->flb.get_at (core->flags, addr, false);
../core/visual.c:		core->flags->space_strict = oss;
../core/visual.c:		core->flags->space_idx = osi;
../core/visual.c:			f = r_flag_get_at (core->flags, addr, false);
../core/visual.c:		RFlagItem *f = r_flag_get_at (core->flags, addr, false);
../core/visual.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);
../core/visual.c:	if (core->print->cur < 0) {
../core/visual.c:		core->print->cur = 0;
../core/visual.c:	const char *cmd_visual = r_config_get (core->config, "cmd.visual");
../core/visual.c:		ut64 sz = r_io_size (core->io);
../core/visual.c:			RIOSection *s = r_io_section_vget (core->io, core->offset); 
../core/visual.c:			pa =  s ? core->offset - s->vaddr + s->paddr : core->offset;
../core/visual.c:			core->offset, core->print->cur);
../core/visual.c:		if (core->print->cur_enabled) {
../core/visual.c:				core->offset, pcs, core->blocksize,
../core/visual.c:				core->print->cur, core->print->ocur, core->print->ocur == -1 ?
../core/visual.c:				1: R_ABS (core->print->cur - core->print->ocur) + 1,
../core/visual.c:				core->offset, pcs, core->blocksize, filename, bar, pos);
../core/visual.c:	if (r_config_get_i (core->config, "scr.responsive")) {
../core/visual.c:			r_config_set_i (core->config, "asm.cmtright", 0);
../core/visual.c:			r_config_set_i (core->config, "asm.cmtright", 1);
../core/visual.c:			r_config_set_i (core->config, "hex.cols", w / 5.2);
../core/visual.c:			r_config_set_i (core->config, "hex.cols", 16);
../core/visual.c:			r_config_set_i (core->config, "asm.offset", 0);
../core/visual.c:			r_config_set_i (core->config, "asm.offset", 1);
../core/visual.c:			r_config_set_i (core->config, "asm.lineswidth", 14);
../core/visual.c:			r_config_set_i (core->config, "asm.lineswidth", w - (w / 1.2));
../core/visual.c:			r_config_set_i (core->config, "asm.cmtcol", w - (w / 2.5));
../core/visual.c:			r_config_set_i (core->config, "asm.lineswidth", 7);
../core/visual.c:			r_config_set_i (core->config, "asm.lineswidth", 1);
../core/visual.c:			r_config_set_i (core->config, "asm.bytes", 0);
../core/visual.c:			r_config_set_i (core->config, "asm.bytes", 1);
../core/visual.c:	r_print_set_cursor (core->print, core->print->cur_enabled, core->print->ocur, core->print->cur);
../core/visual.c:	core->cons->blankline = true;
../core/visual.c:	vi = r_config_get (core->config, "cmd.cprompt");
../core/visual.c:	bool ce = core->print->cur_enabled;
../core/visual.c:		core->cons->blankline = false;
../core/visual.c:			int hc = r_config_get_i (core->config, "hex.cols");
../core/visual.c:				if (!strncmp (vi, "p=", 2) && core->print->cur_enabled) {
../core/visual.c:					oseek = core->offset;
../core/visual.c:					core->print->cur_enabled = false;
../core/visual.c:					r_core_seek (core, core->num->value, 1);
../core/visual.c:		vi = r_config_get (core->config, "cmd.vprompt");
../core/visual.c:		vi = r_config_get (core->config, "cmd.vprompt");
../core/visual.c:	vcmd = r_config_get (core->config, "cmd.visual");
../core/visual.c:		core->print->screen_bounds = 0;
../core/visual.c:			const int ref = r_config_get_i (core->config, "dbg.slow");
../core/visual.c:			const int bytes = r_config_get_i (core->config, "stack.bytes");
../core/visual.c:			int h = r_num_get (core->num, "$r");
../core/visual.c:			switch (core->printidx) {
../core/visual.c:					switch (core->assembler->bits) {
../core/visual.c:					pxw, size, core->offset);
../core/visual.c:			core->print->screen_bounds = 1LL;
../core/visual.c:			core->print->screen_bounds = 1LL;
../core/visual.c:	core->print->cur_enabled = ce;
../core/visual.c:	if (core->print->screen_bounds != 1LL) {
../core/visual.c:			core->offset, core->print->screen_bounds);
../core/visual.c:	blocksize = core->num->value? core->num->value: core->blocksize;
../core/visual.c:	if (core->print->vflush) {
../core/visual.c:	core->cons->blankline = true;
../core/visual.c:	core->curtab = 0; // which command are we focusing
../core/visual.c:	//core->seltab = 0; // user selected tab
../core/visual.c:	obs = core->blocksize;
../core/visual.c:	core->vmode = false;
../core/visual.c:	core->vmode = true;
../core/visual.c:	core->print->flags |= R_PRINT_FLAGS_ADDRMOD;
../core/visual.c:		const int ref = r_config_get_i (core->config, "dbg.slow");
../core/visual.c:		const int bytes = r_config_get_i (core->config, "stack.bytes");
../core/visual.c:		if (printfmt == printfmtSingle && core->printidx == R_CORE_VISUAL_MODE_PDDBG) {
../core/visual.c:			const int pxa = r_config_get_i (core->config, "stack.anotated"); // stack.anotated
../core/visual.c:			const int size = r_config_get_i (core->config, "stack.size");
../core/visual.c:			const int delta = r_config_get_i (core->config, "stack.delta");
../core/visual.c:			const char *cmdvhex = r_config_get (core->config, "cmd.stack");
../core/visual.c:					switch (core->assembler->bits) {
../core/visual.c:		wheel = r_config_get_i (core->config, "scr.wheel");
../core/visual.c:		core->cons->event_data = core;
../core/visual.c:		core->cons->event_resize = (RConsEvent) visual_refresh;
../core/visual.c:		flags = core->print->flags;
../core/visual.c:		color = r_config_get_i (core->config, "scr.color");
../core/visual.c:		debug = r_config_get_i (core->config, "cfg.debug");
../core/visual.c:		r_print_set_flags (core->print, core->print->flags);
../core/visual.c:		scrseek = r_num_math (core->num,
../core/visual.c:			r_config_get (core->config, "scr.seek"));
../core/visual.c:		cmdprompt = r_config_get (core->config, "cmd.vprompt");
../core/visual.c:		core->print->vflush = !skip;
../core/visual.c:	r_config_set_i (core->config, "scr.color", color);
../core/visual.c:	core->print->cur_enabled = false;
../core/visual.c:	core->vmode = false;
../core/visual.c:	core->cons->event_resize = NULL;
../core/visual.c:	core->cons->event_data = NULL;
../core/vmarks.c:	r_core_visual_mark_set (core, ch, core->offset);
../core/vmenus.c:	return sdb_get (vt->core->anal->sdb_types,
../core/vmenus.c:	bool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/vmenus.c:	const char *color_num = core->cons->pal.num;
../core/vmenus.c:	const char *color_reg = core->cons->pal.reg;
../core/vmenus.c:		scol1 = r_print_colorize_opcode (core->print, s1, color_reg, color_num, false);
../core/vmenus.c:		scol2 = r_print_colorize_opcode (core->print, s2, color_reg, color_num, false);
../core/vmenus.c:	res = r_str_append (res, r_print_color_op_type (core->print, optype));
../core/vmenus.c:	tmp = r_print_colorize_opcode (core->print, source, color_reg, color_num, false);
../core/vmenus.c:	if (core->blocksize < sizeof (ut64)) {
../core/vmenus.c:	memcpy (buf, core->block, sizeof (ut64));
../core/vmenus.c:	esil->anal = core->anal;
../core/vmenus.c:	r_anal_esil_set_pc (esil, core->offset);
../core/vmenus.c:		// bool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/vmenus.c:		(void) r_asm_disassemble (core->assembler, &asmop, buf, sizeof (ut64));
../core/vmenus.c:		(void)r_anal_op (core->anal, &analop, core->offset, buf, sizeof (ut64));
../core/vmenus.c:			char *res = r_print_hexpair (core->print, asmop.buf_hex, -1);
../core/vmenus.c:	if (core->blocksize < sizeof (ut64)) {
../core/vmenus.c:	memcpy (buf, core->block, sizeof (ut64));
../core/vmenus.c:		bool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/vmenus.c:		(void) r_asm_disassemble (core->assembler, &asmop, buf, sizeof (ut64));
../core/vmenus.c:		(void)r_anal_op (core->anal, &analop, core->offset, buf, sizeof (ut64));
../core/vmenus.c:			char *res = r_print_hexpair (core->print, asmop.buf_hex, -1);
../core/vmenus.c:				r_cons_printf (" %5s'%s%c"Color_RESET"'", " ", core->cons->pal.btext, ch);
../core/vmenus.c:			r_cons_print (core->cons->pal.b0x7f);
../core/vmenus.c:				ut64 num = r_num_math (core->num, line);
../core/vmenus.c:			if (r_config_get_i (core->config, "scr.randpal")) {
../core/vmenus.c:	bool use_color = vt->core->print->flags & R_PRINT_FLAGS_COLOR;
../core/vmenus.c:	bool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;
../core/vmenus.c:		if (core->flags->spaces[i]) {
../core/vmenus.c:                sdb_foreach (core->anal->sdb_types, sdbforcb, &vt);
../core/vmenus.c:					if (core->flags->spaces[i]) {
../core/vmenus.c:	RList *classes = r_bin_get_classes (core->bin);
../core/vmenus.c:	r_list_foreach (core->flags->flags, iter, flag) {
../core/vmenus.c:	sdb_foreach (core->anal->sdb_meta, cmtcb, list);
../core/vmenus.c:	r_list_foreach (core->config->nodes, iter, bt) {
../core/vmenus.c:		oldvalue = r_config_get (core->config, res);
../core/vmenus.c:		r_config_set (core->config, res, cmd);
../core/vmenus.c:	bool show_color = r_config_get_i (core->config, "scr.color");
../core/vmenus.c:						i, core->cons->pal.offset, c->addr, c->name);
../core/vmenus.c:						i, core->cons->pal.offset, m->vaddr, mflags, name);
../core/vmenus.c:	RList *list = r_bin_get_classes (core->bin);
../core/vmenus.c:			r_config_toggle (core->config, "scr.color");
../core/vmenus.c:		if (core->flags->spaces[i]) {
../core/vmenus.c:			(core->flags->space_idx==-1)?"*":core->flags->spaces[core->flags->space_idx]);
../core/vmenus.c:			r_list_foreach (core->flags->flags, iter, flag) {
../core/vmenus.c:				if ((core->flags->space_idx != -1) &&
../core/vmenus.c:					(flag->space != core->flags->space_idx)) {
../core/vmenus.c:				case 0: snprintf (cmd, sizeof (cmd), "px %d @ %s!64", rows*16, fs2); core->printidx = 0; break;
../core/vmenus.c:				case 1: snprintf (cmd, sizeof (cmd), "pd %d @ %s!64", rows, fs2); core->printidx = 1; break;
../core/vmenus.c:				case 2: snprintf (cmd, sizeof (cmd), "ps @ %s!64", fs2); core->printidx = 5; break;
../core/vmenus.c:				if (core->flags->spaces[i]) {
../core/vmenus.c:						fs = core->flags->spaces[i];
../core/vmenus.c:							(i==core->flags->space_idx)?'*':' ',
../core/vmenus.c:							core->flags->spaces[i]);
../core/vmenus.c:			if (core->flags->spaces[9]) {
../core/vmenus.c:					(i==core->flags->space_idx)?'*':' ',
../core/vmenus.c:			r_config_toggle (core->config, "scr.color");
../core/vmenus.c:		case 'o': r_flag_sort (core->flags, 0); break;
../core/vmenus.c:		case 'n': r_flag_sort (core->flags, 1); break;
../core/vmenus.c:					if (core->flags->spaces[i]) {
../core/vmenus.c:			r_flag_unset_name (core->flags, fs2);
../core/vmenus.c:			r_core_block_size (core, core->blocksize+16);
../core/vmenus.c:			r_core_block_size (core, core->blocksize-16);
../core/vmenus.c:			else r_core_block_size (core, core->blocksize+1);
../core/vmenus.c:				r_core_block_size (core, core->blocksize-1);
../core/vmenus.c:			r_flag_space_set (core->flags, fs);
../core/vmenus.c:#define DB core->anal->sdb_meta
../core/vmenus.c:		case 0: sprintf (cmd, "px @ 0x%"PFMT64x":64", from); core->printidx = 0; break;
../core/vmenus.c:		case 1: sprintf (cmd, "pd 12 @ 0x%"PFMT64x":64", from); core->printidx = 1; break;
../core/vmenus.c:		case 2: sprintf (cmd, "ps @ 0x%"PFMT64x":64", from); core->printidx = 5; break;
../core/vmenus.c:				r_meta_del (core->anal, R_META_TYPE_ANY, from, size);
../core/vmenus.c:	node = r_config_node_get (core->config, name);
../core/vmenus.c:		int hitDelta = r_config_get_i (core->config, name) + delta;
../core/vmenus.c:		(void) r_config_set_i (core->config, name, hitDelta);
../core/vmenus.c:	if (!(node = r_config_node_get (core->config, name))) {
../core/vmenus.c:		r_config_set_i (core->config, name, node->i_value? 0:1);
../core/vmenus.c:			r_config_set (core->config, name, buf);
../core/vmenus.c:			r_list_foreach (core->config->nodes, iter, bt) {
../core/vmenus.c:			r_list_foreach (core->config->nodes, iter, bt) {
../core/vmenus.c:			list = r_fs_partitions (core->fs, n, 0);
../core/vmenus.c:			r_list_foreach (core->fs->roots, iter, fsroot) {
../core/vmenus.c:				list = r_fs_dir (core->fs, path);
../core/vmenus.c:			list = r_fs_dir (core->fs, path);
../core/vmenus.c:					list = r_fs_partitions (core->fs, n, 0);
../core/vmenus.c:						if (r_fs_mount (core->fs, p, "/root", part->start)) {
../core/vmenus.c:					list = r_fs_dir (core->fs, path);
../core/vmenus.c:							r_fs_umount (core->fs, root);
../core/vmenus.c:					fsroot = r_list_get_n (core->fs->roots, option);
../core/vmenus.c:					list = r_fs_partitions (core->fs, n, 0);
../core/vmenus.c:					if (option < r_list_length (core->fs->roots)-1)
../core/vmenus.c:					list = r_fs_dir (core->fs, path);
../core/vmenus.c:						r_fs_umount (core->fs, root);
../core/vmenus.c:					r_fs_umount (core->fs, root);
../core/vmenus.c:					list = r_fs_dir (core->fs, path);
../core/vmenus.c:						file = r_fs_open (core->fs, path);
../core/vmenus.c:							r_fs_read (core->fs, file, 0, file->size);
../core/vmenus.c:							r_fs_close (core->fs, file);
../core/vmenus.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/vmenus.c:			r_flag_unset_name (core->flags, fcn->name);
../core/vmenus.c:			r_flag_set (core->flags, name, addr, r_anal_fcn_size (fcn));
../core/vmenus.c:	RAnalFunction* fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/vmenus.c:	ut64 a_tmp = core->offset;
../core/vmenus.c:	RList* list2 = r_anal_var_list (core->anal, fcn, true);
../core/vmenus.c:	RList* list = r_anal_var_list (core->anal, fcn, false);
../core/vmenus.c:	ut64 seek = core->offset;
../core/vmenus.c:	ut64 addr = core->offset;
../core/vmenus.c:	r_list_foreach (core->anal->fcns, iter, fcn) {
../core/vmenus.c:	RAnalFunction* fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/vmenus.c:	RList* list2 = r_anal_var_list (core->anal, fcn, true);
../core/vmenus.c:	RList* list = r_anal_var_list (core->anal, fcn, false);
../core/vmenus.c:						core->anal->reg->name[R_REG_NAME_BP],
../core/vmenus.c:		? core->offset
../core/vmenus.c:	// RAnalFunction* fcn = r_anal_get_fcn_in(core->anal, addr, R_ANAL_FCN_TYPE_NULL);
../core/vmenus.c:	addr = core->offset;
../core/vmenus.c:		// var_index_show (core->anal, fcn, addr, option);
../core/vmenus.c:	int nfcns = r_list_length (core->anal->fcns);
../core/vmenus.c:	RConsEvent olde = core->cons->event_resize;
../core/vmenus.c:	core->cons->event_resize = (RConsEvent) r_core_visual_anal_refresh;
../core/vmenus.c:	addr = core->offset;
../core/vmenus.c:	int asmbytes = r_config_get_i (core->config, "asm.bytes");
../core/vmenus.c:	r_config_set_i (core->config, "asm.bytes", 0);
../core/vmenus.c:				addr = r_num_math (core->num, old);
../core/vmenus.c:				size = r_num_math (core->num, old);
../core/vmenus.c:				r_flag_set (core->flags, old, addr, 0, 0);
../core/vmenus.c:	core->cons->event_resize = olde;
../core/vmenus.c:	r_config_set_i (core->config, "asm.bytes", asmbytes);
../core/vmenus.c:		if (r_anal_op (core->anal, &aop, core->offset, core->block, core->blocksize)) {
../core/vmenus.c:			next = core->offset + aop.size;
../core/vmenus.c:		r_list_foreach (core->anal->fcns, iter, fcni) {
../core/vmenus.c:			if (fcni->addr < next && fcni->addr > core->offset) {
../core/vmenus.c:		const char *pfx = r_config_get (core->config, "search.prefix");
../core/vmenus.c:		r_list_foreach (core->flags->flags, iter, flag) {
../core/vmenus.c:				if (flag->offset < next && flag->offset > core->offset)
../core/vmenus.c:		r_list_foreach (core->flags->flags, iter, flag) {
../core/vmenus.c:			if (flag->offset < next && flag->offset > core->offset)
../core/vmenus.c:		r_list_foreach (core->anal->fcns, iter, fcni) {
../core/vmenus.c:			if (fcni->addr > next && fcni->addr < core->offset)
../core/vmenus.c:		const char *pfx = r_config_get (core->config, "search.prefix");
../core/vmenus.c:		r_list_foreach (core->flags->flags, iter, flag) {
../core/vmenus.c:				if (flag->offset > next && flag->offset< core->offset)
../core/vmenus.c:		r_list_foreach (core->flags->flags, iter, flag) {
../core/vmenus.c:			if (flag->offset > next && flag->offset < core->offset)
../core/vmenus.c:	r_meta_cleanup (core->anal, off, off + core->blocksize);
../core/vmenus.c:		r_meta_add (core->anal, R_META_TYPE_DATA, off, off + type, "");
../core/vmenus.c:				r_anal_hint_set_bits (core->anal, core->offset, bits);
../core/vmenus.c:	int plen = core->blocksize;
../core/vmenus.c:	ut64 off = core->offset;
../core/vmenus.c:	ut8 *p = core->block;
../core/vmenus.c:	if (core->print->cur_enabled) {
../core/vmenus.c:		int cur = core->print->cur;
../core/vmenus.c:		if (core->print->ocur != -1) {
../core/vmenus.c:			plen = R_ABS (core->print->cur- core->print->ocur)+1;
../core/vmenus.c:			if (core->print->ocur<cur) {
../core/vmenus.c:				cur = core->print->ocur;
../core/vmenus.c:		if (plen != core->blocksize) {
../core/vmenus.c:		if (plen != core->blocksize) {
../core/vmenus.c:		if (plen != core->blocksize) {
../core/vmenus.c:		if (plen != core->blocksize) {
../core/vmenus.c:					RFlagItem *item = r_flag_get_i (core->flags, op->jump);
../core/vmenus.c:		if (!isDisasmPrint (core->printidx)) {
../core/vmenus.c:		r_anal_op (core->anal, &op, off,
../core/vmenus.c:			core->block + off - core->offset, 32);
../core/vmenus.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, off, 0);
../core/vmenus.c:				RAnalVar *bar = r_anal_var_get_byname (core->anal, fcn, op.var->name);
../core/vmenus.c:					bar = r_anal_var_get_byname (core->anal, fcn, op.var->name);
../core/vmenus.c:						bar = r_anal_var_get_byname (core->anal, fcn, op.var->name);
../core/vmenus.c:							r_anal_var_rename (core->anal, fcn->addr, bar->scope,
../core/vmenus.c:			RAnalFunction *fcn = r_anal_get_fcn_at (core->anal, tgt_addr, R_ANAL_FCN_TYPE_NULL);
../core/vmenus.c:			RFlagItem *f = r_flag_get_i (core->flags, tgt_addr);
../core/vmenus.c:			RFlagItem *item = r_flag_get_i (core->flags, off);
../core/vmenus.c:					r_flag_color (core->flags, item, cmd);
../core/vmenus.c:			RFlagItem *item = r_flag_get_i (core->flags, off);
../core/vmenus.c:					item->size = r_num_math (core->num, cmd);
../core/vmenus.c:		RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, off, 0);
../core/vmenus.c:			fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/vmenus.c:			if (r_anal_op (core->anal, &op, off, core->block+delta,
../core/vmenus.c:					core->blocksize-delta)) {
../core/vmenus.c:				r_meta_add (core->anal, R_META_TYPE_STRING,
../core/vmenus.c:				r_meta_add (core->anal, R_META_TYPE_STRING,
../core/vmenus.c:			r_flag_set (core->flags, name, off+ntotal, n);
../core/vmenus.c:		if (core->print->ocur != -1) {
../core/vmenus.c:			r_meta_add (core->anal, R_META_TYPE_STRING, off,
../core/vmenus.c:			r_meta_add (core->anal, R_META_TYPE_STRING, off,
../core/vmenus.c:		r_flag_set (core->flags, name, off, n);
../core/vmenus.c:		r_meta_cleanup (core->anal, off, off+plen);
../core/vmenus.c:		r_meta_add (core->anal, R_META_TYPE_DATA, off, off+plen, "");
../core/vmenus.c:		r_meta_cleanup (core->anal, off, off+plen);
../core/vmenus.c:		r_meta_add (core->anal, R_META_TYPE_CODE, off, off+plen, "");
../core/vmenus.c:			RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);
../core/vmenus.c:				r_anal_fcn_resize (fcn, core->offset - fcn->addr);
../core/vmenus.c:			//int depth = r_config_get_i (core->config, "anal.depth");
../core/vmenus.c:			if (core->print->cur_enabled) {
../core/vmenus.c:				if (core->print->ocur != -1) {
../core/vmenus.c:					funsize = 1 + R_ABS (core->print->cur - core->print->ocur);
../core/vmenus.c:				RAnalFunction *f = r_anal_get_fcn_in (core->anal, off, -1);
../core/yank.c:	ut64 fd = core->file? core->file->fd: -1, yank_file_sz = 0,
../core/yank.c:		ut64 load_align = r_config_get_i (core->config, "file.loadalign");
../core/yank.c:		yankdesc = r_io_open_nomap (core->io, filename, R_IO_READ, 0644);
../core/yank.c:			yank_file_sz = r_io_size (core->io);
../core/yank.c:			map = r_io_map_add_next_available (core->io, yankdesc->fd, R_IO_READ, 0, 0, yank_file_sz, load_align);
../core/yank.c:		ut64 res = r_io_seek (core->io, addr, R_IO_SEEK_SET);
../core/yank.c:			if (!r_io_read_at (core->io, addr, buf, actual_len)) {
../core/yank.c:		r_io_use_fd (core->io, fd);
../core/yank.c:		core->switch_file_view = 1;
../core/yank.c:	// free (core->yank_buf);
../core/yank.c:		r_buf_set_bytes (core->yank_buf, buf, len);
../core/yank.c:		core->yank_buf->base = addr;
../core/yank.c:	// free (core->yank_buf);
../core/yank.c:		core->yank_buf->buf[len - 1] = 0;
../core/yank.c:	ut64 curseek = core->offset;
../core/yank.c:		len = core->blocksize;
../core/yank.c:	if (addr != core->offset) {
../core/yank.c:	ut64 curseek = core->offset;
../core/yank.c:	if (addr != core->offset) {
../core/yank.c:	buf = calloc (1, core->blocksize + 1);
../core/yank.c:	buf[core->blocksize] = 0;
../core/yank.c:	r_core_read_at (core, addr, buf, core->blocksize);
../core/yank.c:		maxlen = r_str_nlen ((const char *) buf, core->blocksize);
../core/yank.c:	} else if (maxlen > core->blocksize) {
../core/yank.c:		maxlen = core->blocksize;
../core/yank.c:	if (len == 0 || len >= core->yank_buf->length) {
../core/yank.c:		len = core->yank_buf->length;
../core/yank.c:	r_core_write_at (core, addr, core->yank_buf->buf, len);
../core/yank.c:		len = r_num_math (core->num, arg);
../core/yank.c:		pos = r_num_math (core->num, str + 1);
../core/yank.c:	if (r_core_yank (core, core->offset, len) == true) {
../core/yank.c:	int ybl = core->yank_buf->length;
../core/yank.c:				core->yank_buf->base + pos,
../core/yank.c:				core->yank_buf->length - pos);
../core/yank.c:			for (i = pos; i < core->yank_buf->length; i++) {
../core/yank.c:					core->yank_buf->buf[i]);
../core/yank.c:	int ybl = core->yank_buf->length;
../core/yank.c:			r_print_hexdump (core->print, pos,
../core/yank.c:				core->yank_buf->buf + pos,
../core/yank.c:	int ybl = core->yank_buf->length;
../core/yank.c:			r_cons_memcat ((const char *) core->yank_buf->buf + pos,
../core/yank.c:				core->yank_buf->length - pos);
../core/yank.c:	int ybl = core->yank_buf->length;
../core/yank.c:			int len = r_str_nlen ((const char *) core->yank_buf->buf + pos, ybl - pos);
../core/yank.c:			r_cons_memcat ((const char *) core->yank_buf->buf + pos, len);
../core/yank.c:	len = r_num_math (core->num, input + adv);
../core/yank.c:	addr = r_num_math (core->num, input + adv);
../debug/debug.c:			RNum *num = core->num;
../debug/trace.c:	//if (tag>0 && tag<31) core->dbg->trace->tag = 1<<(sz-1);
../include/r_core.h:#define R_CONS_COLOR_DEF(x, def) ((core->cons && core->cons->pal.x)? core->cons->pal.x: def)
../include/r_core.h:#define PIDX (R_ABS (core->printidx % NPF))
../include/r_heap_glibc.h:#define SZ core->dbg->bits
../threads:core/anal_tp.c:	r_reg_setv (core->dbg->reg, pc, fcn->addr);
../threads:core/anal_tp.c:			r_reg_setv (core->dbg->reg, pc, addr);
../threads:core/anal_tp.c:			r_reg_setv (core->dbg->reg, pc, addr);
../threads:core/canal.c:	if (core->dbg && core->dbg->reg) {
../threads:core/canal.c:		rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../threads:core/canal.c:				ut64 val = r_reg_getv(core->dbg->reg, r->name);
../threads:core/canal.c:		r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cconfig.c:	core->dbg->hitinfo = node->i_value;
../threads:core/cconfig.c:	core->dbg->bpsize = node->i_value;
../threads:core/cconfig.c:	core->dbg->btdepth = node->i_value;
../threads:core/cconfig.c:			if (core->dbg->h && core->dbg->h->reg_profile) {
../threads:core/cconfig.c:				core->dbg->bits = R_SYS_BITS_32;
../threads:core/cconfig.c:				core->dbg->bits = R_SYS_BITS_64;
../threads:core/cconfig.c:				char *rp = core->dbg->h->reg_profile (core->dbg);
../threads:core/cconfig.c:				r_reg_set_profile_string (core->dbg->reg, rp);
../threads:core/cconfig.c:			r_bp_use (core->dbg->bp, asmarch, core->anal->bits);
../threads:core/cconfig.c:	core->dbg->bp->endian = isbig;
../threads:core/cconfig.c:			r_debug_select (core->dbg, core->dbg->pid,
../threads:core/cconfig.c:					core->dbg->tid);
../threads:core/cconfig.c:		if (core->dbg && core->dbg->h) {
../threads:core/cconfig.c:			ioraw = core->dbg->h->keepio? 0: 1;
../threads:core/cconfig.c:	free (core->dbg->btalgo);
../threads:core/cconfig.c:	core->dbg->btalgo = strdup (node->value);
../threads:core/cconfig.c:	free (core->dbg->glob_libs);
../threads:core/cconfig.c:	core->dbg->glob_libs = strdup (node->value);
../threads:core/cconfig.c:	free (core->dbg->glob_unlibs);
../threads:core/cconfig.c:	core->dbg->glob_unlibs = strdup (node->value);
../threads:core/cconfig.c:	core->dbg->trace_forks = node->i_value;
../threads:core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../threads:core/cconfig.c:	core->dbg->trace_execs = node->i_value;
../threads:core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../threads:core/cconfig.c:	core->dbg->trace_clone = node->i_value;
../threads:core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../threads:core/cconfig.c:	core->dbg->trace_aftersyscall = node->i_value;
../threads:core/cconfig.c:		r_debug_attach (core->dbg, core->dbg->pid);
../threads:core/cconfig.c:	core->dbg->regcols = c/4;
../threads:core/cconfig.c:	core->dbg->regcols = n / 20;
../threads:core/cconfig.c:	core->dbg->stop_all_threads = node->i_value;
../threads:core/cconfig.c:	core->dbg->swstep = node->i_value;
../threads:core/cconfig.c:	core->dbg->consbreak = node->i_value;
../threads:core/cconfig.c:	core->dbg->trace->enabled = node->i_value;
../threads:core/cconfig.c:	core->dbg->trace->tag = node->i_value;
../threads:core/cconfig.c:	node->i_value = core->dbg->swstep;
../threads:core/cmd.c:			int pid = core->dbg->pid;
../threads:core/cmd.c:			if (core->dbg->h && core->dbg->h->pids) {
../threads:core/cmd.c:				RList *list = core->dbg->h->pids (core->dbg, R_MAX (0, pid));
../threads:core/cmd_anal.c:	RReg *hack = core->dbg->reg;
../threads:core/cmd_anal.c:	core->dbg->reg = core->anal->reg;
../threads:core/cmd_anal.c:	core->dbg->reg = hack;
../threads:core/cmd_anal.c:		ut8 *buf = r_reg_get_bytes (core->dbg->reg, type, &len);
../threads:core/cmd_anal.c:				r = r_reg_cond_get (core->dbg->reg, name);
../threads:core/cmd_anal.c:					RRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../threads:core/cmd_anal.c:						int o = r_reg_cond_bits (core->dbg->reg, id, rf);
../threads:core/cmd_anal.c:				RRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../threads:core/cmd_anal.c:								r_reg_cond_bits (core->dbg->reg, i, rf));
../threads:core/cmd_anal.c:								r_reg_cond_bits (core->dbg->reg, i, rf),
../threads:core/cmd_anal.c:			r_reg_arena_pop (core->dbg->reg);
../threads:core/cmd_anal.c:			r_reg_arena_push (core->dbg->reg);
../threads:core/cmd_anal.c:						core->dbg->reg->regset[0].pool));
../threads:core/cmd_anal.c:		name = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (str + 2));
../threads:core/cmd_anal.c:		r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_anal.c:		r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_anal.c:			r = r_reg_get (core->dbg->reg, regname, -1);
../threads:core/cmd_anal.c:					const char *alias = r_reg_get_name (core->dbg->reg, type);
../threads:core/cmd_anal.c:					r = r_reg_get (core->dbg->reg, alias, -1);
../threads:core/cmd_anal.c:				//	r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_anal.c:				r_reg_set_value (core->dbg->reg, r,
../threads:core/cmd_anal.c:				//	r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_anal.c:			r = r_reg_get (core->dbg->reg, str + 1, -1);
../threads:core/cmd_anal.c:					off = r_reg_get_value_big (core->dbg->reg, r, &value);
../threads:core/cmd_anal.c:					off = r_reg_get_value (core->dbg->reg, r);
../threads:core/cmd_anal.c:		if (core->dbg->trace->enabled) {
../threads:core/cmd_anal.c:			RReg *reg = core->dbg->reg;
../threads:core/cmd_anal.c:			core->dbg->reg = core->anal->reg;
../threads:core/cmd_anal.c:			core->dbg->reg = reg;
../threads:core/cmd_anal.c:	sp = r_reg_get_name (core->dbg->reg, R_REG_NAME_SP);
../threads:core/cmd_anal.c:	sp = r_reg_get_name (core->dbg->reg, R_REG_NAME_BP);
../threads:core/cmd_anal.c:		eprintf ("Current Tag: %d\n", core->dbg->trace->tag);
../threads:core/cmd_anal.c:		r_debug_trace_free (core->dbg->trace);
../threads:core/cmd_anal.c:		core->dbg->trace = r_debug_trace_new ();
../threads:core/cmd_debug.c:	r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:	if (!core || !esilstr || !core->dbg || !core->dbg->anal \
../threads:core/cmd_debug.c:			|| !core->dbg->anal->esil) {
../threads:core/cmd_debug.c:		eprintf ("Selected: %d %d\n", core->dbg->pid, core->dbg->tid);
../threads:core/cmd_debug.c:		r_debug_pid_list (core->dbg, core->dbg->pid, 0);
../threads:core/cmd_debug.c:			r_debug_detach (core->dbg, core->dbg->pid);
../threads:core/cmd_debug.c:		if (core->dbg->forked_pid != -1) {
../threads:core/cmd_debug.c:				eprintf ("dp %d\n", core->dbg->forked_pid);
../threads:core/cmd_debug.c:				r_debug_select (core->dbg, core->dbg->forked_pid, core->dbg->tid);
../threads:core/cmd_debug.c:				core->dbg->forked_pid = -1;
../threads:core/cmd_debug.c:				r_debug_thread_list (core->dbg, core->dbg->pid);
../threads:core/cmd_debug.c:				r_debug_select (core->dbg, core->dbg->pid,
../threads:core/cmd_debug.c:		r_debug_select (core->dbg, core->dbg->pid, core->dbg->tid);
../threads:core/cmd_debug.c:				(core->dbg->h && !core->dbg->h->canstep));
../threads:core/cmd_debug.c:		r_core_cmdf (core, "=!pid %d", core->dbg->pid);
../threads:core/cmd_debug.c:			r_debug_select (core->dbg, core->file->desc->fd, core->dbg->tid);
../threads:core/cmd_debug.c:				(int) r_num_math (core->num, input + 2), core->dbg->tid);
../threads:core/cmd_debug.c:		r_debug_pid_list (core->dbg, core->dbg->pid, 'j');
../threads:core/cmd_debug.c:			int pid = (input[2] == ' ')? atoi (input + 2): core->dbg->pid;
../threads:core/cmd_debug.c:		r_bp_traptrace_list (core->dbg->bp);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_bp_traptrace_reset (core->dbg->bp, true);
../threads:core/cmd_debug.c:		r_bp_traptrace_add (core->dbg->bp, core->offset, core->offset+len);
../threads:core/cmd_debug.c:		r_bp_traptrace_enable (core->dbg->bp, true);
../threads:core/cmd_debug.c:		} while (r_bp_traptrace_at (core->dbg->bp, addr, analop.size));
../threads:core/cmd_debug.c:		r_bp_traptrace_enable (core->dbg->bp, false);
../threads:core/cmd_debug.c:	int ret = r_list_empty(core->dbg->maps)? false: true;
../threads:core/cmd_debug.c:	r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:		r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:				r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:		r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:			r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:		r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:		value = r_reg_get_value (core->dbg->reg, r);
../threads:core/cmd_debug.c:		if (core->dbg->reg->reg_profile_str) {
../threads:core/cmd_debug.c:			r_cons_println (core->dbg->reg->reg_profile_str);
../threads:core/cmd_debug.c:		r_reg_set_profile (core->dbg->reg, str+2);
../threads:core/cmd_debug.c:			RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../threads:core/cmd_debug.c:			RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../threads:core/cmd_debug.c:			RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../threads:core/cmd_debug.c:				if (core->dbg->reg->name[i]) {
../threads:core/cmd_debug.c:							core->dbg->reg->name[i]);
../threads:core/cmd_debug.c:				r_list_foreach (core->dbg->reg->regset[i].regs, iter, r) {
../threads:core/cmd_debug.c:	int bits = (core->dbg->bits & R_SYS_BITS_64)? 64: 32;
../threads:core/cmd_debug.c:		if (core->dbg->reg->reg_profile_cmt) {
../threads:core/cmd_debug.c:			r_cons_println (core->dbg->reg->reg_profile_cmt);
../threads:core/cmd_debug.c:			//		r = r_reg_get (core->dbg->reg, str+1, 0);
../threads:core/cmd_debug.c:			//r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_debug.c:			RRegSet *rs = r_reg_regset_get (core->dbg->reg, R_REG_TYPE_GPR);
../threads:core/cmd_debug.c:			ut8 *buf = r_reg_get_bytes (core->dbg->reg, type, &len);
../threads:core/cmd_debug.c:				r = r_reg_cond_get (core->dbg->reg, name);
../threads:core/cmd_debug.c:					RRegFlags* rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../threads:core/cmd_debug.c:						int o = r_reg_cond_bits (core->dbg->reg, id, rf);
../threads:core/cmd_debug.c:				RRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);
../threads:core/cmd_debug.c:									r_reg_cond_bits (core->dbg->reg, i, rf));
../threads:core/cmd_debug.c:									r_reg_cond_bits (core->dbg->reg, i, rf),
../threads:core/cmd_debug.c:						core->dbg->reg->regset[0].pool));
../threads:core/cmd_debug.c:			r_reg_arena_pop (core->dbg->reg);
../threads:core/cmd_debug.c:			r_reg_arena_push (core->dbg->reg);
../threads:core/cmd_debug.c:			RRegItem *item = r_reg_get (core->dbg->reg, name, -1);
../threads:core/cmd_debug.c:					r_reg_set_pack (core->dbg->reg, item, word, size, val);
../threads:core/cmd_debug.c:					ut64 res = r_reg_get_pack (core->dbg->reg, item, word, size);
../threads:core/cmd_debug.c:			RRegItem *item = r_reg_get (core->dbg->reg, name, -1);
../threads:core/cmd_debug.c:					r_reg_set_double (core->dbg->reg, item, val);
../threads:core/cmd_debug.c:					long double res = r_reg_get_double (core->dbg->reg, item);
../threads:core/cmd_debug.c:					const char *regname = r_reg_get_name (core->dbg->reg, role);
../threads:core/cmd_debug.c:							size = core->dbg->bits * 8;
../threads:core/cmd_debug.c:			name = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (foo));
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_debug.c:				} //else eprintf ("Cannot retrieve registers from pid %d\n", core->dbg->pid);
../threads:core/cmd_debug.c:				RReg *orig = core->dbg->reg;
../threads:core/cmd_debug.c:				core->dbg->reg = core->anal->reg;
../threads:core/cmd_debug.c:				core->dbg->reg = orig;
../threads:core/cmd_debug.c:		r_core_debug_rr (core, core->dbg->reg);
../threads:core/cmd_debug.c:		} else eprintf ("Cannot retrieve registers from pid %d\n", core->dbg->pid);
../threads:core/cmd_debug.c:			regname = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (string));
../threads:core/cmd_debug.c:			r = r_reg_get (core->dbg->reg, regname, -1); //R_REG_TYPE_GPR);
../threads:core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_debug.c:					r_reg_set_bvalue (core->dbg->reg, r, arg+1);
../threads:core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_debug.c:					r_reg_set_value (core->dbg->reg, r,
../threads:core/cmd_debug.c:							r_reg_get_value (core->dbg->reg, r));
../threads:core/cmd_debug.c:	r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_debug.c:			bpi = r_bp_get_at (core->dbg->bp, core->offset);
../threads:core/cmd_debug.c:					r_bp_set_trace_all (core->dbg->bp,true);
../threads:core/cmd_debug.c:				} else if (!r_bp_set_trace (core->dbg->bp, addr, true)) {
../threads:core/cmd_debug.c:					r_bp_set_trace_all (core->dbg->bp,false);
../threads:core/cmd_debug.c:				} else if (!r_bp_set_trace (core->dbg->bp, addr, false)) {
../threads:core/cmd_debug.c:				bpi = r_bp_get_at (core->dbg->bp, addr);
../threads:core/cmd_debug.c:					if (core->dbg->bits & R_SYS_BITS_64) {
../threads:core/cmd_debug.c:					} else if (core->dbg->bits & R_SYS_BITS_32) {
../threads:core/cmd_debug.c:			core->dbg->bp->delta = (st64)r_num_math (core->num, input + 2);
../threads:core/cmd_debug.c:			r_cons_printf ("%"PFMT64d"\n", core->dbg->bp->delta);
../threads:core/cmd_debug.c:	case 'j': r_bp_list (core->dbg->bp, 'j'); break;
../threads:core/cmd_debug.c:	case '*': r_bp_list (core->dbg->bp, 1); break;
../threads:core/cmd_debug.c:	case '\0': r_bp_list (core->dbg->bp, 0); break;
../threads:core/cmd_debug.c:		if (input[2] == '*') r_bp_del_all (core->dbg->bp);
../threads:core/cmd_debug.c:		else r_bp_del (core->dbg->bp, r_num_math (core->num, input + 2));
../threads:core/cmd_debug.c:					bpi = r_bp_get_at (core->dbg->bp, addr);
../threads:core/cmd_debug.c:					bpi = r_bp_get_at (core->dbg->bp, addr);
../threads:core/cmd_debug.c:		bpi = r_bp_get_at (core->dbg->bp, addr);
../threads:core/cmd_debug.c:			r_bp_del (core->dbg->bp, addr);
../threads:core/cmd_debug.c:		r_bp_enable (core->dbg->bp, r_num_math (core->num, input + 2), 0);
../threads:core/cmd_debug.c:		bpi = r_bp_get_at (core->dbg->bp, core->offset);
../threads:core/cmd_debug.c:		if (*p == '*') r_bp_enable_all (core->dbg->bp,true);
../threads:core/cmd_debug.c:		else r_bp_enable (core->dbg->bp, r_num_math (core->num, input + 2), true);
../threads:core/cmd_debug.c:		if (*p == '*') r_bp_enable_all (core->dbg->bp, false);
../threads:core/cmd_debug.c:		r_bp_enable (core->dbg->bp, r_num_math (core->num, input + 2), false);
../threads:core/cmd_debug.c:				r_bp_plugin_list (core->dbg->bp);
../threads:core/cmd_debug.c:				if (!r_bp_use (core->dbg->bp, input + 3, core->anal->bits))
../threads:core/cmd_debug.c:				r_bp_del (core->dbg->bp, r_num_math (core->num, p + 1));
../threads:core/cmd_debug.c:			for (i = 0;i < core->dbg->bp->bps_idx_count; i++) {
../threads:core/cmd_debug.c:				if ((bpi = core->dbg->bp->bps_idx[i])) {
../threads:core/cmd_debug.c:				if (p && (bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:			if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:			if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:			if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:				if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:				if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:				if ((bpi = r_bp_get_index (core->dbg->bp, addr))) {
../threads:core/cmd_debug.c:	Sdb *tracenodes = core->dbg->tracenodes;
../threads:core/cmd_debug.c:	RTree *tr = core->dbg->tree;
../threads:core/cmd_debug.c:	int t = core->dbg->trace->enabled;
../threads:core/cmd_debug.c:	core->dbg->trace->enabled = 0;
../threads:core/cmd_debug.c:	r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_bp_del (core->dbg->bp, final_addr);
../threads:core/cmd_debug.c:	trace_traverse (core->dbg->tree);
../threads:core/cmd_debug.c:	core->dbg->trace->enabled = t;
../threads:core/cmd_debug.c:			r_debug_kill (core->dbg, core->dbg->pid, core->dbg->tid, sig);
../threads:core/cmd_debug.c:		eprintf ("Continue until 0x%08"PFMT64x" using %d bpsize\n", addr, core->dbg->bpsize);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_bp_add_sw (core->dbg->bp, addr, core->dbg->bpsize, R_BP_PROT_EXEC);
../threads:core/cmd_debug.c:		r_bp_del (core->dbg->bp, addr);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		old_pid = core->dbg->pid;
../threads:core/cmd_debug.c:		main_pid = core->dbg->main_pid;
../threads:core/cmd_debug.c:		if (core->dbg->threads) {
../threads:core/cmd_debug.c:			list = core->dbg->threads;
../threads:core/cmd_debug.c:			if (core->dbg->h && core->dbg->h->threads) {
../threads:core/cmd_debug.c:				list = core->dbg->h->threads (core->dbg, core->dbg->pid);
../threads:core/cmd_debug.c:		r_debug_select (core->dbg, old_pid, core->dbg->tid);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:			int old_pid = core->dbg->pid;
../threads:core/cmd_debug.c:			int old_tid = core->dbg->tid;
../threads:core/cmd_debug.c:			int t = core->dbg->trace->enabled;
../threads:core/cmd_debug.c:			core->dbg->trace->enabled = 0;
../threads:core/cmd_debug.c:			core->dbg->trace->enabled = t;
../threads:core/cmd_debug.c:		old_pid = core->dbg->pid;
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_debug_select (core->dbg, pid, core->dbg->tid);
../threads:core/cmd_debug.c:		r_debug_select (core->dbg, old_pid, core->dbg->tid);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:			RBreakpointItem *bpi = r_bp_get_at (core->dbg->bp, addr);
../threads:core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:			RBreakpointItem *bpi = r_bp_get_at (core->dbg->bp, addr);
../threads:core/cmd_debug.c:			r_bp_del (core->dbg->bp, addr);
../threads:core/cmd_debug.c:			r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:		r_reg_arena_swap (core->dbg->reg, true);
../threads:core/cmd_debug.c:					dot_trace_traverse (core, core->dbg->tree, input[2]);
../threads:core/cmd_debug.c:					r_tree_reset (core->dbg->tree);
../threads:core/cmd_debug.c:					r_debug_trace_free (core->dbg->trace);
../threads:core/cmd_debug.c:					core->dbg->trace = r_debug_trace_new ();
../threads:core/cmd_debug.c:							const char *s = r_signal_to_string (core->dbg->reason.signum);
../threads:core/cmd_debug.c:							P ("type=%s\n", r_debug_reason_to_string (core->dbg->reason.type));
../threads:core/cmd_debug.c:							P ("signum=%d\n", core->dbg->reason.signum);
../threads:core/cmd_debug.c:							P ("sigpid=%d\n", core->dbg->reason.tid);
../threads:core/cmd_debug.c:							P ("addr=0x%"PFMT64x"\n", core->dbg->reason.addr);
../threads:core/cmd_debug.c:							P ("bp_addr=0x%"PFMT64x"\n", core->dbg->reason.bp_addr);
../threads:core/cmd_debug.c:							P ("inbp=%s\n", r_str_bool (core->dbg->reason.bp_addr));
../threads:core/cmd_debug.c:							const char *s = r_signal_to_string (core->dbg->reason.signum);
../threads:core/cmd_debug.c:							P ("\"type\":\"%s\",", r_debug_reason_to_string (core->dbg->reason.type));
../threads:core/cmd_debug.c:							P ("\"signum\":%d,", core->dbg->reason.signum);
../threads:core/cmd_debug.c:							P ("\"sigpid\":%d,", core->dbg->reason.tid);
../threads:core/cmd_debug.c:							P ("\"addr\":%"PFMT64d",", core->dbg->reason.addr);
../threads:core/cmd_debug.c:							P ("\"inbp\":%s,", r_str_bool (core->dbg->reason.bp_addr));
../threads:core/cmd_debug.c:							r_reg_arena_push (core->dbg->reg);
../threads:core/cmd_debug.c:							r_reg_arena_pop (core->dbg->reg);
../threads:core/cmd_debug.c:						r_reg_arena_push (core->dbg->reg);
../threads:core/cmd_debug.c:						r_reg_arena_pop (core->dbg->reg);
../threads:core/cmd_debug.c:					r_reg_arena_push (core->dbg->reg);
../threads:core/cmd_debug.c:					r_reg_arena_pop (core->dbg->reg);
../threads:core/cmd_debug.c:				//int opid = core->dbg->pid = pid;
../threads:core/cmd_debug.c:			if (core->dbg->h && core->dbg->h->gcore) {
../threads:core/cmd_debug.c:				if (core->dbg->pid == -1) {
../threads:core/cmd_debug.c:				char *corefile = get_corefile_name (input + 1, core->dbg->pid);
../threads:core/cmd_debug.c:					if (!core->dbg->h->gcore (core->dbg, dst)) {
../threads:core/cmd_print.c:	core->print->reg = core->dbg->reg;
../threads:core/cmd_print.c:			RList *pids = (core->dbg->h && core->dbg->h->pids)
../threads:core/cmd_print.c:				? core->dbg->h->pids (core->dbg, 0): NULL;
../threads:core/cmd_search.c:				r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_search.c:				r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/cmd_search_rop.c:	regs = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:		r_reg_arena_pop (core->dbg->reg);
../threads:core/cmd_search_rop.c:		r_reg_set_value (core->dbg->reg, reg_item, nr);
../threads:core/cmd_search_rop.c:		r_reg_arena_push (core->dbg->reg);
../threads:core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:			value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:			diff_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:			r_reg_set_value (core->dbg->reg, item_dst, diff_dst);
../threads:core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:			value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:			diff_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:			r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:				value_src = r_reg_get_value (core->dbg->reg, item_src);
../threads:core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:				diff_src = r_reg_get_value (core->dbg->reg, item_src);
../threads:core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:				r_reg_set_value (core->dbg->reg, item_src, diff_src);
../threads:core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:				value_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../threads:core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:				diff_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../threads:core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:					value_src2 = r_reg_get_value (core->dbg->reg, item_src2);
../threads:core/cmd_search_rop.c:					r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:					diff_src2 = r_reg_get_value (core->dbg->reg, item_src2);
../threads:core/cmd_search_rop.c:						value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:						r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:		head = r_reg_get_list (core->dbg->reg, 0);
../threads:core/cmd_search_rop.c:				value_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../threads:core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:				diff_src1 = r_reg_get_value (core->dbg->reg, item_src1);
../threads:core/cmd_search_rop.c:				r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:					value_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:					r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_search_rop.c:					diff_dst = r_reg_get_value (core->dbg->reg, item_dst);
../threads:core/cmd_search_rop.c:					r_reg_arena_swap (core->dbg->reg, false);
../threads:core/cmd_seek.c:				RReg *orig = core->dbg->reg;
../threads:core/cmd_seek.c:				core->dbg->reg = core->anal->reg;
../threads:core/cmd_seek.c:				core->dbg->reg = orig;
../threads:core/core.c:		case 'P': return (core->dbg->pid > 0)? core->dbg->pid: 0;
../threads:core/core.c:				r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/core.c:	if (core->dbg->sgnls) {
../threads:core/core.c:		core->dbg->sgnls->refs++;
../threads:core/core.c:		sdb_ns_set (d, "signals", core->dbg->sgnls);
../threads:core/core.c:				r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/core.c:	r_core_bind (core, &core->dbg->corebind);
../threads:core/core.c:	core->dbg->cb_printf = (PrintfCallback)r_cons_printf;
../threads:core/core.c:	core->dbg->anal = core->anal; // XXX: dupped instance.. can cause lost pointerz
../threads:core/core.c://	r_reg_arena_push (core->dbg->reg); // create a 2 level register state stack
../threads:core/core.c://	core->dbg->anal->reg = core->anal->reg; // XXX: dupped instance.. can cause lost pointerz
../threads:core/core.c:	core->dbg->cb_printf = r_cons_printf;
../threads:core/core.c:	core->dbg->bp->cb_printf = r_cons_printf;
../threads:core/core.c:	r_bp_use (core->dbg->bp, R_SYS_ARCH, core->anal->bits);
../threads:core/disasm.c:		r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/disasm.c:	p = r_bp_get_at (core->dbg->bp, ds->at);
../threads:core/file.c:		r_debug_kill (core->dbg, core->dbg->pid, core->dbg->tid, 9); // KILL
../threads:core/file.c:			core->dbg->main_pid = newpid;
../threads:core/file.c:	r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/file.c:	r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/graph.c:		const char *pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);
../threads:core/graph.c:		RRegItem *r = r_reg_get (core->dbg->reg, pc, -1);
../threads:core/graph.c:		ut64 addr = r_reg_get_value (core->dbg->reg, r);
../threads:core/linux_heap_glibc.c:	r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../threads:core/linux_heap_glibc.c:		r_list_foreach (core->dbg->maps, iter, map) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps) {
../threads:core/linux_heap_glibc.c:	if (!core || !core->dbg || !core->dbg->maps){
../threads:core/visual.c:		const int cols = core->dbg->regcols;
../threads:core/visual.c:		const int cols = core->dbg->regcols;
../threads:core/visual.c:				const char *creg = core->dbg->creg;
../threads:core/visual.c:		RBreakpointItem *bp = r_bp_get_at (core->dbg->bp, addr);
../threads:core/visual.c:			r_bp_del (core->dbg->bp, addr);
../threads:core/visual.c:			r_bp_add_sw (core->dbg->bp, addr, 1, R_BP_PROT_EXEC);
../threads:debug/trace.c:	//if (tag>0 && tag<31) core->dbg->trace->tag = 1<<(sz-1);
../threads:include/r_heap_glibc.h:#define SZ core->dbg->bits
